using ContractManagementSystem.Models;
using NLog;
using System;
using System.Data.Entity;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Configuration;
using System.Web.Mvc;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.tool.xml;



namespace ContractManagementSystem.Controllers
{
    // [Authorize(Roles = "admin, initiator")]
    public class ContractController : Controller
    {
        public readonly Logger Logger = NLog.LogManager.GetCurrentClassLogger();
        ContractManagementSystemDBEntities db = new ContractManagementSystemDBEntities();
        readonly string ApplicationLink = WebConfigurationManager.AppSettings["ApplicationLink"];

        protected override JsonResult Json(object data, string contentType, System.Text.Encoding contentEncoding, JsonRequestBehavior behavior)
        {
            return new JsonResult()
            {
                Data = data,
                ContentType = contentType,
                ContentEncoding = contentEncoding,
                JsonRequestBehavior = behavior,
                MaxJsonLength = Int32.MaxValue // Use this value to set your maximum size for all of your Requests
            };
        }
        // GET: Contract
        [Authorize(Roles = "admin, initiator, legal")]
        public ActionResult New()
        {
            Logger.Info("Accessing Contract New Page");
            //return View(db.tblTemplateMasters.ToList());
            CommonModel model = new CommonModel
            {
                Template = db.tblTemplateMasters,
                Contract = db.tblContractMasters,
                ContractModification = db.tblContractModifications,
                Clause = db.tblClauseMasters,
                Variables = db.tblVariables,
                TemplateLogs = db.tblTemplateLogs,
                ContractLogs = db.tblContractLogs,
                VariableDatas = db.tblVariableDatas
            };
            return View(model);
        }

        public ActionResult Repository()
        {
            //.Where(x => x.CategoryName == user_category_id)

            int CurrentUser = 0;
            try
            {
                CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
            }
            catch { }
            //System.Collections.Generic.List<tblContractMaster> CotractList = db.tblContractMasters.Where(x => x.Initiator == CurrentUser || x.Approver1ID == CurrentUser || x.Approver2ID == CurrentUser || x.Approver3ID == CurrentUser || x.Approver4ID == CurrentUser || x.Approver5ID == CurrentUser || x.Approver6ID == CurrentUser || x.Approver7ID == CurrentUser || x.Approver8ID == CurrentUser || x.Approver9ID == CurrentUser || x.Approver10ID == CurrentUser).ToList();
        //    CommonModel model = new CommonModel
        //    {
        //        Contract = db.tblContractMasters,
        //        ContractModification = db.tblContractModifications
        //};
        

        //db.tblContractModifications.ToList()
            Logger.Info("Accessing Contract Repository Page");
            Logger.Info("Accessing DB for Repository");
            return View(db.tblContractMasters.ToList());
        }

       


        public ActionResult Index()
        {
            return RedirectToAction("Repository");
        }

        public ActionResult Details()
        {
            return RedirectToAction("Repository");
        }
        public ActionResult ExistingContractView()
        {
            return RedirectToAction("Repository");
        }

        //public ActionResult ContractDraftExtension()
        //{
        //    return RedirectToAction("Repository");
        //}


        [Route("Contract/DraftView/{id:int}")]
        public ActionResult DraftView(int id)
        {
            int CurrentUser = 0;
            try
            {
                CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
            }
            catch { }
            Logger.Info("Accessing DB for Contract Details");
            tblContractMaster tblContractMaster = db.tblContractMasters.Find(id);

    
            if (tblContractMaster.Status == "Draft" && tblContractMaster.Initiator == CurrentUser)
            {

                Logger.Info("Accessing Contract DraftView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (((tblContractMaster.Status == "Pending Approval")|| (tblContractMaster.Status == "Rejected")) && ((tblContractMaster.Initiator == CurrentUser) || ((tblContractMaster.Approver1ID == CurrentUser) && !string.IsNullOrWhiteSpace(tblContractMaster.Approver1Status)) || ((tblContractMaster.Approver2ID == CurrentUser) && !string.IsNullOrWhiteSpace(tblContractMaster.Approver2Status)) || ((tblContractMaster.Approver3ID == CurrentUser) && !string.IsNullOrWhiteSpace(tblContractMaster.Approver3Status)) || ((tblContractMaster.Approver4ID == CurrentUser) && !string.IsNullOrWhiteSpace(tblContractMaster.Approver4Status)) || ((tblContractMaster.Approver5ID == CurrentUser) && !string.IsNullOrWhiteSpace(tblContractMaster.Approver5Status)) || ((tblContractMaster.Approver6ID == CurrentUser) && !string.IsNullOrWhiteSpace(tblContractMaster.Approver6Status)) || ((tblContractMaster.Approver7ID == CurrentUser) && !string.IsNullOrWhiteSpace(tblContractMaster.Approver7Status)) || ((tblContractMaster.Approver8ID == CurrentUser) && !string.IsNullOrWhiteSpace(tblContractMaster.Approver8Status)) || ((tblContractMaster.Approver9ID == CurrentUser) && !string.IsNullOrWhiteSpace(tblContractMaster.Approver9Status)) || ((tblContractMaster.Approver10ID == CurrentUser) && !string.IsNullOrWhiteSpace(tblContractMaster.Approver10Status))))
            {
                Logger.Info("Accessing Contract DraftView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (((tblContractMaster.Status == "Approved") && ((tblContractMaster.Initiator == CurrentUser) || (tblContractMaster.Approver1ID == CurrentUser) || (tblContractMaster.Approver2ID == CurrentUser) || (tblContractMaster.Approver3ID == CurrentUser) || (tblContractMaster.Approver4ID == CurrentUser) || (tblContractMaster.Approver5ID == CurrentUser) || (tblContractMaster.Approver6ID == CurrentUser) || (tblContractMaster.Approver7ID == CurrentUser) || (tblContractMaster.Approver8ID == CurrentUser) || (tblContractMaster.Approver9ID == CurrentUser) || (tblContractMaster.Approver10ID == CurrentUser))))
            {

                Logger.Info("Accessing Contract DraftView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (((tblContractMaster.Status == "In Effect") && ((tblContractMaster.Initiator == CurrentUser) || (tblContractMaster.Approver1ID == CurrentUser) || (tblContractMaster.Approver2ID == CurrentUser) || (tblContractMaster.Approver3ID == CurrentUser) || (tblContractMaster.Approver4ID == CurrentUser) || (tblContractMaster.Approver5ID == CurrentUser) || (tblContractMaster.Approver6ID == CurrentUser) || (tblContractMaster.Approver7ID == CurrentUser) || (tblContractMaster.Approver8ID == CurrentUser) || (tblContractMaster.Approver9ID == CurrentUser) || (tblContractMaster.Approver10ID == CurrentUser))))
            {
                Logger.Info("Accessing Contract DraftView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (((tblContractMaster.Status == "Expired") && ((tblContractMaster.Initiator == CurrentUser) || (tblContractMaster.Approver1ID == CurrentUser) || (tblContractMaster.Approver2ID == CurrentUser) || (tblContractMaster.Approver3ID == CurrentUser) || (tblContractMaster.Approver4ID == CurrentUser) || (tblContractMaster.Approver5ID == CurrentUser) || (tblContractMaster.Approver6ID == CurrentUser) || (tblContractMaster.Approver7ID == CurrentUser) || (tblContractMaster.Approver8ID == CurrentUser) || (tblContractMaster.Approver9ID == CurrentUser) || (tblContractMaster.Approver10ID == CurrentUser))))
            {
                Logger.Info("Accessing Contract DraftView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (User.IsInRole("reviewer"))
            {
                Logger.Info("Accessing Contract DraftView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (User.IsInRole("finance2"))
            {
                Logger.Info("Accessing Contract DraftView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else
            {
                Logger.Info("Unauthorizrd access for draft contract");
                return HttpNotFound();
            }
            
            //return View();
        }

        public ActionResult DraftView()
        {
            return RedirectToAction("Repository");
        }
        [Route("Contract/ContractDraftExtension/{id:int}")]
        public ActionResult ContractDraftExtension(int id)
        {
            int CurrentUser = 0;
            try
            {
                CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
            }
            catch { }
            Logger.Info("Accessing DB for Contract Details");
            tblContractModification tblContractModification = db.tblContractModifications.Find(id);


            if (tblContractModification.Status == "Draft" && tblContractModification.Initiator == CurrentUser)
            {

                Logger.Info("Accessing Contract ContractDraftExtension Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (((tblContractModification.Status == "Pending Approval") || (tblContractModification.Status == "Rejected")) && ((tblContractModification.NextApprover == CurrentUser.ToString()) || (tblContractModification.Initiator == CurrentUser) || string.IsNullOrWhiteSpace(tblContractModification.Approver1Status) || string.IsNullOrWhiteSpace(tblContractModification.Approver2Status) || string.IsNullOrWhiteSpace(tblContractModification.Approver3Status) || string.IsNullOrWhiteSpace(tblContractModification.Approver4Status) || string.IsNullOrWhiteSpace(tblContractModification.Approver5Status) || string.IsNullOrWhiteSpace(tblContractModification.Approver6Status) || string.IsNullOrWhiteSpace(tblContractModification.Approver7Status) || string.IsNullOrWhiteSpace(tblContractModification.Approver8Status) || string.IsNullOrWhiteSpace(tblContractModification.Approver9Status) || string.IsNullOrWhiteSpace(tblContractModification.Approver10Status)))
            {
                Logger.Info("Accessing Contract ContractDraftExtension Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            
            else if (((tblContractModification.Status == "Approved") && ((tblContractModification.Initiator == CurrentUser) || (tblContractModification.Approver1ID == CurrentUser) || (tblContractModification.Approver2ID == CurrentUser) || (tblContractModification.Approver3ID == CurrentUser) || (tblContractModification.Approver4ID == CurrentUser) || (tblContractModification.Approver5ID == CurrentUser) || (tblContractModification.Approver6ID == CurrentUser) || (tblContractModification.Approver7ID == CurrentUser) || (tblContractModification.Approver8ID == CurrentUser) || (tblContractModification.Approver9ID == CurrentUser) || (tblContractModification.Approver10ID == CurrentUser))))
            {

                Logger.Info("Accessing Contract ContractDraftExtension Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (((tblContractModification.Status == "In Effect") && ((tblContractModification.Initiator == CurrentUser) || (tblContractModification.Approver1ID == CurrentUser) || (tblContractModification.Approver2ID == CurrentUser) || (tblContractModification.Approver3ID == CurrentUser) || (tblContractModification.Approver4ID == CurrentUser) || (tblContractModification.Approver5ID == CurrentUser) || (tblContractModification.Approver6ID == CurrentUser) || (tblContractModification.Approver7ID == CurrentUser) || (tblContractModification.Approver8ID == CurrentUser) || (tblContractModification.Approver9ID == CurrentUser) || (tblContractModification.Approver10ID == CurrentUser))))
            {
                Logger.Info("Accessing Contract ContractDraftExtension Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (((tblContractModification.Status == "Expired") && ((tblContractModification.Initiator == CurrentUser) || (tblContractModification.Approver1ID == CurrentUser) || (tblContractModification.Approver2ID == CurrentUser) || (tblContractModification.Approver3ID == CurrentUser) || (tblContractModification.Approver4ID == CurrentUser) || (tblContractModification.Approver5ID == CurrentUser) || (tblContractModification.Approver6ID == CurrentUser) || (tblContractModification.Approver7ID == CurrentUser) || (tblContractModification.Approver8ID == CurrentUser) || (tblContractModification.Approver9ID == CurrentUser) || (tblContractModification.Approver10ID == CurrentUser))))
            {
                Logger.Info("Accessing Contract ContractDraftExtension Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (User.IsInRole("reviewer"))
            {
                Logger.Info("Accessing Contract DraftView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (User.IsInRole("finance2"))
            {
                Logger.Info("Accessing Contract DraftView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else
            {
                Logger.Info("Unauthorizrd access for draft contract");
                return HttpNotFound();
            }
            //return View();
        }
      

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ClonningContract(int ContractID)
        {
            int CurrentUser = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Contract ClonningContract");
            try
            {
                Logger.Info("Accessing DB for Updating the Contract Cloning Details: Checking Status");
                tblContractMaster Contract = db.tblContractMasters.Find(ContractID);
                tblContractMaster ModifiedContract = new tblContractMaster();


                //ModifiedContract = Contract;

                ModifiedContract.OriginalContractID = ContractID;
                ModifiedContract.ContractName = Contract.ContractName;
                ModifiedContract.ContractCategory = Contract.ContractCategory;
                ModifiedContract.Template = Contract.Template;
                ModifiedContract.ContractDraft = Contract.ContractDraft;
                ModifiedContract.ContractSubCategory = Contract.ContractSubCategory;
                ModifiedContract.ContractType = Contract.ContractType;
                ModifiedContract.TemplateType = Contract.TemplateType;
                ModifiedContract.Description = Contract.Description;
                ModifiedContract.Status = "Draft";
                ModifiedContract.Department = Contract.Department;
                ModifiedContract.SubDepartment = Contract.SubDepartment;
                ModifiedContract.Plant = Contract.Plant;
                //ModifiedContract.SupportingDoc1 = Contract.SupportingDoc1;
                //ModifiedContract.SupportingDoc1FileName = Contract.SupportingDoc1FileName;
                //ModifiedContract.SupportingDoc1FileType = Contract.SupportingDoc1FileType;
                //ModifiedContract.TemplateType = Contract.TemplateType;
                //ModifiedContract.UploadExistingContractFileName = Contract.UploadExistingContractFileName;
                //ModifiedContract.UploadExistingContractFileType = Contract.UploadExistingContractFileType;
                //ModifiedContract.UploadExistingFile = Contract.UploadExistingFile;
                ModifiedContract.Initiator = CurrentUser;
                ModifiedContract.Approver1ID = Contract.Approver1ID;
                ModifiedContract.Approver2ID = Contract.Approver2ID;
                ModifiedContract.Approver3ID = Contract.Approver3ID;
                ModifiedContract.Approver4ID = Contract.Approver4ID;
                ModifiedContract.Approver5ID = Contract.Approver5ID;
                ModifiedContract.Approver6ID = Contract.Approver6ID;
                ModifiedContract.Approver7ID = Contract.Approver7ID;
                ModifiedContract.Approver8ID = Contract.Approver8ID;
                ModifiedContract.Approver9ID = Contract.Approver9ID;
                ModifiedContract.Approver10ID = Contract.Approver10ID;
                ModifiedContract.ContractModificationType = "Cloning";

                db.tblContractMasters.Add(ModifiedContract);


                db.SaveChanges();
                Logger.Info("Accessed DB, Contract Cloning Details Saved");


                Logger.Info("Accessing DB for Contract Variable Details");
                var Variable = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == Contract.ContractID).Where(x => x.Version == "Contract").Where(x => x.Type == "Contract") select tblVariableData;

                Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");

                foreach (var item in Variable)
                {
                    tblVariableData variable = new tblVariableData
                    {
                        Type = "Contract",
                        TypeID = ModifiedContract.ContractID,
                        Variable = item.Variable,
                        Value = item.Value,
                        Version = "Contract",
                    };
                    db.tblVariableDatas.Add(variable);
                }
                // db.SaveChanges();
                Logger.Info("Accessed DB, Contract Variables Saved");

                tblContractLog log = new tblContractLog();
                log.LogContractUID = ModifiedContract.ContractID;
                log.ModifiedBy = CurrentUser.ToString() + " - " + CurrentUserName;
                log.LogActivity = "Contract Cloning";
                log.ChangedFrom = "Contract cloned from " + Contract.ContractID;
                log.ChangedTo = "To " + ModifiedContract.ContractID;
                log.DateandTime = DateTime.Now.ToString();
                db.tblContractLogs.Add(log);

                db.SaveChanges();
                Logger.Info("Accessed DB, contract Log Record Saved");


                string[] response = new string[2];
                response[0] = "sucess";
                response[1] = "" + ModifiedContract.ContractID;
                //if (ModelState.IsValid)
                //{
                //    Contract.ContractModificationType = ModificationType;
                //    db.Entry(Contract).State = EntityState.Modified;
                //    db.SaveChanges();
                //    return RedirectToAction("ContractDraftExtension", "Contract", new { id = ModifiedContract.ContractID });
                //}
                return Json(response);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'ClonningContract' Action HTTP POST Main exception");
                //status = Ex.InnerException.Message;
                return Json("error");
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ModificationContract(string ModificationType, int ContractID, string[] arrVariableNames, string[] arrVariableValues, int CurrentUser)
        {
            int CurrentUserID = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUserID = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Contract ModificationContract");
            try
            {
                Logger.Info("Accessing DB for Updating the Contract Extension/Modification Details: Checking Status");
                tblContractMaster contract = db.tblContractMasters.Find(ContractID);

                tblContractLog log = new tblContractLog();
                log.LogContractUID = contract.ContractID;
                log.ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName;
                log.LogActivity = "contract modification";
                log.ChangedFrom = "Current Contract changed to";
                log.ChangedTo = ModificationType;
                log.DateandTime = DateTime.Now.ToString();
                db.tblContractLogs.Add(log);
                db.SaveChanges();
                Logger.Info("Accessed DB, contract Log Record Saved");

                string TemplateContent = "";
                if (ModificationType == "Amendments")
                {
                    try
                    {
                        Logger.Info("Accessed DB, Checking for Template Details : match");
                        TemplateContent = (from tblTemplateAmendment in db.tblTemplateAmendments select tblTemplateAmendment.Amendments).First();
                        Logger.Info("Accessed DB, Checking for Template Details : Template Found");
                    }
                    catch
                    {

                    }

                }

                if (ModificationType == "Extension")
                {
                    try
                    {
                        Logger.Info("Accessed DB, Checking for Template Details : match");
                        TemplateContent = (from tblTemplateAmendment in db.tblTemplateAmendments select tblTemplateAmendment.Extension).First();
                        Logger.Info("Accessed DB, Checking for Template Details : Template Found");
                    }
                    catch
                    {

                    }

                }
                if (ModificationType == "Termination")
                {
                    try
                    {
                        Logger.Info("Accessed DB, Checking for Template Details : match");
                        TemplateContent = (from tblTemplateAmendment in db.tblTemplateAmendments select tblTemplateAmendment.Termination).First();
                        Logger.Info("Accessed DB, Checking for Template Details : Template Found");
                    }
                    catch
                    {

                    }

                }


                tblContractModification modifiedContract = new tblContractModification
                {
                    ContractName = HttpUtility.HtmlEncode(contract.ContractName),
                    ContractType = HttpUtility.HtmlEncode(contract.ContractType),
                    ContractCategory = HttpUtility.HtmlEncode(contract.ContractCategory),
                    ContractSubCategory = HttpUtility.HtmlEncode(contract.ContractSubCategory),
                    Description = HttpUtility.HtmlEncode(contract.Description),
                    TemplateType = HttpUtility.HtmlEncode(contract.TemplateType),
                    OriginalContractID = ContractID,
                    Initiator = contract.Initiator,
                    Department = contract.Department,
                    SubDepartment = contract.SubDepartment,
                    Plant = contract.Plant,

                    // modifiedContract.ContractDraft = contract.ContractDraft;
                    UploadExistingFile = contract.UploadExistingFile,
                    UploadExistingContractFileName = contract.UploadExistingContractFileName,
                    UploadExistingContractFileType = contract.UploadExistingContractFileType,
                    
                    ContractModificationType = ModificationType,
                    ContractDraft = TemplateContent,
                    Status = "Draft",

                    Approver1ID = contract.Approver1ID,
                    Approver2ID = contract.Approver2ID,
                    Approver3ID = contract.Approver3ID,
                    Approver4ID = contract.Approver4ID,
                    Approver5ID = contract.Approver5ID,
                    Approver6ID = contract.Approver6ID,
                    Approver7ID = contract.Approver7ID,
                    Approver8ID = contract.Approver8ID,
                    Approver9ID = contract.Approver9ID,
                    Approver10ID = contract.Approver10ID,

                    InEffectFrom = contract.InEffectFrom,
                    InEffectTo = contract.InEffectTo
                };

                
                    


                db.tblContractModifications.Add(modifiedContract);
                db.SaveChanges();
                Logger.Info("Accessed DB, Contract Modifcation/Extension Details Saved");

                if(modifiedContract.ContractModificationType == "Termination")
                {
                    string Termination = "";
                    Termination = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                    string Terminationemail = "";
                    Terminationemail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                    var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable }); ///select tblVariableData;
                    string[] temp = new string[5];

                    foreach (var r in TableVariable)
                    {
                        temp[0] = r.Variable;
                        temp[1] = r.Value;
                        if (temp[0] == "Vendor Name")
                        {
                            temp[3] = "Vendor Name";
                            temp[4] = temp[1];
                        }

                    }
                    string employeename = Termination;
                    string VendorName = temp[4];
                    string[] TO = { Terminationemail };

                    string Subject = contract.ContractName + " is Terminated ";
                    string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                    string Paragraph = "The Contract details as mentioned below is  requested for Termiation and has been sent for Approval. <br/><br/>";
                    string Body = "Dear " + Termination + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Template Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Template Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Template Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                    SMTP.Send(TO, Subject, Body);
                }

                for (int i = 0; i < arrVariableNames.Length; i++)
                {
                    Logger.Info("Attempt Contract Variables");
                    try
                    {

                        string TempVariable = arrVariableNames[i];

                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == modifiedContract.ContractID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Where(x => x.Variable == TempVariable) select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (Variable.ToList().Count > 0)
                        {
                            //tblVariableData Variable = new tblVariableData();
                            // tblVariableData Variable = db.tblVariableDatas.Find(ID);
                            foreach (var item in Variable)
                            {
                                //item.Type = "Template";
                                //item.TypeID = ID;
                                //Variable.Variable = arrVariableNames[i];
                                //item.Variable = arrVariableNames[i];
                                Logger.Info("Accessing DB for Updating the Contract Variables");
                                tblVariableData variable = new tblVariableData();
                                variable = item;

                                variable.Value = arrVariableValues[i];
                                if (ModelState.IsValid)
                                {
                                    db.Entry(variable).State = EntityState.Modified;

                                    //  db.SaveChanges();

                                }
                            }
                            //db.SaveChanges();

                        }

                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                            Logger.Info("Accessing DB for Saving the Contract Variables");
                            tblVariableData variable = new tblVariableData
                            {
                                Type = "Contract",
                                TypeID = modifiedContract.ContractID,
                                Variable = arrVariableNames[i],
                                Value = arrVariableValues[i],
                                Version = "Contract",
                            };

                            db.tblVariableDatas.Add(variable);
                        }

                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Variables Saved");
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'ModificationContract' Action HTTP POST Main exception");
                        return Json("error");
                    }
                }

                contract.ContractModificationType = modifiedContract.ContractModificationType;
                db.Entry(contract).State = EntityState.Modified;
                db.SaveChanges();

                string[] response = new string[2];
                response[0] = "sucess";
                response[1] = "" + modifiedContract.ContractID;
                //if (ModelState.IsValid)
                //{
                //    Contract.ContractModificationType = ModificationType;
                //    db.Entry(Contract).State = EntityState.Modified;
                //    db.SaveChanges();
                //    return RedirectToAction("ContractDraftExtension", "Contract", new { id = ModifiedContract.ContractID });
                //}
                return Json(response);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'ModificationContract' Action HTTP POST Main exception");
                //status = Ex.InnerException.Message;
                return Json("error");
            }

        }

        [Route("Contract/Details/{id:int}")]
        public ActionResult Details(int id)
        {
            int CurrentUser = 0;
            try
            {
                CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
            }
            catch { }
            Logger.Info("Accessing DB for Contract Details");
            tblContractMaster tblContractMaster = db.tblContractMasters.Find(id);

            Logger.Info("Accessed DB, Checking Contract Details: Checking Status");
            if (tblContractMaster == null)
            {
                Logger.Info("Unauthorizrd access for draft contract");
                return HttpNotFound();
            }
            if (tblContractMaster.Status == "Draft" && tblContractMaster.Initiator == CurrentUser)
            {

                Logger.Info("Accessed DB, Checking Contract Details: Details Found");

                Logger.Info("Redirecting to Contract Details Page");
                return View(tblContractMaster);
            }
            else if (((tblContractMaster.Status == "Pending Approval") || (tblContractMaster.Status == "Rejected")) && ((tblContractMaster.Initiator == CurrentUser) || (tblContractMaster.Approver1ID == CurrentUser) || (tblContractMaster.Approver2ID == CurrentUser) || (tblContractMaster.Approver3ID == CurrentUser) || (tblContractMaster.Approver4ID == CurrentUser) || (tblContractMaster.Approver5ID == CurrentUser) || (tblContractMaster.Approver6ID == CurrentUser) || (tblContractMaster.Approver7ID == CurrentUser) || (tblContractMaster.Approver8ID == CurrentUser) || (tblContractMaster.Approver9ID == CurrentUser) || (tblContractMaster.Approver10ID == CurrentUser)))
            {

                Logger.Info("Accessed DB, Checking Contract Details: Details Found");

                Logger.Info("Redirecting to Contract Details Page");
                return View(tblContractMaster);
            }
            
            else if (((tblContractMaster.Status == "Approved") && ((tblContractMaster.Initiator == CurrentUser) || (tblContractMaster.Approver1ID == CurrentUser) || (tblContractMaster.Approver2ID == CurrentUser) || (tblContractMaster.Approver3ID == CurrentUser) || (tblContractMaster.Approver4ID == CurrentUser) || (tblContractMaster.Approver5ID == CurrentUser) || (tblContractMaster.Approver6ID == CurrentUser) || (tblContractMaster.Approver7ID == CurrentUser) || (tblContractMaster.Approver8ID == CurrentUser) || (tblContractMaster.Approver9ID == CurrentUser) || (tblContractMaster.Approver10ID == CurrentUser))))
            {

                Logger.Info("Accessed DB, Checking Contract Details: Details Found");

                Logger.Info("Redirecting to Contract Details Page");
                return View(tblContractMaster);
            }
            else if (((tblContractMaster.Status == "In Effect") && ((tblContractMaster.Initiator == CurrentUser) || (tblContractMaster.Approver1ID == CurrentUser) || (tblContractMaster.Approver2ID == CurrentUser) || (tblContractMaster.Approver3ID == CurrentUser) || (tblContractMaster.Approver4ID == CurrentUser) || (tblContractMaster.Approver5ID == CurrentUser) || (tblContractMaster.Approver6ID == CurrentUser) || (tblContractMaster.Approver7ID == CurrentUser) || (tblContractMaster.Approver8ID == CurrentUser) || (tblContractMaster.Approver9ID == CurrentUser) || (tblContractMaster.Approver10ID == CurrentUser))))
            {

                Logger.Info("Accessed DB, Checking Contract Details: Details Found");

                Logger.Info("Redirecting to Contract Details Page");
                return View(tblContractMaster);
            }
            else if (((tblContractMaster.Status == "Expired") && ((tblContractMaster.Initiator == CurrentUser) || (tblContractMaster.Approver1ID == CurrentUser) || (tblContractMaster.Approver2ID == CurrentUser) || (tblContractMaster.Approver3ID == CurrentUser) || (tblContractMaster.Approver4ID == CurrentUser) || (tblContractMaster.Approver5ID == CurrentUser) || (tblContractMaster.Approver6ID == CurrentUser) || (tblContractMaster.Approver7ID == CurrentUser) || (tblContractMaster.Approver8ID == CurrentUser) || (tblContractMaster.Approver9ID == CurrentUser) || (tblContractMaster.Approver10ID == CurrentUser))))
            {

                Logger.Info("Accessed DB, Checking Contract Details: Details Found");

                Logger.Info("Redirecting to Contract Details Page");
                return View(tblContractMaster);
            }
            else if (User.IsInRole("reviewer"))
            {
                Logger.Info("Redirecting to Contract Details Page");
                return View(tblContractMaster);
            }
            else if (User.IsInRole("finance2"))
            {
                Logger.Info("Redirecting to Contract Details Page");
                return View(tblContractMaster);
            }
            else 
            {
                Logger.Info("Unauthorizrd access of contract");
                return HttpNotFound();
            }
        }


        [HttpPost]
        public ActionResult DeleteContractFromDB(int ContractID, int CurrentUserID = 0)
        {
            int CurrentUser = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Contract DeleteContractFromDB");
            try
            {
                Logger.Info("Accessing DB for Deleting the Contract Records");
                tblContractMaster contract = db.tblContractMasters.Find(ContractID);
                db.tblContractMasters.Remove(contract);
                db.SaveChanges();
                Logger.Info("Accessed DB, Contract Record Deleted");

                Logger.Info("Accessing DB for Saving the Contract Log Details");
                tblContractLog log = new tblContractLog
                {
                    LogContractUID = ContractID,
                    ModifiedBy = CurrentUser.ToString() + " - " + CurrentUserName,
                    LogActivity = "Deleted",
                    ChangedFrom = "-",
                    ChangedTo = "-",
                    DateandTime = DateTime.Now.ToString()
                };

                db.tblContractLogs.Add(log);
                db.SaveChanges();
                Logger.Info("Accessed DB, Contract Log Record Saved");
                return Json("success");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'DeleteContractFromDB' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public JsonResult getCategory()
        {
            Logger.Info("Attempt Contract getCategory");
            try
            {
                Logger.Info("Accessing DB for Category List");
                var result = from tblCategory in db.tblCategories select tblCategory.CategoryName;
                Logger.Info("Accessed DB, Checking Category List: Category Found");
                return Json(result);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'getCategory' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public JsonResult getSubCategory(string user_category_id)
        {
            Logger.Info("Attempt Contract getSubCategory");
            try
            {
                Logger.Info("Accessing DB for SubCategory List");

                var result = from tblSubCategory in db.tblSubCategories.Where(x => x.CategoryName == user_category_id) select tblSubCategory.SubCategoryName;
                Logger.Info("Accessed DB, Checking SubCategory List: SubCategory Found");
                return Json(result);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'getSubCategory' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        
        [HttpPost]

        public ActionResult getTemplateModalDetails(int TemplateID)
        {
            Logger.Info("Attempt Contract getTemplateModalDetails");
            try
            {
                Logger.Info("Accessing DB for Template Details : TemplateID match");
                var result = /*from tblTemplateMaster in*/ db.tblTemplateMasters.Where(x => x.TemplateID == TemplateID).Select(x => new { x.TemplateID, x.Name }); //select tblTemplateMaster;
                Logger.Info("Accessed DB, Checking Template Details: Details Found");
                return Json(result);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'getTemplateModalDetails' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public ActionResult getLogDetail(int ID)
        {
            Logger.Info("Attempt Contract getLogDetail");

            try
            {
                Logger.Info("Accessed DB, Checking Contract Log Details: LogID match");

                var result = from tblContractLog in db.tblContractLogs.Where(x => x.LogContractUID == ID) select tblContractLog;
                Logger.Info("Accessed DB, Checking Contract Log Details: LogDetails Found");
                return Json(result);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'getLogDetail' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public ActionResult SaveLog(string details, int ID, string initialvalue, string USerID)
        {
            Logger.Info("Attempt Contract SaveLog");


            try
            {
                Logger.Info("Accessing DB for Saving the Contract Log Details");
                tblContractLog log = new tblContractLog
                {
                    LogContractUID = ID,
                    ModifiedBy = USerID.ToString(),
                    LogActivity = "Modified",
                    ChangedFrom = initialvalue,
                    ChangedTo = details,
                    DateandTime = DateTime.Now.ToString()
                };

                db.tblContractLogs.Add(log);
                
                db.SaveChanges();
                Logger.Info("Accessed DB, Contract Log Record Saved");
                return Json("");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'SaveLog' Action HTTP POST Main exception");
                return Json(Ex.Message);
            }
        }

        [HttpPost]
        public ActionResult GetTemplateNameOnID(int id)
        {
            Logger.Info("Attempt Contract GetTemplateNameOnID");
            try
            {
                Logger.Info("Accessing DB for Contract Details: ContractID match");
                var Datas = db.tblContractMasters.Where(x => x.ContractID == id).Select(x => new { x.ContractID, x.ContractDraft, x.ContractName, x.OriginalContractID, x.ReviewerID });//select tblContractMaster;
                var result = Datas.SingleOrDefault();
                Logger.Info("Accessed DB, Checking Contract Details: Details Found");
                return Json(result);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetTemplateNameOnID' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        
            [HttpPost]
        public ActionResult getModificationID(int id,string Type)
        {
            Logger.Info("Attempt Contract getModificationID");
            try
            {
                Logger.Info("Accessing DB for ContractModification Details: OriginalID match");
                var result = from tblContractModification in db.tblContractModifications.Where(x => x.OriginalContractID == id).Where(x => x.ContractModificationType == Type) select tblContractModification.ContractID;
                Logger.Info("Accessed DB, Checking ContractModification Details: Details Found");
                foreach(var r in result)
                {
                    return Json(r);
                }
                
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'getModificationID' Action HTTP POST Main exception");
               
            }
            return Json("error");
        }

        [HttpPost]
        public ActionResult GetModifiedContractNameOnID(int id)
        {
            Logger.Info("Attempt ModifiedContract GetModifiedContractNameOnID");
            try
            {
                Logger.Info("Accessing DB for Contract Details: ContractID match");
                var Datas = db.tblContractModifications.Where(x => x.ContractID == id).Select(x => new { x.ContractID, x.ContractDraft, x.ContractName, x.OriginalContractID, x.ReviewerID });//select tblContractMaster;
                var result = Datas.SingleOrDefault();
                Logger.Info("Accessed DB, Checking Contract Details: Details Found");
                return Json(result);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetModifiedContractNameOnID' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SaveContractPlaceHolder(int ID, string[] arrVariableNames, string[] arrVariableValues, int CurrentUser)
        {
            int CurrentUserID = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUserID = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }

           
                Logger.Info("Attempt Contract Variables");
                try
                {
                    Logger.Info("Accessing DB for Contract Variable Details");
                    var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;


                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                    if (Variable.ToList().Count > 0)
                    {

                        foreach (var item in Variable)
                        {
                            var Id = item.ID;

                            tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                            db.tblVariableDatas.Remove(eachvariable);
                            //db.SaveChanges();


                        }
                        db.SaveChanges();
                    }
                }
                catch (Exception Ex)
                {
                    Logger.Error(Ex, "'Contract' Controller , 'SaveTemplate' Action HTTP POST Main exception");
                    return Json("error");
                }

                for (int i = 0; i < arrVariableNames.Length; i++)
                {
                    Logger.Info("Attempt Contract Variables");
                    try
                    {
                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                        Logger.Info("Accessing DB for Saving the Contract Variables");
                        tblVariableData newVariable = new tblVariableData
                        {
                            Type = "Contract",
                            TypeID = ID,
                            Variable = arrVariableNames[i],
                            Value = arrVariableValues[i],
                            Version = "Contract",
                        };

                        db.tblVariableDatas.Add(newVariable);

                        //newVariable.Value = arrVariableValues[i];

                        //LogChangeFrom = LogChangeFrom + newVariable.Variable + " : " + newVariable.Value;
                        //LogChangeTo = LogChangeTo + newVariable.Variable + " : " + newVariable.Value;

                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Variables Saved");
                    }

                    catch { }
                }


                var tableVariableData = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Variable, x.Value }); //select tblVariableData;
                string[] Duration = new string[4];

                foreach (var r in tableVariableData)
                {
                    Duration[0] = r.Variable;
                    Duration[1] = r.Value;
                    if (Duration[0] == "Duration from")
                    {
                        Duration[2] = Duration[1];
                    }
                    if (Duration[0] == "Duration to")
                    {
                        Duration[3] = Duration[1];
                    }
                }

                tblContractMaster contract = db.tblContractMasters.Find(ID);

                contract.InEffectFrom = Duration[2];
                contract.InEffectTo = Duration[3];

                db.Entry(contract).State = EntityState.Modified;

                db.SaveChanges();
                return Json("success");
            
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SaveTemplate(string content, int ID, string[] arrVariableNames, string[] arrVariableValues,int CurrentUser)

        {
            int CurrentUserID = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUserID = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            string LogChangeFrom = "";
            string LogChangeTo = "";
            Logger.Info("Attempt Contract SaveTemplate");
            try
            {
                //string EmployeePlant = "";
                //EmployeePlant = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == CurrentUserID) select tblUserMaster.UserPlant).First();
                tblContractMaster contract = db.tblContractMasters.Find(ID);

                //var ApprovalTable = from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.WorkflowType == "Contract - Modified").
                //                    Where(x => x.Department == contract.Department).Where(x => x.SubDepartment == contract.SubDepartment)
                //                    select tblApprovalMaster;

                //if (contract.TemplateType == "From Template" && contract.Status == "Draft")
                //{
                //        if (ApprovalTable.ToList().Count > 0)
                //        {

                //            string Approver1 = "0";
                //            string Approver2 = "0";
                //            string Approver3 = "0";
                //            string Approver4 = "0";
                //            string Approver5 = "0";
                //            string Approver6 = "0";
                //            string Approver7 = "0";
                //            string Approver8 = "0";
                //            string Approver9 = "0";
                //            string Approver10 = "0";

                //            try
                //            {
                //                Approver1 = (from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.WorkflowType == "Contract - Modified").
                //                                Where(x => x.Department == contract.Department).Where(x => x.SubDepartment == contract.SubDepartment).Where(x => x.ApprovalLevel == 1)
                //                             select tblApprovalMaster.EMPID.ToString()).First();
                //                Approver2 = (from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.WorkflowType == "Contract - Modified").
                //                                Where(x => x.Department == contract.Department).Where(x => x.SubDepartment == contract.SubDepartment).Where(x => x.ApprovalLevel == 2)
                //                             select tblApprovalMaster.EMPID.ToString()).First();
                //                Approver3 = (from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.WorkflowType == "Contract - Modified").
                //                                Where(x => x.Department == contract.Department).Where(x => x.SubDepartment == contract.SubDepartment).Where(x => x.ApprovalLevel == 3)
                //                             select tblApprovalMaster.EMPID.ToString()).First();
                //                Approver4 = (from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.WorkflowType == "Contract - Modified").
                //                                Where(x => x.Department == contract.Department).Where(x => x.SubDepartment == contract.SubDepartment).Where(x => x.ApprovalLevel == 4)
                //                             select tblApprovalMaster.EMPID.ToString()).First();
                //                Approver5 = (from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.WorkflowType == "Contract - Modified").
                //                                Where(x => x.Department == contract.Department).Where(x => x.SubDepartment == contract.SubDepartment).Where(x => x.ApprovalLevel == 5)
                //                             select tblApprovalMaster.EMPID.ToString()).First();
                //                Approver6 = (from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.WorkflowType == "Contract - Modified").
                //                                Where(x => x.Department == contract.Department).Where(x => x.SubDepartment == contract.SubDepartment).Where(x => x.ApprovalLevel == 6)
                //                             select tblApprovalMaster.EMPID.ToString()).First();
                //                Approver7 = (from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.WorkflowType == "Contract - Modified").
                //                                Where(x => x.Department == contract.Department).Where(x => x.SubDepartment == contract.SubDepartment).Where(x => x.ApprovalLevel == 7)
                //                             select tblApprovalMaster.EMPID.ToString()).First();
                //                Approver8 = (from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.WorkflowType == "Contract - Modified").
                //                                Where(x => x.Department == contract.Department).Where(x => x.SubDepartment == contract.SubDepartment).Where(x => x.ApprovalLevel == 8)
                //                             select tblApprovalMaster.EMPID.ToString()).First();
                //                Approver9 = (from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.WorkflowType == "Contract - Modified").
                //                                Where(x => x.Department == contract.Department).Where(x => x.SubDepartment == contract.SubDepartment).Where(x => x.ApprovalLevel == 9)
                //                             select tblApprovalMaster.EMPID.ToString()).First();
                //                Approver10 = (from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.WorkflowType == "Contract - Modified").
                //                                Where(x => x.Department == contract.Department).Where(x => x.SubDepartment == contract.SubDepartment).Where(x => x.ApprovalLevel == 10)
                //                              select tblApprovalMaster.EMPID.ToString()).First();
                //            }
                //            catch { }


                //            contract.Approver1ID = Convert.ToInt32(Approver1);
                //            contract.Approver2ID = Convert.ToInt32(Approver2);
                //            contract.Approver3ID = Convert.ToInt32(Approver3);
                //            contract.Approver4ID = Convert.ToInt32(Approver4);
                //            contract.Approver5ID = Convert.ToInt32(Approver5);
                //            contract.Approver6ID = Convert.ToInt32(Approver6);
                //            contract.Approver7ID = Convert.ToInt32(Approver7);
                //            contract.Approver8ID = Convert.ToInt32(Approver8);
                //            contract.Approver9ID = Convert.ToInt32(Approver9);
                //            contract.Approver10ID = Convert.ToInt32(Approver10);

                //            contract.Modified = "ContractModified";

                //            Logger.Info("Attempt Contract Variables");
                //            try
                //            {
                //                Logger.Info("Accessing DB for Contract Variable Details");
                //                var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;


                //                Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                //                if (Variable.ToList().Count > 0)
                //                {

                //                    foreach (var item in Variable)
                //                    {
                //                        var Id = item.ID;

                //                        tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                //                        db.tblVariableDatas.Remove(eachvariable);
                //                        //db.SaveChanges();


                //                    }
                //                    db.SaveChanges();
                //                }
                //            }
                //            catch (Exception Ex)
                //            {
                //                Logger.Error(Ex, "'Contract' Controller , 'SaveTemplate' Action HTTP POST Main exception");
                //                return Json("error");
                //            }

                //            for (int i = 0; i < arrVariableNames.Length; i++)
                //            {
                //                Logger.Info("Attempt Contract Variables");
                //                try
                //                {
                //                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                //                    Logger.Info("Accessing DB for Saving the Contract Variables");
                //                    tblVariableData newVariable = new tblVariableData
                //                    {
                //                        Type = "Contract",
                //                        TypeID = ID,
                //                        Variable = arrVariableNames[i],
                //                        Value = arrVariableValues[i],
                //                        Version = "Contract",
                //                    };

                //                    db.tblVariableDatas.Add(newVariable);

                //                    //newVariable.Value = arrVariableValues[i];

                //                    //LogChangeFrom = LogChangeFrom + newVariable.Variable + " : " + newVariable.Value;
                //                    //LogChangeTo = LogChangeTo + newVariable.Variable + " : " + newVariable.Value;

                //                    db.SaveChanges();
                //                    Logger.Info("Accessed DB, Contract Variables Saved");
                //                }

                //                catch { }
                //            }


                //            var tableVariableData = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Variable, x.Value }); //select tblVariableData;
                //            string[] Duration = new string[4];

                //            foreach (var r in tableVariableData)
                //            {
                //                Duration[0] = r.Variable;
                //                Duration[1] = r.Value;
                //                if (Duration[0] == "Duration from")
                //                {
                //                    Duration[2] = Duration[1];
                //                }
                //                if (Duration[0] == "Duration to")
                //                {
                //                    Duration[3] = Duration[1];
                //                }
                //            }



                //            Logger.Info("Accessing DB for Saving the Contract Draft Details");
                //            //tblContractMaster contract = db.tblContractMasters.Find(ID);
                //            string OldValues = "";
                //            string NewValues = "";

                //            if (contract.ContractDraft != content)
                //            {
                //                OldValues = OldValues + " From Old content " + " , ";
                //                NewValues = NewValues + "New content : " + " , ";
                //            }

                //            if (string.IsNullOrWhiteSpace(contract.ContractDraft))
                //            {
                //                contract.Template = content;
                //            }
                //            contract.ContractDraft = content;


                //            contract.InEffectFrom = Duration[2];
                //            contract.InEffectTo = Duration[3];

                //            db.Entry(contract).State = EntityState.Modified;

                //            if (OldValues.Length > 0)
                //            {
                //                tblContractLog logs = new tblContractLog();
                //                logs.LogContractUID = contract.ContractID;
                //                logs.ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName;
                //                logs.LogActivity = "Contract Content Modified";
                //                logs.ChangedFrom = OldValues;
                //                logs.ChangedTo = NewValues;
                //                logs.DateandTime = DateTime.Now.ToString();
                //                db.tblContractLogs.Add(logs);
                //            }

                //            db.SaveChanges();
                //            Logger.Info("Accessed DB, Contract Draft Saved");
                //            Logger.Info("Accessing DB for Saving the contract Log Details");
                //            tblContractLog log = new tblContractLog();
                //            log.LogContractUID = contract.ContractID;
                //            log.ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName;
                //            log.LogActivity = "Contract Saved";
                //            log.ChangedFrom = "-";
                //            log.ChangedTo = "-";
                //            log.DateandTime = DateTime.Now.ToString();
                //            db.tblContractLogs.Add(log);
                //            db.SaveChanges();
                //            Logger.Info("Accessed DB, contract Log Record Saved");

                //            return Json("success");
                //        }

                //        else
                //        {
                //            return Json("Contact Admin");
                //        }
                //}
                //else
                //{
                    Logger.Info("Attempt Contract Variables");
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;


                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (Variable.ToList().Count > 0)
                        {

                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges();


                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'SaveTemplate' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    for (int i = 0; i < arrVariableNames.Length; i++)
                    {
                        Logger.Info("Attempt Contract Variables");
                        try
                        {
                            Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                            Logger.Info("Accessing DB for Saving the Contract Variables");
                            tblVariableData newVariable = new tblVariableData
                            {
                                Type = "Contract",
                                TypeID = ID,
                                Variable = arrVariableNames[i],
                                Value = arrVariableValues[i],
                                Version = "Contract",
                            };

                            db.tblVariableDatas.Add(newVariable);

                            //newVariable.Value = arrVariableValues[i];

                            //LogChangeFrom = LogChangeFrom + newVariable.Variable + " : " + newVariable.Value;
                            //LogChangeTo = LogChangeTo + newVariable.Variable + " : " + newVariable.Value;

                            db.SaveChanges();
                            Logger.Info("Accessed DB, Contract Variables Saved");
                        }

                        catch { }
                    }


                    var tableVariableData = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Variable, x.Value }); //select tblVariableData;
                    string[] Duration = new string[4];

                    foreach (var r in tableVariableData)
                    {
                        Duration[0] = r.Variable;
                        Duration[1] = r.Value;
                        if (Duration[0] == "Duration from")
                        {
                            Duration[2] = Duration[1];
                        }
                        if (Duration[0] == "Duration to")
                        {
                            Duration[3] = Duration[1];
                        }
                    }



                    Logger.Info("Accessing DB for Saving the Contract Draft Details");
                    //tblContractMaster contract = db.tblContractMasters.Find(ID);
                    string OldValues = "";
                    string NewValues = "";

                    if (contract.ContractDraft != content)
                    {
                        OldValues = OldValues + "From Old content" + " , ";
                        NewValues = NewValues + "New content : " + " , ";
                    }

                    if (string.IsNullOrWhiteSpace(contract.ContractDraft))
                    {
                        contract.Template = content;
                    }
                    contract.ContractDraft = content;


                    contract.InEffectFrom = Duration[2];
                    contract.InEffectTo = Duration[3];

                    db.Entry(contract).State = EntityState.Modified;

                    if (OldValues.Length > 1)
                    {
                        tblContractLog logs = new tblContractLog();
                        logs.LogContractUID = contract.ContractID;
                        logs.ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName;
                        logs.LogActivity = "Contract Content Modified";
                        logs.ChangedFrom = OldValues;
                        logs.ChangedTo = NewValues;
                        logs.DateandTime = DateTime.Now.ToString();
                        db.tblContractLogs.Add(logs);
                    }

                    db.SaveChanges();
                    Logger.Info("Accessed DB, Contract Draft Saved");
                    Logger.Info("Accessing DB for Saving the contract Log Details");
                    tblContractLog log = new tblContractLog();
                    log.LogContractUID = contract.ContractID;
                    log.ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName;
                    log.LogActivity = "Contract Saved";
                    log.ChangedFrom = "-";
                    log.ChangedTo = "-";
                    log.DateandTime = DateTime.Now.ToString();
                    db.tblContractLogs.Add(log);
                    db.SaveChanges();
                    Logger.Info("Accessed DB, contract Log Record Saved");

                    return Json("success");
                //}
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'SaveTemplate' Action HTTP POST Main exception");
                return Json("error");
            }
        }

       

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SaveModificationContract(string content, int ID, string[] arrVariableNames, string[] arrVariableValues,int CurrentUser)

        {
            int CurrentUserID = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUserID = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            string LogChangeFrom = "";
            string LogChangeTo = "";
            Logger.Info("Attempt ModifiedContract SaveModificationContract");
            try
            {
                Logger.Info("Attempt Contract Variables");
                try
                {
                    Logger.Info("Accessing DB for Contract Variable Details");
                    var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;


                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                    if (Variable.ToList().Count > 0)
                    {

                        foreach (var item in Variable)
                        {
                            var Id = item.ID;

                            tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                            db.tblVariableDatas.Remove(eachvariable);
                            //db.SaveChanges();


                        }
                        db.SaveChanges();
                    }
                }
                catch (Exception Ex)
                {
                    Logger.Error(Ex, "'Contract' Controller , 'SaveModificationContract' Action HTTP POST Main exception");
                    return Json("error");
                }

                for (int i = 0; i < arrVariableNames.Length; i++)
                {
                    Logger.Info("Attempt Contract Variables");
                    try
                    {
                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                        Logger.Info("Accessing DB for Saving the Contract Variables");
                        tblVariableData newVariable = new tblVariableData
                        {
                            Type = "Contract",
                            TypeID = ID,
                            Variable = arrVariableNames[i],
                            Value = arrVariableValues[i],
                            Version = "Contract",
                        };

                        db.tblVariableDatas.Add(newVariable);

                        newVariable.Value = arrVariableValues[i];

                        LogChangeFrom = LogChangeFrom + newVariable.Variable + " : " + newVariable.Value;
                        LogChangeTo = LogChangeTo + newVariable.Variable + " : " + newVariable.Value;

                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Variables Saved");
                    }

                    catch { }
                }

                tblContractLog log1 = new tblContractLog
                {
                    LogContractUID = ID,
                    ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                    LogActivity = "Modified",
                    ChangedFrom = LogChangeFrom,
                    ChangedTo = LogChangeTo,
                    DateandTime = DateTime.Now.ToString()
                };

                db.tblContractLogs.Add(log1);

                var tableVariableData = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable }); //select tblVariableData;
                string[] Duration = new string[4];

                foreach (var r in tableVariableData)
                {
                    Duration[0] = r.Variable;
                    Duration[1] = r.Value;
                    if (Duration[0] == "Duration from")
                    {
                        Duration[2] = Duration[1];
                    }
                    if (Duration[0] == "Duration to")
                    {
                        Duration[3] = Duration[1];
                    }
                }

                Logger.Info("Accessing DB for Saving the Modified Contract Draft Details");
                tblContractModification modifiedcontract = db.tblContractModifications.Find(ID);

                string OldValues = "";
                string NewValues = "";
                if (modifiedcontract.ContractDraft != content)
                {
                    OldValues = OldValues + "From Old content : " + " , ";
                    NewValues = NewValues + "New content : " + " , ";
                }
                //if (string.IsNullOrWhiteSpace(modifiedcontract.ContractDraft))
                //{
                //    modifiedcontract.Template = content;
                //}

                modifiedcontract.ContractDraft = content;
                modifiedcontract.InEffectFrom = Duration[2];
                modifiedcontract.InEffectTo = Duration[3];
                //modifiedcontract.Initiator = CurrentUser;
                db.Entry(modifiedcontract).State = EntityState.Modified;

                if (OldValues.Length > 0)
                {
                    tblContractLog logs = new tblContractLog();
                    logs.LogContractUID = modifiedcontract.ContractID;
                    logs.ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName;
                    logs.LogActivity = "Contract Content Modified";
                    logs.ChangedFrom = OldValues;
                    logs.ChangedTo = NewValues;
                    logs.DateandTime = DateTime.Now.ToString();
                    db.tblContractLogs.Add(logs);
                }
                db.SaveChanges();
                Logger.Info("Accessed DB, Modified Contract Draft Saved");

                Logger.Info("Accessing DB for Saving the Contract Draft Details");
                try
                {
                    tblContractMaster contract = db.tblContractMasters.Find(modifiedcontract.OriginalContractID);
                    contract.InEffectFrom = Duration[2];
                    contract.InEffectTo = Duration[3];
                    db.Entry(contract).State = EntityState.Modified;
                }
                catch {
                    try
                    {
                        tblContractModification contract = db.tblContractModifications.Find(modifiedcontract.OriginalContractID);
                        contract.InEffectFrom = Duration[2];
                        contract.InEffectTo = Duration[3];
                        db.Entry(contract).State = EntityState.Modified;
                    }
                    catch { }
                }
                
                db.SaveChanges();
                Logger.Info("Accessed DB, Contract Draft Saved");

                tblContractLog log = new tblContractLog();
                log.LogContractUID = modifiedcontract.ContractID;
                log.ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName;
                log.LogActivity = "Saved Modified contract";
                log.ChangedFrom = "-";
                log.ChangedTo = "-";
                log.DateandTime = DateTime.Now.ToString();
                db.tblContractLogs.Add(log);
                db.SaveChanges();
                Logger.Info("Accessed DB, contract Log Record Saved");
                return Json("success");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'SaveModificationContract' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        

        [HttpPost]
        public JsonResult GetUserById(string EmployeeID)
        {
            Logger.Info("Attempt Contract GetUserById");

            try
            {
                string[] UserInfo = { "", "User Not Found", "User Not Found", "User Not Found", "User Not Found", "", "", "" };

                if (!string.IsNullOrWhiteSpace(EmployeeID))
                {
                    EmployeeID = EmployeeID.Trim();
                    int EMPID = Convert.ToInt32(EmployeeID);
                    
                    Logger.Info("Accessed DB, Checking UserMaster Details: EmployeeID match");
                    var result = from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == EMPID) select tblUserMaster;
                   
                    foreach (var r in result)
                    {
                        string UserRole = "";
                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleAdmin == true)
                        {
                            Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                            UserRole = UserRole + "Admin";
                        }
                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleInitiator == true)
                        {

                            if (UserRole.Length > 0)
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                                UserRole = UserRole + ", Initiator";
                            }
                            else
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Not Active");
                                UserRole = UserRole + "Initiator";
                            }
                        }
                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleApprover == true)
                        {
                            if (UserRole.Length > 0)
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                                UserRole = UserRole + ", Approver";
                            }
                            else
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Not Active");
                                UserRole = UserRole + "Approver";
                            }
                        }
                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleFinance == true)
                        {
                            if (UserRole.Length > 0)
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                                UserRole = UserRole + ", Finance Approver";
                            }
                            else
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Not Active");
                                UserRole = UserRole + "Finance Approver";
                            }
                        }

                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleLegal == true)
                        {
                            if (UserRole.Length > 0)
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                                UserRole = UserRole + ", Legal Approver";
                            }
                            else
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Not Active");
                                UserRole = UserRole + "Legal Approver";
                            }
                        }
                        UserInfo[0] = "success";
                        UserInfo[1] = r.UserEmployeeName;
                        UserInfo[2] = r.UserEmployeeEmail;
                        UserInfo[3] = r.UserEmployeeDesignation;
                        UserInfo[4] = UserRole;
                        UserInfo[5] = r.UserSubCategory;
                        UserInfo[6] = r.UserCategory;
                        Logger.Info("Accessed DB, Checking UserMaster Details: User Details Found");
                        return Json(UserInfo);
                    }
                    return Json(UserInfo);
                }
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetUserById' Action HTTP POST Main exception");
                string[] errors = { "error" };
                return Json(errors);
            }
            Logger.Info("Accessed DB, Checking UserMaster Details: User Details Not Found");
            string[] failures = { "failure" };
            return Json(failures);
        }

        [HttpPost]
        public JsonResult GetUserByName(string EmployeeName)
        {
            Logger.Info("Attempt Contract GetUserByName");

            try
            {

                if (!string.IsNullOrWhiteSpace(EmployeeName))
                {
                    EmployeeName = EmployeeName.Trim();
                    //int EMPID = Convert.ToInt32(EmployeeID);
                    Logger.Info("Accessed DB, Checking UserMaster Details: EmployeeName match");
                    var result = from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeName == EmployeeName) select tblUserMaster;
                    string[] UserInfo = new string[7];

                    foreach (var r in result)
                    {
                        string UserRole = "";
                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleAdmin == true)
                        {
                            Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                            UserRole = UserRole + "Admin";
                        }
                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleInitiator == true)
                        {

                            if (UserRole.Length > 0)
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                                UserRole = UserRole + ", Initiator";
                            }
                            else
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Not Active");
                                UserRole = UserRole + "Initiator";
                            }
                        }
                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleApprover == true)
                        {
                            if (UserRole.Length > 0)
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                                UserRole = UserRole + ", Approver";
                            }
                            else
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Not Active");
                                UserRole = UserRole + "Approver";
                            }
                        }
                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleFinance == true)
                        {
                            if (UserRole.Length > 0)
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                                UserRole = UserRole + ", Finance Approver";
                            }
                            else
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Not Active");
                                UserRole = UserRole + "Finance Approver";
                            }
                        }

                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleLegal == true)
                        {
                            if (UserRole.Length > 0)
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                                UserRole = UserRole + ", Legal Approver";
                            }
                            else
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Not Active");
                                UserRole = UserRole + "Legal Approver";
                            }
                        }
                        UserInfo[0] = "success";
                        UserInfo[1] = r.UserEmployeeID.ToString();
                        UserInfo[2] = r.UserEmployeeEmail;
                        UserInfo[3] = r.UserEmployeeDesignation;
                        UserInfo[4] = UserRole;
                        UserInfo[5] = r.UserSubCategory;
                        UserInfo[6] = r.UserCategory;
                        Logger.Info("Accessed DB, Checking UserMaster Details: User Details Found");
                        return Json(UserInfo);
                    }
                }
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetUserByName' Action HTTP POST Main exception");
                string[] errors = { "error" };
                return Json(errors);
            }
            Logger.Info("Accessed DB, Checking UserMaster Details: User Details Not Found");
            string[] failures = { "failure" };
            return Json(failures);
        }

        [HttpPost]
        public JsonResult GetUserByEmail(string EmployeeEmail)
        {
            Logger.Info("Attempt Contract GetUserByEmail");

            try
            {

                if (!string.IsNullOrWhiteSpace(EmployeeEmail))
                {
                    EmployeeEmail = EmployeeEmail.Trim();
                    //int EMPID = Convert.ToInt32(EmployeeID);
                    Logger.Info("Accessed DB, Checking UserMaster Details: EmployeeEmail match");
                    var result = from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeEmail == EmployeeEmail) select tblUserMaster;
                    string[] UserInfo = new string[7];

                    foreach (var r in result)
                    {
                        string UserRole = "";
                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleAdmin == true)
                        {
                            Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                            UserRole = UserRole + "Admin";
                        }
                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleInitiator == true)
                        {

                            if (UserRole.Length > 0)
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                                UserRole = UserRole + ", Initiator";
                            }
                            else
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Not Active");
                                UserRole = UserRole + "Initiator";
                            }
                        }
                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleApprover == true)
                        {
                            if (UserRole.Length > 0)
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                                UserRole = UserRole + ", Approver";
                            }
                            else
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Not Active");
                                UserRole = UserRole + "Approver";
                            }
                        }
                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleFinance == true)
                        {
                            if (UserRole.Length > 0)
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                                UserRole = UserRole + ", Finance Approver";
                            }
                            else
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Not Active");
                                UserRole = UserRole + "Finance Approver";
                            }
                        }

                        Logger.Info("Accessed DB, Checking User Details: Checking Status");
                        if (r.UserRoleLegal == true)
                        {
                            if (UserRole.Length > 0)
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Active");
                                UserRole = UserRole + ", Legal Approver";
                            }
                            else
                            {
                                Logger.Info("Accessed DB, Checking User Details: UserRole is Not Active");
                                UserRole = UserRole + "Legal Approver";
                            }
                        }
                        UserInfo[0] = "success";
                        UserInfo[1] = r.UserEmployeeID.ToString();
                        UserInfo[2] = r.UserEmployeeName;
                        UserInfo[3] = r.UserEmployeeDesignation;
                        UserInfo[4] = UserRole;
                        UserInfo[5] = r.UserSubCategory;
                        UserInfo[6] = r.UserCategory;
                        Logger.Info("Accessed DB, Checking UserMaster Details: User Details Found");
                        return Json(UserInfo);
                    }
                }
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetUserByEmail' Action HTTP POST Main exception");
                string[] errors = { "error" };
                return Json(errors);
            }
            Logger.Info("Accessed DB, Checking UserMaster Details: User Details Not Found");
            string[] failures = { "failure" };
            return Json(failures);
        }

        [HttpPost]

        public ActionResult GetApproversForTemplate(int id)
        {
            Logger.Info("Attempt Contract GetApproversForTemplate");

            try
            {
                string[] Users = new string[0];
                Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                var result = /*from tblContractMaster in*/ db.tblContractMasters.Where(x => x.ContractID == id).
                    Select(x => new
                    {
                        x.Approver10ID,
                        x.Approver1ID,
                        x.Approver2ID,
                        x.Approver3ID,
                        x.Approver4ID,
                        x.Approver5ID,
                        x.Approver6ID,
                        x.Approver7ID,
                        x.Approver8ID,
                        x.Approver9ID,
                        x.ContractDraft,
                        x.Initiator,
                        x.InitiatorDraft,
                        x.Status,
                        x.InitiatorStatus,
                        x.Approver10Draft,
                        x.Approver1Draft,
                        x.Approver2Draft,
                        x.Approver3Draft,
                        x.Approver4Draft,
                        x.Approver5Draft,
                        x.Approver6Draft,
                        x.Approver7Draft,
                        x.Approver8Draft,
                        x.Approver9Draft,
                        x.Template,
                        x.Approver9Status,
                        x.Approver8Status,
                        x.Approver7Status,
                        x.Approver6Status,
                        x.Approver5Status,
                        x.Approver4Status,
                        x.Approver3Status,
                        x.Approver2Status,
                        x.Approver1Status,
                        x.Approver10Status,
                        x.TemplateType
                    }); //select tblContractMaster;

                foreach (var item in result)
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Draft");
                    if (string.IsNullOrWhiteSpace(item.ContractDraft) == false)
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Current Version";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Draft Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Draft");

                    if (item.TemplateType == "From Template")
                    {
                        if (string.IsNullOrWhiteSpace(item.ContractDraft) == false)
                        {

                            Array.Resize(ref Users, Users.Length + 1);
                            Users[Users.Length - 1] = "Template";
                            Logger.Info("Accessed DB, Checking Contract Details: Contract Draft Found");

                        }
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Initiator Status");
                    if (item.InitiatorStatus == "Initiated" && !string.IsNullOrWhiteSpace(item.InitiatorDraft))
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                       
                        Users[Users.Length - 1] = "Initiator";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Initiator Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver1 Status");
                    if (item.Approver1Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver1Draft))
                    {
                        var AproverID = item.Approver1ID;

                        var ApproverDetail = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new{ x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 1" + " : " + item.Approver1ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver1 Found");
                            }
                        }
                        
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver2 Status");
                    if (item.Approver2Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver2Draft))
                    {
                        var AproverID = item.Approver2ID;

                        var ApproverDetail = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new{ x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 2" + " : " + item.Approver2ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver2 Found");
                            }
                        }
                        
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver3 Status");
                    if (item.Approver3Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver3Draft))
                    {
                        var AproverID = item.Approver3ID;

                        var ApproverDetail = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new{ x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 3" + " : " + item.Approver3ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver3 Found");
                            }
                        }
                        
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver4 Status");
                    if (item.Approver4Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver4Draft))
                    {
                        var AproverID = item.Approver4ID;

                        var ApproverDetail = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 4" + " : " + item.Approver4ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver4 Found");
                            }
                        }
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver5 Status");
                    if (item.Approver5Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver5Draft))
                    {
                        var AproverID = item.Approver5ID;

                        var ApproverDetail = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {

                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 5" + " : " + item.Approver5ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver5 Found");
                            }
                        }
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver6 Status");
                    if (item.Approver6Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver6Draft))
                    {
                        var AproverID = item.Approver6ID;

                        var ApproverDetail = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 6" + " : " + item.Approver6ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver6 Found");
                            }
                        }
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver7 Status");
                    if (item.Approver7Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver7Draft))
                    {
                        var AproverID = item.Approver7ID;

                        var ApproverDetail = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 7" + " : " + item.Approver7ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver7 Found");
                            }
                        }
                        
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver8 Status");
                    if (item.Approver8Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver8Draft))
                    {
                        var AproverID = item.Approver8ID;

                        var ApproverDetail = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {

                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 8" + " : " + item.Approver8ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver8 Found");
                            }
                        }
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver9 Status");
                    if (item.Approver9Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver9Draft))
                    {
                        var AproverID = item.Approver9ID;

                        var ApproverDetail = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 9" + " : " + item.Approver9ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver9 Found");
                            }
                        }
                        
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver10 Status");
                    if (item.Approver10Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver10Draft))
                    {
                        var AproverID = item.Approver10ID;

                        var ApproverDetail = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 10" + " : " + item.Approver10ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver10 Found");
                            }
                        }
                        
                    }

                }

                Logger.Info("Accessed DB, Checking Contract Details: Details Found");
                return Json(Users);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetApproversForTemplate' Action HTTP POST Main exception");
               
                return Json("errors");
            }
        }

        [HttpPost]

        public ActionResult GetModifiedContractApprovers(int id)
        {
            Logger.Info("Attempt Modified Contract GetModifiedContractApprovers");
            try
            {
                string[] Users = new string[0];
                Logger.Info("Accessed DB, Checking Modified Contract Details: ContractID match");
                var result = /*from tblContractModification in*/ db.tblContractModifications.Where(x => x.ContractID == id).Select(x => new
                {
                    x.ContractDraft,
                    x.InitiatorDraft,
                    x.Template,
                    x.Approver1ID,
                    x.Approver2ID,
                    x.Approver3ID,
                    x.Approver4ID,
                    x.Approver5ID,
                    x.Approver6ID,
                    x.Approver7ID,
                    x.Approver8ID,
                    x.Approver9ID,
                    x.Approver10ID,
                    x.Approver10Draft,
                    x.Approver1Draft,
                    x.Approver2Draft,
                    x.Approver3Draft,
                    x.Approver4Draft,
                    x.Approver5Draft,
                    x.Approver6Draft,
                    x.Approver7Draft,
                    x.Approver8Draft,
                    x.Approver9Draft,
                    x.Approver10Status,
                    x.Approver1Status,
                    x.Approver2Status,
                    x.Approver3Status,
                    x.Approver4Status,
                    x.Approver5Status,
                    x.Approver6Status,
                    x.Approver7Status,
                    x.Approver8Status,
                    x.Approver9Status,
                    x.InitiatorStatus,
                    x.TemplateType
                }); //select tblContractModification; 
                foreach (var item in result)
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Draft");
                    if (string.IsNullOrWhiteSpace(item.ContractDraft) == false)
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Current Version";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Draft Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Initiator Status");
                    if (item.InitiatorStatus == "Initiated" && !string.IsNullOrWhiteSpace(item.InitiatorDraft))
                    {
                        Array.Resize(ref Users, Users.Length + 1);

                        Users[Users.Length - 1] = "Initiator";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Initiator Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver1 Status");
                    if (item.Approver1Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver1Draft))
                    {
                        var AproverID = item.Approver1ID;

                        var ApproverDetail = /*from tblUserMaster in */db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 1" + " : " + item.Approver1ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver1 Found");
                            }
                        }

                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver2 Status");
                    if (item.Approver2Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver2Draft))
                    {
                        var AproverID = item.Approver2ID;

                        var ApproverDetail = /*from tblUserMaster in */db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 2" + " : " + item.Approver2ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver2 Found");
                            }
                        }

                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver3 Status");
                    if (item.Approver3Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver3Draft))
                    {
                        var AproverID = item.Approver3ID;

                        var ApproverDetail = /*from tblUserMaster in */db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 3" + " : " + item.Approver3ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver3 Found");
                            }
                        }

                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver4 Status");
                    if (item.Approver4Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver4Draft))
                    {
                        var AproverID = item.Approver4ID;

                        var ApproverDetail = /*from tblUserMaster in */db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 4" + " : " + item.Approver4ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver4 Found");
                            }
                        }
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver5 Status");
                    if (item.Approver5Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver5Draft))
                    {
                        var AproverID = item.Approver5ID;

                        var ApproverDetail = /*from tblUserMaster in */db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {

                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 5" + " : " + item.Approver5ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver5 Found");
                            }
                        }
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver6 Status");
                    if (item.Approver6Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver6Draft))
                    {
                        var AproverID = item.Approver6ID;

                        var ApproverDetail = /*from tblUserMaster in */db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 6" + " : " + item.Approver6ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver6 Found");
                            }
                        }
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver7 Status");
                    if (item.Approver7Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver7Draft))
                    {
                        var AproverID = item.Approver7ID;

                        var ApproverDetail = /*from tblUserMaster in */db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 7" + " : " + item.Approver7ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver7 Found");
                            }
                        }

                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver8 Status");
                    if (item.Approver8Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver8Draft))
                    {
                        var AproverID = item.Approver8ID;

                        var ApproverDetail = /*from tblUserMaster in */db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {

                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 8" + " : " + item.Approver8ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver8 Found");
                            }
                        }
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver9 Status");
                    if (item.Approver9Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver9Draft))
                    {
                        var AproverID = item.Approver9ID;

                        var ApproverDetail = /*from tblUserMaster in */db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 9" + " : " + item.Approver9ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver9 Found");
                            }
                        }

                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver10 Status");
                    if (item.Approver10Status == "Approved" && !string.IsNullOrWhiteSpace(item.Approver10Draft))
                    {
                        var AproverID = item.Approver10ID;

                        var ApproverDetail = /*from tblUserMaster in */db.tblUserMasters.Where(x => x.UserEmployeeID == AproverID).Select(x => new { x.UserRoleLegal }); //select tblUserMaster;
                        foreach (var r in ApproverDetail)
                        {
                            if (r.UserRoleLegal == true)
                            {
                                Array.Resize(ref Users, Users.Length + 1);
                                Users[Users.Length - 1] = "Approver 10" + " : " + item.Approver10ID;
                                Logger.Info("Accessed DB, Checking Contract Details: Contract Approver10 Found");
                            }
                        }

                    }

                }
                Logger.Info("Accessed DB, Checking Modified Contract Details: Details Found");
                return Json(Users);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetModifiedContractApprovers' Action HTTP POST Main exception");

                return Json("errors");
            }
        }

        [HttpPost]

        public ActionResult GetVersionCompare(string selectvalue, int TemplateID)
        {
            Logger.Info("Attempt Contract GetVersionCompare");
            try
            {
                Logger.Info("Accessing DB for Contract Details");


                if (selectvalue.Contains("Approver 10"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver10Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver10 Draft Found");
                    return Json(result);
                }
                if (selectvalue.Contains("Current Version"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.ContractDraft;
                    Logger.Info("Accessed DB, Checking Contract Details: Contract Draft Found");
                    return Json(result);

                }
                if (selectvalue.Contains("Template"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Template;
                    Logger.Info("Accessed DB, Checking Contract Details: Contract Draft Found");
                    return Json(result);
                   
                }
                if (selectvalue.Contains("Current Version"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.ContractDraft;
                    Logger.Info("Accessed DB, Checking Contract Details: Contract Draft Found");
                    return Json(result);

                }
                if (selectvalue.Contains("Initiator"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.InitiatorDraft;
                    Logger.Info("Accessed DB, Checking Contract Details: Initiator Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 1"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver1Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver1 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 2"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver2Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver2 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 3"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver3Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver3 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 4"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver4Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver4 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 5"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver5Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver5 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 6"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver6Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver6 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 7"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver7Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver7 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 8"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver8Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver8 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 9"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver9Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver9 Draft Found");
                    return Json(result);
                }
                Logger.Info("Accessing DB for Contract Details: Details Found");
                return Json("");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");

                return Json("errors");
            }

        }

        [HttpPost]

        public ActionResult GetModifiedVersionCompare(string selectvalue, int TemplateID)
        {
            Logger.Info("Attempt Contract GetVersionCompare");
            try
            {
                Logger.Info("Accessing DB for Contract Details");


                if (selectvalue.Contains("Approver 10"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver10Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver10 Draft Found");
                    return Json(result);
                }
                if (selectvalue.Contains("Current Version"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.ContractDraft;
                    Logger.Info("Accessed DB, Checking Contract Details: Contract Draft Found");
                    return Json(result);

                }
                if (selectvalue.Contains("Initiator"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.InitiatorDraft;
                    Logger.Info("Accessed DB, Checking Contract Details: Initiator Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 1"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver1Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver1 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 2"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver2Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver2 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 3"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver3Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver3 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 4"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver4Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver4 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 5"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver5Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver5 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 6"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver6Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver6 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 7"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver7Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver7 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 8"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver8Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver8 Draft Found");
                    return Json(result);
                }

                if (selectvalue.Contains("Approver 9"))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver9Draft;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver9 Draft Found");
                    return Json(result);
                }
                Logger.Info("Accessing DB for Contract Details: Details Found");
                return Json("");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");

                return Json("errors");
            }
        }


        [HttpPost]

        public ActionResult GetVersionCompareForRestore(string selectvalue, int TemplateID)
        {
            Logger.Info("Attempt Contract GetVersionCompare");
            try
            {
                Logger.Info("Accessing DB for Contract Details");


                if (selectvalue.Contains("Approver 10"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 10") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";

                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver10Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver10 Draft Found");

                    tblContractMaster contract = db.tblContractMasters.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }
                else if (selectvalue.Contains("Current Version"))
                {
                    try
                    {
                        //Logger.Info("Accessing DB for Contract Variable Details");
                        //var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        //if (Variable.ToList().Count > 0)
                        //{
                        //    foreach (var item in Variable)
                        //    {
                        //        var Id = item.ID;

                        //        tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                        //        db.tblVariableDatas.Remove(eachvariable);
                        //        //db.SaveChanges
                        //    }
                        //    db.SaveChanges();
                        //}


                        //var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract") select tblVariableData;

                        //Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        //if (VariableforRestore.ToList().Count > 0)
                        //{

                        //    foreach (var item in VariableforRestore)
                        //    {
                        //        tblVariableData variable1 = new tblVariableData()
                        //        {
                        //            Type = "Contract",
                        //            TypeID = TemplateID,
                        //            Variable = item.Variable,
                        //            Value = item.Value,
                        //            Version = "Contract",
                        //        };
                        //        db.tblVariableDatas.Add(variable1);
                        //    }
                        //    db.SaveChanges();
                        //}
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Template).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Contract Draft Found");

                    tblContractMaster contract = db.tblContractMasters.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);

                }
                else if (selectvalue.Contains("Template"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Template") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Template).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Contract Draft Found");

                    tblContractMaster contract = db.tblContractMasters.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);

                }
                else if (selectvalue.Contains("Initiator"))
                {

                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Initiator") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");

                    result = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.InitiatorDraft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Initiator Draft Found");

                    tblContractMaster contract = db.tblContractMasters.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }
                else if (selectvalue.Contains("Approver 1"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 1") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver1Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver1 Draft Found");

                    tblContractMaster contract = db.tblContractMasters.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 2"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 2") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver2Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver2 Draft Found");

                    tblContractMaster contract = db.tblContractMasters.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 3"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 3") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver3Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver3 Draft Found");

                    tblContractMaster contract = db.tblContractMasters.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 4"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 4") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver4Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver4 Draft Found");

                    tblContractMaster contract = db.tblContractMasters.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 5"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 5") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver5Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver5 Draft Found");

                    tblContractMaster contract = db.tblContractMasters.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 6"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 6") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver6Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver6 Draft Found");

                    tblContractMaster contract = db.tblContractMasters.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 7"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 7") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver7Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver7 Draft Found");

                    tblContractMaster contract = db.tblContractMasters.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 8"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 8") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }
                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver8Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver8 Draft Found");

                    tblContractMaster contract = db.tblContractMasters.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 9"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 9") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }
                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == TemplateID) select tblContractMaster.Approver9Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver9 Draft Found");

                    tblContractMaster contract = db.tblContractMasters.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }
                Logger.Info("Accessing DB for Contract Details: Details Found");
                return Json("");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");

                return Json("errors");
            }

        }

        [HttpPost]

        public ActionResult GetModifiedVersionCompareForRestore(string selectvalue, int TemplateID)
        {
            Logger.Info("Attempt Contract GetModifiedVersionCompare");
            try
            {
                Logger.Info("Accessing DB for Contract Details");


                if (selectvalue.Contains("Approver 10"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 10") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetModifiedVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";

                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver10Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver10 Draft Found");

                    tblContractModification contract = db.tblContractModifications.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }
                else if (selectvalue.Contains("Current Version"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetModifiedVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";

                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.ContractDraft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Contract Draft Found");

                    tblContractModification contract = db.tblContractModifications.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);

                }
                else if (selectvalue.Contains("Initiator"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Initiator") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetModifiedVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.InitiatorDraft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Initiator Draft Found");

                    tblContractModification contract = db.tblContractModifications.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 1"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 1") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetModifiedVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver1Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver1 Draft Found");

                    tblContractModification contract = db.tblContractModifications.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 2"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 2") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetModifiedVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";

                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver2Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver2 Draft Found");

                    tblContractModification contract = db.tblContractModifications.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 3"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 3") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetModifiedVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";

                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver3Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver3 Draft Found");

                    tblContractModification contract = db.tblContractModifications.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 4"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 4") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetModifiedVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver4Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver4 Draft Found");

                    tblContractModification contract = db.tblContractModifications.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 5"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 5") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetModifiedVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";

                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver5Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver5 Draft Found");

                    tblContractModification contract = db.tblContractModifications.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 6"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 6") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetModifiedVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver6Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver6 Draft Found");

                    tblContractModification contract = db.tblContractModifications.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 7"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 7") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetModifiedVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver7Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver7 Draft Found");

                    tblContractModification contract = db.tblContractModifications.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 8"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 8") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetModifiedVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver8Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver8 Draft Found");

                    tblContractModification contract = db.tblContractModifications.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }

                else if (selectvalue.Contains("Approver 9"))
                {
                    try
                    {
                        Logger.Info("Accessing DB for Contract Variable Details");
                        var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;
                        if (Variable.ToList().Count > 0)
                        {
                            foreach (var item in Variable)
                            {
                                var Id = item.ID;

                                tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                                db.tblVariableDatas.Remove(eachvariable);
                                //db.SaveChanges
                            }
                            db.SaveChanges();
                        }


                        var VariableforRestore = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateID).Where(x => x.Type == "Contract").Where(x => x.Version == "Approver 9") select tblVariableData;

                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                        if (VariableforRestore.ToList().Count > 0)
                        {

                            foreach (var item in VariableforRestore)
                            {
                                tblVariableData variable1 = new tblVariableData()
                                {
                                    Type = "Contract",
                                    TypeID = TemplateID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };
                                db.tblVariableDatas.Add(variable1);
                            }
                            db.SaveChanges();
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'GetModifiedVersionCompare' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    string result = "";
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    result = (from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == TemplateID) select tblContractModification.Approver9Draft).First();
                    Logger.Info("Accessed DB, Checking Contract Details: Approver9 Draft Found");

                    tblContractModification contract = db.tblContractModifications.Find(TemplateID);
                    contract.ContractDraft = result;
                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();

                    return Json(result);
                }
                Logger.Info("Accessing DB for Contract Details: Details Found");
                return Json("");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetVersionCompare' Action HTTP POST Main exception");

                return Json("errors");
            }
        }


        [HttpPost]

        public ActionResult   GetTemplateForPreview(int ID)
        {
            Logger.Info("Attempt Contract GetTemplateForPreview");
            try
            {

                Logger.Info("Accessed DB, Checking Template Details: TemplateID match");
                var result = /*from tblTemplateMaster in*/ db.tblTemplateMasters.Where(x => x.TemplateID == ID).Select(x => new { x.TemplateID, x.Template, x.Name }); //select tblTemplateMaster;
                string[] Template = new string[3];

                foreach (var r in result)
                {

                    Template[0] = r.TemplateID.ToString();
                    Template[1] = r.Template;
                    Template[2] = r.Name;
                  
                    Logger.Info("Accessed DB, Checking Template Details: Template Details Found");
                    return Json(Template);
                }
                Logger.Info("Accessed DB, Checking Template Details: Template Found");
                return Json(result);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetTemplateForPreview' Action HTTP POST Main exception");
                return Json("error");
            }
        }
        [HttpPost]
        public ActionResult GetApproverComments(int ContractID)
        {
            Logger.Info("Attempt Contract GetApproverComments");
            try
            {
                Logger.Info("Accessing DB for Contract Details");
                if (!string.IsNullOrWhiteSpace(ContractID.ToString()))
                {
                    string[] Names = new string[12];
                    Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                    var result = /*from tblContractMaster in*/ db.tblContractMasters.Where(x => x.ContractID == ContractID).Select(x => new
                    {
                        x.Initiator,
                        x.Approver10ID,
                        x.Approver1ID,
                        x.Approver2ID,
                        x.Approver3ID,
                        x.Approver4ID,
                        x.Approver5ID,
                        x.Approver6ID,
                        x.Approver7ID,
                        x.Approver8ID,
                        x.Approver9ID
                    }); //select tblContractMaster;
                    foreach (var item in result)
                    {

                        var Initiator = item.Initiator;
                        var Approver1 = item.Approver1ID;
                        var Approver2 = item.Approver2ID;
                        var Approver3 = item.Approver3ID;
                        var Approver4 = item.Approver4ID;
                        var Approver5 = item.Approver5ID;
                        var Approver6 = item.Approver6ID;
                        var Approver7 = item.Approver7ID;
                        var Approver8 = item.Approver8ID;
                        var Approver9 = item.Approver9ID;
                        var Approver10 = item.Approver10ID;


                        string InitiatorName = "";
                        string Approver1Name = "";
                        string Approver2Name = "";
                        string Approver3Name = "";
                        string Approver4Name = "";
                        string Approver5Name = "";
                        string Approver6Name = "";
                        string Approver7Name = "";
                        string Approver8Name = "";
                        string Approver9Name = "";
                        string Approver10Name = "";
                        try
                        {
                            InitiatorName = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Initiator) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver1Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver1) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver2Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver2) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver3Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver3) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver4Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver4) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver5Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver5) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver6Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver6) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver7Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver7) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver8Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver8) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver9Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver9) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver10Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver10) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        Names[0] = "success";
                        Names[1] = InitiatorName;
                        Names[2] = Approver1Name;
                        Names[3] = Approver2Name;
                        Names[4] = Approver3Name;
                        Names[5] = Approver4Name;
                        Names[6] = Approver5Name;
                        Names[7] = Approver6Name;
                        Names[8] = Approver7Name;
                        Names[9] = Approver8Name;
                        Names[10] = Approver9Name;
                        Names[11] = Approver10Name;
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Contract Initiator and Approvers Comments Found");
                    return Json(Names);
                }
                Logger.Info("Accessed DB, Checking Contract Details: Contract Initiator and Approvers Comments Not Found");
                return Json("error");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetApproverComments' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public ActionResult GetModifiedApproverComments(int ContractID)
        {
            Logger.Info("Attempt Modified Contract GetApproverComments");
            try
            {
                Logger.Info("Accessing DB for Modified Contract Details");
                if (!string.IsNullOrWhiteSpace(ContractID.ToString()))
            {
                    string[] Names = new string[12];
                    Logger.Info("Accessed DB, Checking Modified Contract Details: ContractID match");
                    var result = /*from tblContractModification in*/ db.tblContractModifications.Where(x => x.ContractID == ContractID).Select(x => new
                    {
                        x.Initiator,
                        x.Approver10ID,
                        x.Approver1ID,
                        x.Approver2ID,
                        x.Approver3ID,
                        x.Approver4ID,
                        x.Approver5ID,
                        x.Approver6ID,
                        x.Approver7ID,
                        x.Approver8ID,
                        x.Approver9ID
                    });
                    foreach (var item in result)
                    {

                        var Initiator = item.Initiator;
                        var Approver1 = item.Approver1ID;
                        var Approver2 = item.Approver2ID;
                        var Approver3 = item.Approver3ID;
                        var Approver4 = item.Approver4ID;
                        var Approver5 = item.Approver5ID;
                        var Approver6 = item.Approver6ID;
                        var Approver7 = item.Approver7ID;
                        var Approver8 = item.Approver8ID;
                        var Approver9 = item.Approver9ID;
                        var Approver10 = item.Approver10ID;


                        string InitiatorName = "";
                        string Approver1Name = "";
                        string Approver2Name = "";
                        string Approver3Name = "";
                        string Approver4Name = "";
                        string Approver5Name = "";
                        string Approver6Name = "";
                        string Approver7Name = "";
                        string Approver8Name = "";
                        string Approver9Name = "";
                        string Approver10Name = "";
                        try
                        {
                            InitiatorName = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Initiator) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver1Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver1) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver2Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver2) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver3Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver3) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver4Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver4) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver5Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver5) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver6Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver6) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver7Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver7) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver8Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver8) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver9Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver9) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        try
                        {
                            Approver10Name = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == Approver10) select tblUserMaster.UserEmployeeName).First();
                        }
                        catch { }

                        Names[0] = "success";
                        Names[1] = InitiatorName;
                        Names[2] = Approver1Name;
                        Names[3] = Approver2Name;
                        Names[4] = Approver3Name;
                        Names[5] = Approver4Name;
                        Names[6] = Approver5Name;
                        Names[7] = Approver6Name;
                        Names[8] = Approver7Name;
                        Names[9] = Approver8Name;
                        Names[10] = Approver9Name;
                        Names[11] = Approver10Name;
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Contract Initiator and Approvers Comments Found");
                    return Json(Names);
                }
                Logger.Info("Accessed DB, Checking Modified Contract Details: Contract Initiator and Approvers Comments Not Found");
                return Json("error");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetModifiedApproverComments' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [Route("Contract/ExistingContractView/{id:int}")]
        public ActionResult ExistingContractView(int id)
        {
            
            int CurrentUser = 0;
            try
            {
                CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
            }
            catch { }
            Logger.Info("Accessing DB for Contract Details");
            tblContractMaster tblContractMaster = db.tblContractMasters.Find(id);


            if (tblContractMaster.Status == "Draft" && tblContractMaster.Initiator == CurrentUser)
            {

                Logger.Info("Accessing ExistingContractView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (((tblContractMaster.Status == "Pending Approval") || (tblContractMaster.Status == "Rejected")) && ((tblContractMaster.NextApprover == CurrentUser.ToString()) || (tblContractMaster.Initiator == CurrentUser) || string.IsNullOrWhiteSpace(tblContractMaster.Approver1Status) || string.IsNullOrWhiteSpace(tblContractMaster.Approver2Status) || string.IsNullOrWhiteSpace(tblContractMaster.Approver3Status) || string.IsNullOrWhiteSpace(tblContractMaster.Approver4Status) || string.IsNullOrWhiteSpace(tblContractMaster.Approver5Status) || string.IsNullOrWhiteSpace(tblContractMaster.Approver6Status) || string.IsNullOrWhiteSpace(tblContractMaster.Approver7Status) || string.IsNullOrWhiteSpace(tblContractMaster.Approver8Status) || string.IsNullOrWhiteSpace(tblContractMaster.Approver9Status) || string.IsNullOrWhiteSpace(tblContractMaster.Approver10Status)))
            {
                Logger.Info("Accessing ExistingContractView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            
            else if (((tblContractMaster.Status == "Approved") && ((tblContractMaster.Initiator == CurrentUser) || (tblContractMaster.Approver1ID == CurrentUser) || (tblContractMaster.Approver2ID == CurrentUser) || (tblContractMaster.Approver3ID == CurrentUser) || (tblContractMaster.Approver4ID == CurrentUser) || (tblContractMaster.Approver5ID == CurrentUser) || (tblContractMaster.Approver6ID == CurrentUser) || (tblContractMaster.Approver7ID == CurrentUser) || (tblContractMaster.Approver8ID == CurrentUser) || (tblContractMaster.Approver9ID == CurrentUser) || (tblContractMaster.Approver10ID == CurrentUser))))
            {

                Logger.Info("Accessing ExistingContractView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (((tblContractMaster.Status == "In Effect") && ((tblContractMaster.Initiator == CurrentUser) || (tblContractMaster.Approver1ID == CurrentUser) || (tblContractMaster.Approver2ID == CurrentUser) || (tblContractMaster.Approver3ID == CurrentUser) || (tblContractMaster.Approver4ID == CurrentUser) || (tblContractMaster.Approver5ID == CurrentUser) || (tblContractMaster.Approver6ID == CurrentUser) || (tblContractMaster.Approver7ID == CurrentUser) || (tblContractMaster.Approver8ID == CurrentUser) || (tblContractMaster.Approver9ID == CurrentUser) || (tblContractMaster.Approver10ID == CurrentUser))))
            {
                Logger.Info("Accessing ExistingContractView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (((tblContractMaster.Status == "Expired") && ((tblContractMaster.Initiator == CurrentUser) || (tblContractMaster.Approver1ID == CurrentUser) || (tblContractMaster.Approver2ID == CurrentUser) || (tblContractMaster.Approver3ID == CurrentUser) || (tblContractMaster.Approver4ID == CurrentUser) || (tblContractMaster.Approver5ID == CurrentUser) || (tblContractMaster.Approver6ID == CurrentUser) || (tblContractMaster.Approver7ID == CurrentUser) || (tblContractMaster.Approver8ID == CurrentUser) || (tblContractMaster.Approver9ID == CurrentUser) || (tblContractMaster.Approver10ID == CurrentUser))))
            {
                Logger.Info("Accessing ExistingContractView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (User.IsInRole("reviewer"))
            {
                Logger.Info("Accessing Contract DraftView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else if (User.IsInRole("finance2"))
            {
                Logger.Info("Accessing Contract DraftView Page");
                CommonModel model = new CommonModel
                {
                    Template = db.tblTemplateMasters,
                    Contract = db.tblContractMasters,
                    ContractModification = db.tblContractModifications,
                    Clause = db.tblClauseMasters,
                    Variables = db.tblVariables,
                    TemplateLogs = db.tblTemplateLogs,
                    ContractLogs = db.tblContractLogs,
                    VariableDatas = db.tblVariableDatas
                };
                return View(model);
            }
            else
            {
                Logger.Info("Unauthorizrd access for draft contract");
                return HttpNotFound();
            }

        }
        [HttpPost]
        public ActionResult GetContractNameOnID(int id)
        {
            Logger.Info("Attempt Contract GetContractNameOnID");
            try
            {
                Logger.Info("Accessing DB for Contract Details: ContractId match");
                var result = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == id) select tblContractMaster.ContractName;
                Logger.Info("Accessed DB, Checking Contract Details: Contract Name Found");
                return Json(result);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetContractNameOnID' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SaveVariableList(int ID, string[] arrVariableNames, string[] arrVariableValues)

        {
            int CurrentUserID = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUserID = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            string LogChangeFrom = "";
            string LogChangeTo = "";
            Logger.Info("Attempt Contract SaveVariableList");
            try
            {
                tblContractMaster eachContract = db.tblContractMasters.Find(ID);
                for (int i = 0; i < arrVariableNames.Length; i++)
                {

                    if (arrVariableNames[i] == "Duration from")
                    {
                        eachContract.InEffectFrom = arrVariableValues[i];
                    }
                    else if (arrVariableNames[i] == "Duration to")
                    {
                        eachContract.InEffectTo = arrVariableValues[i];
                    }

                    db.Entry(eachContract).State = EntityState.Modified;

                    Logger.Info("Attempt Contract Variables");
                    try
                    {
                        string TempVariable = arrVariableNames[i];
                        Logger.Info("Accessing DB for Variable Details");
                        var Variable = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == ID).Where(x => x.Variable == TempVariable).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract") select tblVariableData;
                        Logger.Info("Accessed DB, Checking Variable Details : Variable Found");
                        if (Variable.ToList().Count > 0)
                        {
                            //tblVariableData Variable = new tblVariableData();
                            // tblVariableData Variable = db.tblVariableDatas.Find(ID);
                            foreach (var item in Variable)
                            {
                                //item.Type = "Template";
                                //item.TypeID = ID;
                                //Variable.Variable = arrVariableNames[i];
                                //item.Variable = arrVariableNames[i];

                                Logger.Info("Accessing DB for Updating the Contract Variables");
                                tblVariableData variable1 = new tblVariableData();
                                variable1 = item;

                                if (variable1.Value != arrVariableValues[i])
                                {

                                    LogChangeFrom = LogChangeFrom + variable1.Variable + " : " + variable1.Value;

                                    variable1.Value = arrVariableValues[i];

                                    LogChangeTo = LogChangeTo + variable1.Variable + " : " + variable1.Value;

                                    if (ModelState.IsValid)
                                    {
                                        db.Entry(variable1).State = EntityState.Modified;
                                    }
                                }

                            }



                            //db.SaveChanges();

                        }

                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                            Logger.Info("Accessing DB for Saving the Contract Variables");
                            tblVariableData variable = new tblVariableData
                            {
                                Type = "Contract",
                                TypeID = ID,
                                Variable = arrVariableNames[i],
                                Value = arrVariableValues[i],
                                Version = "Contract",
                            };

                            variable.Value = arrVariableValues[i];

                            LogChangeTo = LogChangeTo + variable.Variable + " : " + variable.Value;

                            db.tblVariableDatas.Add(variable);
                        }
                        
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'SaveVariableList' Action HTTP POST Main exception");
                        return Json("error");
                    }

                }

                if (LogChangeFrom.Length > 0)
                {
                    tblContractLog log1 = new tblContractLog
                    {
                        LogContractUID = ID,
                        ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                        LogActivity = "Modified",
                        ChangedFrom = LogChangeFrom,
                        ChangedTo = LogChangeTo,
                        DateandTime = DateTime.Now.ToString()
                    };
                    db.tblContractLogs.Add(log1);
                }


               

                db.SaveChanges();
                Logger.Info("Accessed DB, Variable Details Saved");

                Logger.Info("Accessed DB, Variable Details Found");
                return Json("success");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'SaveVariableList' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        //****************** Changes done on 12/3/2020 at 10:54 am********************//
        [HttpPost]
        public ActionResult GetType_List()
        {
            Logger.Info("Attempt Contract GetType_List");
            try
            {
                Logger.Info("Accessed DB, Checking Contract Details");
                var ContractType = from tblContractMaster in db.tblContractMasters select tblContractMaster.ContractType;
                Logger.Info("Accessed DB, Checking Contract Details : Contract Type Found");
                var ContractTypeDistint = ContractType.Distinct();
                return Json(ContractTypeDistint);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetType_List' Action HTTP POST Main exception");
                return Json("error");
            }
        }
        //********************************************************************//

        [HttpPost]
        public ActionResult GetTableForTemplateReviewAppend(string FunctionName)
        {
            Logger.Info("Attempt Contract GetTableForTemplateReviewAppend");
            try
            {
                Logger.Info("Accessed DB, Checking Template Details : SubCategory match");
                var TableTemplate = from tblTemplateMaster in db.tblTemplateMasters.Where(x => x.SubCategory == FunctionName) select tblTemplateMaster;
                Logger.Info("Accessed DB, Checking Template Details : Details Found");
                return Json(TableTemplate);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetTableForTemplateReviewAppend' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public JsonResult SaveFilesToDB(HttpPostedFileBase UploadExistingFiles, int ID)
        {
            Logger.Info("Attempt Contract SaveFilesToDB");
            try
            {
                string FileExtens = Path.GetExtension(UploadExistingFiles.FileName);
                if (FileExtens.Contains("pdf") || FileExtens.Contains("doc") || FileExtens.Contains("docx") || FileExtens.Contains("txt") || FileExtens.Contains("xlx") || FileExtens.Contains("xlsx") || FileExtens.Contains("zip"))
                {
                  
                    Logger.Info("Accessing DB for Uploading the Contract Existing files");
                    tblContractMaster contract = db.tblContractMasters.Find(ID);

                    Logger.Info("Attempt Saving the Files");
                    try
                    {
                        using (BinaryReader br = new BinaryReader(UploadExistingFiles.InputStream))
                        {
                            contract.UploadExistingFile = br.ReadBytes(UploadExistingFiles.ContentLength);
                        }
                        contract.UploadExistingContractFileName = Path.GetFileName(UploadExistingFiles.FileName);
                        contract.UploadExistingContractFileType = UploadExistingFiles.ContentType;
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'SaveFilesToDB' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();
                    Logger.Info("Accessed DB, Files Uploaded to DB");
                    return Json("success");
                }
                else
                {
                    return Json("error");
                }
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'SaveFilesToDB' Action HTTP POST Main exception");
                return Json("error");
            }
        }


        [HttpPost]
        public JsonResult SaveSupportingFilesToDB(int Sequence,HttpPostedFileBase SupportingDocs1, int ID)
        {
            Logger.Info("Attempt Contract SaveSupportingFilesToDB");
            try
            {
                
                    string FileExtens = Path.GetExtension(SupportingDocs1.FileName);
                    if (FileExtens.Contains("pdf") || FileExtens.Contains("csv") || FileExtens.Contains("doc") || FileExtens.Contains("docx") || FileExtens.Contains("txt") || FileExtens.Contains("xlx") || FileExtens.Contains("xlsx") || FileExtens.Contains("zip"))
                    {
                        Logger.Info("Accessing DB for Uploading the Contract Supporting files");
                        tblContractMaster contract = db.tblContractMasters.Find(ID);

                        Logger.Info("Attempt Saving the Supporting Files");
                        try
                        {
                        if (Sequence == 1)
                        {

                            using (BinaryReader br = new BinaryReader(SupportingDocs1.InputStream))
                            {
                                contract.SupportingDoc1 = br.ReadBytes(SupportingDocs1.ContentLength);
                            }
                            contract.SupportingDoc1FileName = Path.GetFileName(SupportingDocs1.FileName);
                            contract.SupportingDoc1FileType = SupportingDocs1.ContentType;
                        }
                        if (Sequence == 2)
                        {

                            using (BinaryReader br = new BinaryReader(SupportingDocs1.InputStream))
                            {
                                contract.SupportingDoc2 = br.ReadBytes(SupportingDocs1.ContentLength);
                            }
                            contract.SupportingDoc2FileName = Path.GetFileName(SupportingDocs1.FileName);
                            contract.SupportingDoc2FileType = SupportingDocs1.ContentType;
                        }
                        if (Sequence == 3)
                        {

                            using (BinaryReader br = new BinaryReader(SupportingDocs1.InputStream))
                            {
                                contract.SupportingDoc3 = br.ReadBytes(SupportingDocs1.ContentLength);
                            }
                            contract.SupportingDoc3FileName = Path.GetFileName(SupportingDocs1.FileName);
                            contract.SupportingDoc3FileType = SupportingDocs1.ContentType;
                        }
                        if (Sequence == 4)
                        {

                            using (BinaryReader br = new BinaryReader(SupportingDocs1.InputStream))
                            {
                                contract.SupportingDoc4 = br.ReadBytes(SupportingDocs1.ContentLength);
                            }
                            contract.SupportingDoc4FileName = Path.GetFileName(SupportingDocs1.FileName);
                            contract.SupportingDoc4FileType = SupportingDocs1.ContentType;
                        }
                        if (Sequence == 5)
                        {

                            using (BinaryReader br = new BinaryReader(SupportingDocs1.InputStream))
                            {
                                contract.SupportingDoc5 = br.ReadBytes(SupportingDocs1.ContentLength);
                            }
                            contract.SupportingDoc5FileName = Path.GetFileName(SupportingDocs1.FileName);
                            contract.SupportingDoc5FileType = SupportingDocs1.ContentType;
                        }
                    }
                        catch (Exception Ex)
                        {
                            Logger.Error(Ex, "'Contract' Controller , 'SaveSupportingFilesToDB' Action HTTP POST Main exception");
                            return Json("error");
                        }


                        db.Entry(contract).State = EntityState.Modified;
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Supporting Files Uploaded to DB");
                            string[] FileName = new string[6];
                            FileName[0] = "success";
                            FileName[1] = contract.SupportingDoc1FileName;
                            FileName[2] = contract.SupportingDoc2FileName;
                            FileName[3] = contract.SupportingDoc3FileName;
                            FileName[4] = contract.SupportingDoc4FileName;
                            FileName[5] = contract.SupportingDoc5FileName;
                            return Json(FileName);
                }

                    else
                    {
                        return Json("success");
                    }
                
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'SaveSupportingFilesToDB' Action HTTP POST Main exception");
                return Json("error");
            }

        }


        [HttpPost]
        public JsonResult SupportingDeleteFromDB(int SupportingDocSequence, int ID)
        {
            Logger.Info("Attempt Contract SupportingDeleteFromDB");
            try
            {

                Logger.Info("Accessing DB for Deleting the Contract Supporting files");
                tblContractMaster contract = db.tblContractMasters.Find(ID);

                Logger.Info("Attempt Delete the Supporting Files");
                try
                {

                    byte[] dumy = new byte[0];
                    if (SupportingDocSequence == 1)
                    {

                        contract.SupportingDoc1 = dumy;

                        contract.SupportingDoc1FileName = "";
                        contract.SupportingDoc1FileType = "";

                    }
                    if (SupportingDocSequence == 2)
                    {

                        contract.SupportingDoc2 = dumy;

                        contract.SupportingDoc2FileName = "";
                        contract.SupportingDoc2FileType = "";

                    }
                    if (SupportingDocSequence == 3)
                    {

                        contract.SupportingDoc3 = dumy;

                        contract.SupportingDoc3FileName = "";
                        contract.SupportingDoc3FileType = "";

                    }
                    if (SupportingDocSequence == 4)
                    {

                        contract.SupportingDoc4 = dumy;

                        contract.SupportingDoc4FileName = "";
                        contract.SupportingDoc4FileType = "";

                    }
                    if (SupportingDocSequence == 5)
                    {

                        contract.SupportingDoc5 = dumy;

                        contract.SupportingDoc5FileName = "";
                        contract.SupportingDoc5FileType = "";

                    }

                }
                catch (Exception Ex)
                {
                    Logger.Error(Ex, "'Contract' Controller , 'SupportingDeleteFromDB' Action HTTP POST Main exception");
                    return Json("error");
                }


                db.Entry(contract).State = EntityState.Modified;
                db.SaveChanges();
                Logger.Info("Accessed DB, Supporting Files deleted from DB");
                return Json("success");

            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'SupportingDeleteFromDB' Action HTTP POST Main exception");
                return Json("error");
            }

        }




        [HttpPost]
        public JsonResult SaveModifiedSupportingFilesToDB(int Sequence, HttpPostedFileBase SupportingDocs1, int ID)
        {
            Logger.Info("Attempt Contract SaveModifiedSupportingFilesToDB");
            try
            {

                string FileExtens = Path.GetExtension(SupportingDocs1.FileName);
                if (FileExtens.Contains("pdf") || FileExtens.Contains("csv") || FileExtens.Contains("doc") || FileExtens.Contains("docx") || FileExtens.Contains("txt") || FileExtens.Contains("xlx") || FileExtens.Contains("xlsx") || FileExtens.Contains("zip"))
                {
                    Logger.Info("Accessing DB for Uploading the Contract Supporting files");
                    tblContractModification contract = db.tblContractModifications.Find(ID);

                    Logger.Info("Attempt Saving the Supporting Files");
                    try
                    {
                        if (Sequence == 1)
                        {

                            using (BinaryReader br = new BinaryReader(SupportingDocs1.InputStream))
                            {
                                contract.SupportingDoc1 = br.ReadBytes(SupportingDocs1.ContentLength);
                            }
                            contract.SupportingDoc1FileName = Path.GetFileName(SupportingDocs1.FileName);
                            contract.SupportingDoc1FileType = SupportingDocs1.ContentType;
                        }
                        if (Sequence == 2)
                        {

                            using (BinaryReader br = new BinaryReader(SupportingDocs1.InputStream))
                            {
                                contract.SupportingDoc2 = br.ReadBytes(SupportingDocs1.ContentLength);
                            }
                            contract.SupportingDoc2FileName = Path.GetFileName(SupportingDocs1.FileName);
                            contract.SupportingDoc2FileType = SupportingDocs1.ContentType;
                        }
                        if (Sequence == 3)
                        {

                            using (BinaryReader br = new BinaryReader(SupportingDocs1.InputStream))
                            {
                                contract.SupportingDoc3 = br.ReadBytes(SupportingDocs1.ContentLength);
                            }
                            contract.SupportingDoc3FileName = Path.GetFileName(SupportingDocs1.FileName);
                            contract.SupportingDoc3FileType = SupportingDocs1.ContentType;
                        }
                        if (Sequence == 4)
                        {

                            using (BinaryReader br = new BinaryReader(SupportingDocs1.InputStream))
                            {
                                contract.SupportingDoc4 = br.ReadBytes(SupportingDocs1.ContentLength);
                            }
                            contract.SupportingDoc4FileName = Path.GetFileName(SupportingDocs1.FileName);
                            contract.SupportingDoc4FileType = SupportingDocs1.ContentType;
                        }
                        if (Sequence == 5)
                        {

                            using (BinaryReader br = new BinaryReader(SupportingDocs1.InputStream))
                            {
                                contract.SupportingDoc5 = br.ReadBytes(SupportingDocs1.ContentLength);
                            }
                            contract.SupportingDoc5FileName = Path.GetFileName(SupportingDocs1.FileName);
                            contract.SupportingDoc5FileType = SupportingDocs1.ContentType;
                        }
                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'SaveModifiedSupportingFilesToDB' Action HTTP POST Main exception");
                        return Json("error");
                    }


                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();
                    Logger.Info("Accessed DB, Supporting Files Uploaded to DB");
                    string[] FileName = new string[6];
                    FileName[0] = "success";
                    FileName[1] = contract.SupportingDoc1FileName;
                    FileName[2] = contract.SupportingDoc2FileName;
                    FileName[3] = contract.SupportingDoc3FileName;
                    FileName[4] = contract.SupportingDoc4FileName;
                    FileName[5] = contract.SupportingDoc5FileName;
                    return Json(FileName);
                }

                else
                {
                    return Json("success");
                }

            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'SaveModifiedSupportingFilesToDB' Action HTTP POST Main exception");
                return Json("error");
            }

        }


        [HttpPost]
        public JsonResult ModifiedSupportingDeleteFromDB(int SupportingDocSequence, int ID)
        {
            Logger.Info("Attempt Contract ModifiedSupportingDeleteFromDB");
            try
            {

                Logger.Info("Accessing DB for Uploading the Contract Supporting files");
                tblContractModification contract = db.tblContractModifications.Find(ID);

                Logger.Info("Attempt Delete the Supporting Files");
                try
                {

                    byte[] dumy = new byte[0];
                    if (SupportingDocSequence == 1)
                    {

                        contract.SupportingDoc1 = dumy;

                        contract.SupportingDoc1FileName = "";
                        contract.SupportingDoc1FileType = "";

                    }
                    if (SupportingDocSequence == 2)
                    {

                        contract.SupportingDoc2 = dumy;

                        contract.SupportingDoc2FileName = "";
                        contract.SupportingDoc2FileType = "";

                    }
                    if (SupportingDocSequence == 3)
                    {

                        contract.SupportingDoc3 = dumy;

                        contract.SupportingDoc3FileName = "";
                        contract.SupportingDoc3FileType = "";

                    }
                    if (SupportingDocSequence == 4)
                    {

                        contract.SupportingDoc4 = dumy;

                        contract.SupportingDoc4FileName = "";
                        contract.SupportingDoc4FileType = "";

                    }
                    if (SupportingDocSequence == 5)
                    {

                        contract.SupportingDoc5 = dumy;

                        contract.SupportingDoc5FileName = "";
                        contract.SupportingDoc5FileType = "";

                    }

                }
                catch (Exception Ex)
                {
                    Logger.Error(Ex, "'Contract' Controller , 'ModifiedSupportingDeleteFromDB' Action HTTP POST Main exception");
                    return Json("error");
                }


                db.Entry(contract).State = EntityState.Modified;
                db.SaveChanges();
                Logger.Info("Accessed DB, Supporting Files Uploaded to DB");
                return Json("success");

            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'ModifiedSupportingDeleteFromDB' Action HTTP POST Main exception");
                return Json("error");
            }

        }

        [HttpPost]
        public ActionResult SaveApproversToDB(int[] UID, string ContractName, string ContractType, string ContractDescription, string ContractCluster, string ContractFunction, string ContractTemplateType, int CuurrentUserID, string ContractDepartment, string ContractSubDepartment)
        {
            int CurrentUserID = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUserID = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Contract SaveApproversToDB");
            try
            {
                Logger.Info("Accessing DB for Saving the Contract Records");
                tblContractMaster eachContract = new tblContractMaster();
                if (UID.Length > 0)
                {
                    eachContract.Approver1ID = UID[0];
                }
                else
                {
                    eachContract.Approver1ID = 0;
                }
                if (UID.Length > 1)
                {
                    eachContract.Approver2ID = UID[1];
                }
                else
                {
                    eachContract.Approver2ID = 0;
                }
                if (UID.Length > 2)
                {
                    eachContract.Approver3ID = UID[2];
                }
                else
                {
                    eachContract.Approver3ID = 0;
                }
                if (UID.Length > 3)
                {
                    eachContract.Approver4ID = UID[3];
                }
                else
                {
                    eachContract.Approver4ID = 0;
                }
                if (UID.Length > 4)
                {
                    eachContract.Approver5ID = UID[4];
                }
                else
                {
                    eachContract.Approver5ID = 0;
                }
                if (UID.Length > 5)
                {
                    eachContract.Approver6ID = UID[5];
                }
                else
                {
                    eachContract.Approver6ID = 0;
                }
                if (UID.Length > 6)
                {
                    eachContract.Approver7ID = UID[6];
                }
                else
                {
                    eachContract.Approver7ID = 0;
                }
                if (UID.Length > 7)
                {
                    eachContract.Approver8ID = UID[7];
                }
                else
                {
                    eachContract.Approver8ID = 0;
                }
                if (UID.Length > 8)
                {
                    eachContract.Approver9ID = UID[8];
                }
                else
                {
                    eachContract.Approver9ID = 0;
                }
                if (UID.Length > 9)
                {
                    eachContract.Approver10ID = UID[9];
                }
                else
                {
                    eachContract.Approver10ID = 0;
                }


                //string TemplateContent = "";
                //try
                //{
                //    Logger.Info("Accessed DB, Checking for Template Details : TemplateID match");
                //    TemplateContent = (from tblTemplateMaster in db.tblTemplateMasters.Where(x => x.TemplateID == ContractIDforTemplate) select tblTemplateMaster.Template).First();
                //    Logger.Info("Accessed DB, Checking for Template Details : Template Found");
                //}
                //catch
                //{

                //}
                var EmployeePlant = "";
                EmployeePlant = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == CurrentUserID) select tblUserMaster.UserPlant).First();


                eachContract.Modified = "Fresh";
                eachContract.Plant = EmployeePlant;

                eachContract.ContractName = HttpUtility.HtmlEncode(ContractName);
                eachContract.ContractType = HttpUtility.HtmlEncode(ContractType);
                eachContract.ContractCategory = HttpUtility.HtmlEncode(ContractCluster);
                eachContract.ContractSubCategory = HttpUtility.HtmlEncode(ContractFunction);
                eachContract.Description = HttpUtility.HtmlEncode(ContractDescription);
                eachContract.TemplateType = HttpUtility.HtmlEncode(ContractTemplateType);
                eachContract.Department = HttpUtility.HtmlEncode(ContractDepartment);
                eachContract.SubDepartment = HttpUtility.HtmlEncode(ContractSubDepartment);

                //if (ContractTemplateType == "Choose From Template")
                //{
                //    eachContract.ContractDraft = TemplateContent;
                //    eachContract.Template = TemplateContent;
                //}
                //string TemplateContent = "";
                var result = /*from tblTemplateMaster in*/ db.tblTemplateMasters.Where(x => (x.Category == eachContract.ContractCategory && x.SubCategory == "" && x.Status == "In Effect") || (x.Category == eachContract.ContractCategory && x.SubCategory == eachContract.ContractSubCategory && x.Status == "In Effect")).OrderBy(x => x.TemplateSequence).Select(x => new { x.Template }); //select tblTemplateMaster;
                string data = "";
                foreach (var r in result)
                {
                    if (string.IsNullOrEmpty(data))
                    {
                        data = r.Template;

                    }
                    else
                    {
                        data = data + "<div style=\"page-break-after: always\"><span style=\"display: none;\">&nbsp;</span></div>\n\n<p>&nbsp;</p>\n" + r.Template;

                    }
                    // data = r.TemplateSequence.ToString();
                }
                
                if(ContractTemplateType == "From Template")
                {
                    eachContract.ContractDraft = data;
                    eachContract.Template = data;
                }


                //Logger.Info("Accessing DB for Contract Variable Details");
                //var Variable = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == ID) select tblVariableData

                //Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                //Logger.Info("Accessing DB for Saving the Contract Variables");
                //tblVariableData variable = new tblVariableData
                //{
                //    Type = "Contract",
                //    TypeID = ID,
                //    Variable = arrVariableNames[i],
                //    Value = arrVariableValues[i]
                //};

                //variable.Value = arrVariableValues[i];

                //LogChangeTo = LogChangeTo + variable.Variable + " : " + variable.Value;

                //db.tblVariableDatas.Add(variable);



                eachContract.Initiator = CuurrentUserID;
                eachContract.ContractModificationType = "FreshContract";
                eachContract.Status = "Draft";
                db.tblContractMasters.Add(eachContract);

                db.SaveChanges();
                Logger.Info("Accessed DB, Contract Record Saved");

                if (ContractTemplateType == "From Template")
                {
                    try
                    {
                        //string templateID = "";
                        var templateID = /*from tblTemplateMaster in*/ db.tblTemplateMasters.Where(x => (x.Category == eachContract.ContractCategory && x.SubCategory == "" && x.Status == "In Effect") || (x.Category == eachContract.ContractCategory && x.SubCategory == eachContract.ContractSubCategory && x.Status == "In Effect")).OrderBy(x => x.TemplateSequence).Select(x => new { x.TemplateID }); //select tblTemplateMaster;
                        int TemplateIDs;

                        foreach (var eachTemplate in templateID)
                        {
                            TemplateIDs = eachTemplate.TemplateID;

                            var VariableList = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == TemplateIDs).Where(x => x.Type == "Template").Where(x => x.Version == "Template") select tblVariableData;

                            foreach (var item in VariableList)
                            {

                                tblVariableData variable = new tblVariableData
                                {
                                    Type = "Contract",
                                    TypeID = eachContract.ContractID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Template",
                                };

                                db.tblVariableDatas.Add(variable);

                                tblVariableData variableTemplate = new tblVariableData
                                {
                                    Type = "Contract",
                                    TypeID = eachContract.ContractID,
                                    Variable = item.Variable,
                                    Value = item.Value,
                                    Version = "Contract",
                                };

                                db.tblVariableDatas.Add(variableTemplate);
                                // db.SaveChanges();

                            }
                        }
                        // templateID.Append()
                        //var Variable = from tblVariableData in db.tblVariableDatas.Where(x => TemplateIDs.SelectMany((x.TypeID)) select tblVariableData;
                        // var result = orders.Join(testArray, o => o.OrderId, id => id, (o, id) => o);




                        //db.tblVariableDatas.Add(variable);
                        //db.SaveChanges();

                    }
                    catch (Exception ex)
                    {
                    }
                }

                Logger.Info("Accessing DB for Saving the Contract Log Details");
                tblContractLog log = new tblContractLog
                {
                    LogContractUID = eachContract.ContractID,
                    ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                    LogActivity = "Created",
                    ChangedFrom = "-",
                    ChangedTo = "-",
                    DateandTime = DateTime.Now.ToString()
                };
                db.tblContractLogs.Add(log);
              
                db.SaveChanges();
                Logger.Info("Accessed DB, ApprovalMaster Log Record Saved");

                //try
                //{
                //    Logger.Info("Accessed DB, Checking Variable Details: ID match");
                //    var GetVariableList = from tblVariableData in db.tblVariableDatas.Where(x => x.TypeID == ContractIDforTemplate) select tblVariableData;
                //    Logger.Info("Accessed DB, Checking Variable Details: Variable Found");
                //    foreach (var item in GetVariableList)
                //    {
                //        item.TypeID = eachContract.ContractID;
                //        item.Type = "Contract";
                //        db.tblVariableDatas.Add(item);
                //    }
                //    db.SaveChanges();
                //    Logger.Info("Accessed DB, ApprovalMaster Log Record Saved");
                //}
                //catch
                //{
                //    //throw ex;
                //}
                string[] response = new string[2];
                response[0] = "success";
                response[1] = "" + eachContract.ContractID;

                return Json(response);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'SaveApproversToDB' Action HTTP POST Main exception");
                return Json("error");
            }


        }

        [HttpPost]
        public ActionResult UpdateContractInDB(int ContractId, int[] UID, string ContractName, string ContractType, string ContractDescription, string ContractCluster, string ContractFunction, string ContractTemplateType,string ContractDepartment , string ContractSubDepartment, int CuurrentUserID = 0)
        {
            int CurrentUserID = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUserID = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Contract UpdateContractInDB");
            try
            {
                
                Logger.Info("Accessing DB for Updating the Contract Records");
                tblContractMaster eachContract = db.tblContractMasters.Find(ContractId);
                string OldValues = "";
                string NewValues = "";

                if (eachContract.ContractName != ContractName)
                {
                    OldValues = OldValues + "Contract Name : " + eachContract.ContractName + " , ";
                    NewValues = NewValues + "Contract Name : " + ContractName + " , ";
                }
                if (eachContract.ContractType != ContractType)
                {
                    OldValues = OldValues + "Contract Type : " + eachContract.ContractType + " , ";
                    NewValues = NewValues + "Contract Type : " + ContractType + " , ";
                }
                if (eachContract.ContractCategory != ContractCluster)
                {
                    OldValues = OldValues + "Category : " + eachContract.ContractCategory + " , ";
                    NewValues = NewValues + "Category : " + ContractCluster + " , ";
                }
                if (eachContract.ContractSubCategory != ContractFunction)
                {
                    OldValues = OldValues + "Sub Category : " + eachContract.ContractSubCategory + " , ";
                    NewValues = NewValues + "Sub Category : " + ContractFunction + " , ";
                }
                if (eachContract.Department != ContractDepartment)
                {
                    OldValues = OldValues + "Department : " + eachContract.Department + " , ";
                    NewValues = NewValues + "Department : " + ContractDepartment + " , ";
                }
                if (eachContract.SubDepartment != ContractSubDepartment)
                {
                    OldValues = OldValues + "Sub Department : " + eachContract.SubDepartment + " , ";
                    NewValues = NewValues + "Sub Department : " + ContractSubDepartment + " , ";
                }
                if (eachContract.Description != ContractDescription)
                {
                    OldValues = OldValues + "Description : " + eachContract.Description + " , ";
                    NewValues = NewValues + "Description : " + ContractDescription + " , ";
                }
                if (eachContract.TemplateType != ContractTemplateType)
                {
                    OldValues = OldValues + "Create Contract Using : " + eachContract.TemplateType + " , ";
                    NewValues = NewValues + "Create Contract Using : " + ContractTemplateType + " , ";
                }

                try
                {

                    if (eachContract.Approver1ID != UID[0])
                    {
                        OldValues = OldValues + "Approver1 ID : " + eachContract.Approver1ID + " , ";
                        NewValues = NewValues + "Approver1 ID : " + UID[0] + " , ";
                    }
                    if (eachContract.Approver2ID != UID[1])
                    {
                        OldValues = OldValues + "Approver2 ID : " + eachContract.Approver2ID + " , ";
                        NewValues = NewValues + "Approver2 ID : " + UID[1] + " , ";
                    }

                    if (eachContract.Approver3ID != UID[2])
                    {
                        OldValues = OldValues + "Approver3 ID : " + eachContract.Approver3ID + " , ";
                        NewValues = NewValues + "Approver3 ID : " + UID[2] + " , ";
                    }

                    if (eachContract.Approver4ID != UID[3])
                    {
                        OldValues = OldValues + "Approver4 ID : " + eachContract.Approver4ID + " , ";
                        NewValues = NewValues + "Approver4 ID : " + UID[3] + " , ";
                    }

                    if (eachContract.Approver5ID != UID[4])
                    {
                        OldValues = OldValues + "Approver5 ID : " + eachContract.Approver5ID + " , ";
                        NewValues = NewValues + "Approver5 ID : " + UID[4] + " , ";
                    }

                    if (eachContract.Approver6ID != UID[5])
                    {
                        OldValues = OldValues + "Approver6 ID : " + eachContract.Approver6ID + " , ";
                        NewValues = NewValues + "Approver6 ID : " + UID[5] + " , ";
                    }

                    if (eachContract.Approver7ID != UID[6])
                    {
                        OldValues = OldValues + "Approver7 ID : " + eachContract.Approver7ID + " , ";
                        NewValues = NewValues + "Approver7 ID : " + UID[6] + " , ";
                    }

                    if (eachContract.Approver8ID != UID[7])
                    {
                        OldValues = OldValues + "Approver8 ID : " + eachContract.Approver8ID + " , ";
                        NewValues = NewValues + "Approver8 ID : " + UID[7] + " , ";
                    }

                    if (eachContract.Approver9ID != UID[8])
                    {
                        OldValues = OldValues + "Approver9 ID : " + eachContract.Approver9ID + " , ";
                        NewValues = NewValues + "Approver9 ID : " + UID[8] + " , ";
                    }

                    if (eachContract.Approver10ID != UID[9])
                    {
                        OldValues = OldValues + "Approver10 ID : " + eachContract.Approver10ID + " , ";
                        NewValues = NewValues + "Approver10 ID : " + UID[9] + " , ";
                    }
                }
                catch { }


                if (UID.Length > 0)
                {
                    eachContract.Approver1ID = UID[0];
                }
                else
                {
                    if (eachContract.Approver1ID != 0)
                    {
                        OldValues = OldValues + "Approver1 ID : " + eachContract.Approver1ID + " , ";
                        NewValues = NewValues + "Approver1 ID : " + "0" + " , ";
                    }
                    eachContract.Approver1ID = 0;

                }
                if (UID.Length > 1)
                {
                    eachContract.Approver2ID = UID[1];
                }
                else
                {
                    if (eachContract.Approver2ID != 0)
                    {
                        OldValues = OldValues + "Approver2 ID : " + eachContract.Approver2ID + " , ";
                        NewValues = NewValues + "Approver2 ID : " + "0" + " , ";
                    }
                    eachContract.Approver2ID = 0;

                }
                if (UID.Length > 2)
                {
                    eachContract.Approver3ID = UID[2];
                }
                else
                {
                    if (eachContract.Approver3ID != 0)
                    {
                        OldValues = OldValues + "Approver3 ID : " + eachContract.Approver3ID + " , ";
                        NewValues = NewValues + "Approver3 ID : " + "0" + " , ";
                    }
                    eachContract.Approver3ID = 0;

                }
                if (UID.Length > 3)
                {
                    eachContract.Approver4ID = UID[3];
                }
                else
                {
                    if (eachContract.Approver4ID != 0)
                    {
                        OldValues = OldValues + "Approver4 ID : " + eachContract.Approver4ID + " , ";
                        NewValues = NewValues + "Approver4 ID : " + "0" + " , ";
                    }
                    eachContract.Approver4ID = 0;

                }
                if (UID.Length > 4)
                {
                    eachContract.Approver5ID = UID[4];
                }
                else
                {
                    if (eachContract.Approver5ID != 0)
                    {
                        OldValues = OldValues + "Approver5 ID : " + eachContract.Approver5ID + " , ";
                        NewValues = NewValues + "Approver5 ID : " + "0" + " , ";
                    }
                    eachContract.Approver5ID = 0;

                }
                if (UID.Length > 5)
                {
                    eachContract.Approver6ID = UID[5];
                }
                else
                {
                    if (eachContract.Approver6ID != 0)
                    {
                        OldValues = OldValues + "Approver6 ID : " + eachContract.Approver6ID + " , ";
                        NewValues = NewValues + "Approver6 ID : " + "0" + " , ";
                    }
                    eachContract.Approver6ID = 0;

                }
                if (UID.Length > 6)
                {
                    eachContract.Approver7ID = UID[6];
                }
                else
                {
                    if (eachContract.Approver7ID != 0)
                    {
                        OldValues = OldValues + "Approver7 ID : " + eachContract.Approver7ID + " , ";
                        NewValues = NewValues + "Approver7 ID : " + "0" + " , ";
                    }
                    eachContract.Approver7ID = 0;

                }
                if (UID.Length > 7)
                {
                    eachContract.Approver8ID = UID[7];
                }
                else
                {
                    if (eachContract.Approver8ID != 0)
                    {
                        OldValues = OldValues + "Approver8 ID : " + eachContract.Approver8ID + " , ";
                        NewValues = NewValues + "Approver8 ID : " + "0" + " , ";
                    }
                    eachContract.Approver8ID = 0;

                }
                if (UID.Length > 8)
                {
                    eachContract.Approver9ID = UID[8];
                }
                else
                {
                    if (eachContract.Approver9ID != 0)
                    {
                        OldValues = OldValues + "Approver9 ID : " + eachContract.Approver9ID + " , ";
                        NewValues = NewValues + "Approver9 ID : " + "0" + " , ";
                    }
                    eachContract.Approver9ID = 0;

                }
                if (UID.Length > 9)
                {
                    eachContract.Approver10ID = UID[9];
                }
                else
                {
                    if (eachContract.Approver10ID != 0)
                    {
                        OldValues = OldValues + "Approver10 ID : " + eachContract.Approver10ID + " , ";
                        NewValues = NewValues + "Approver10 ID : " + "0" + " , ";
                    }
                    eachContract.Approver10ID = 0;

                }

                //string TemplateContent = "";
                //try
                //{
                //    Logger.Info("Accessed DB, Checking for Template Details : TemplateID match");
                //    TemplateContent = (from tblTemplateMaster in db.tblTemplateMasters.Where(x => x.TemplateID == ContractIDforTemplate) select tblTemplateMaster.Template).First();
                //    Logger.Info("Accessed DB, Checking for Template Details : Template Found");
                //}
                //catch
                //{

                //}

                eachContract.ContractName = HttpUtility.HtmlEncode(ContractName);
                eachContract.ContractType = HttpUtility.HtmlEncode(ContractType);
                eachContract.ContractCategory = HttpUtility.HtmlEncode(ContractCluster);
                eachContract.ContractSubCategory = HttpUtility.HtmlEncode(ContractFunction);
                eachContract.Department = HttpUtility.HtmlEncode(ContractDepartment);
                eachContract.SubDepartment = HttpUtility.HtmlEncode(ContractSubDepartment);
                eachContract.Description = HttpUtility.HtmlEncode(ContractDescription);
                eachContract.TemplateType = HttpUtility.HtmlEncode(ContractTemplateType);
                //if(ContractTemplateType == "Choose From Template")
                //{
                //    eachContract.ContractDraft = TemplateContent;
                //}
                
                // eachContract.ContractModificationType = "FreshContract";
                // eachContract.Status = "Draft";
                db.Entry(eachContract).State = EntityState.Modified;

                if (OldValues.Length > 0)
                {
                    tblContractLog log = new tblContractLog();
                    log.LogContractUID = eachContract.ContractID;
                    log.ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName;
                    log.LogActivity = "Modified";
                    log.ChangedFrom = OldValues;
                    log.ChangedTo = NewValues;
                    log.DateandTime = DateTime.Now.ToString();

                    db.tblContractLogs.Add(log);
                }

                db.SaveChanges();
                Logger.Info("Accessed DB, Contract Record Updated");

                
                string[] response = new string[2];
                response[0] = "success";
                response[1] = "" + eachContract.ContractID;

                return Json(response);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'UpdateContractInDB' Action HTTP POST Main exception");
                return Json("error");
            }

        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult InitiateContract(string content, int ID, string[] arrVariableNames, string[] arrVariableValues, string Comments, int CurrentUserID = 0)
        {
            int CurrentUser = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Contract InitiateContract");
            try
            {
                Logger.Info("Accessing DB for Initiating the Contract");
                tblContractMaster contract = db.tblContractMasters.Find(ID);

       
                contract.Initiator = CurrentUserID;
                contract.InitiatorComments = Comments;

                contract.ContractDraft = content;
                contract.InitiatorDraft = content;
                contract.Status = "Pending Approval";
                contract.InitiatorStatus = "Initiated";
                contract.DateofInitiated = DateTime.Now;

                Logger.Info("Accessed DB, Checking Contract Details: Checking Approvers");
                if (!string.IsNullOrWhiteSpace(contract.Approver1ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver1 Found");
                    contract.NextApprover = contract.Approver1ID.ToString();
                    contract.Approver1Status = "Pending Approval";
                    contract.Approver1ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver1 Status Updated");
                }
                
                else if (!string.IsNullOrWhiteSpace(contract.Approver2ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver2 Found");
                    contract.NextApprover = contract.Approver2ID.ToString();
                    contract.Approver2Status = "Pending Approval";
                    contract.Approver2ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver2 Status Updated");

                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver3ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver3 Found");
                    contract.NextApprover = contract.Approver3ID.ToString();
                    contract.Approver3Status = "Pending Approval";
                    contract.Approver3ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver3 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver4ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver4 Found");
                    contract.NextApprover = contract.Approver4ID.ToString();
                    contract.Approver4Status = "Pending Approval";
                    contract.Approver4ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver4 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver5ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver5 Found");
                    contract.NextApprover = contract.Approver5ID.ToString();
                    contract.Approver5Status = "Pending Approval";
                    contract.Approver5ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver5 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver6ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver6 Found");
                    contract.NextApprover = contract.Approver6ID.ToString();
                    contract.Approver6Status = "Pending Approval";
                    contract.Approver6ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver6 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver7ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                    contract.NextApprover = contract.Approver7ID.ToString();
                    contract.Approver7Status = "Pending Approval";
                    contract.Approver7ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver7 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver8ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                    contract.NextApprover = contract.Approver8ID.ToString();
                    contract.Approver8Status = "Pending Approval";
                    contract.Approver8ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver8 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver9ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                    contract.NextApprover = contract.Approver9ID.ToString();
                    contract.Approver9Status = "Pending Approval";
                    contract.Approver9ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver9 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver10ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                    contract.NextApprover = contract.Approver10ID.ToString();
                    contract.Approver10Status = "Pending Approval";
                    contract.Approver10ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver10 Status Updated");
                }

                try
                {
                    string LogChangeFrom = "";
                    string LogChangeTo = "";
                    var Deligation = /*from tblDeligationMatrix in*/ db.tblDeligationMatrices.Select(x => new { x.DeligateFrom, x.DeligateTo, x.StartDate, x.EndDate, x.ID }); //select tblDeligationMatrix;
                    foreach (var r in Deligation)
                    {
                        int Found = 1;
                        DateTime startDate = DateTime.ParseExact(r.StartDate, "dd/MM/yyyy", null);
                        Found = DateTime.Compare(startDate, DateTime.Now);

                        if (Found <= 0)
                        {
                            Found = 1;
                            DateTime endDate = DateTime.ParseExact(r.EndDate, "dd/MM/yyyy", null);
                            Found = DateTime.Compare(endDate, DateTime.Now);
                            if (Found < 0)
                            {
                                var DeligationID = r.ID;

                                tblDeligationMatrix Deligate = db.tblDeligationMatrices.Find(DeligationID);
                                db.tblDeligationMatrices.Remove(Deligate);

                            }
                            else
                            {
                                try
                                {
                                    // DeligationMethod(Convert.ToInt32(eachItem.DeligateFrom), Convert.ToInt32(eachItem.DeligateTo));
                                    if ((r.DeligateFrom == contract.Initiator) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                    {
                                        contract.Initiator = r.DeligateTo;

                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Initiator in Contract (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom.ToString() == contract.NextApprover) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                    {
                                        contract.NextApprover = r.DeligateTo.ToString();
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Next Approver in Contract (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom.ToString() == contract.RejectedBy) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                    {
                                        contract.RejectedBy = r.DeligateTo.ToString();
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Rejected By in Contract (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver1ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver1Status == "Pending Approval" || contract.Approver1Status == "Rejected" || contract.Approver1Status == null))
                                    {
                                        contract.Approver1ID = (int)r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 1 in Contract (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver2ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver2Status == "Pending Approval" || contract.Approver2Status == "Rejected" || contract.Approver2Status == null))
                                    {
                                        contract.Approver2ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 2 in Contract (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver3ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver3Status == "Pending Approval" || contract.Approver3Status == "Rejected" || contract.Approver3Status == null))
                                    {
                                        contract.Approver3ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 3 in Contract (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);

                                    }
                                    if ((r.DeligateFrom == contract.Approver4ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver4Status == "Pending Approval" || contract.Approver4Status == "Rejected" || contract.Approver4Status == null))
                                    {
                                        contract.Approver4ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 4 in Contract (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver5ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver5Status == "Pending Approval" || contract.Approver5Status == "Rejected" || contract.Approver5Status == null))
                                    {
                                        contract.Approver5ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 5 in Contract (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver6ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver6Status == "Pending Approval" || contract.Approver6Status == "Rejected" || contract.Approver6Status == null))
                                    {
                                        contract.Approver6ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 6 in Contract (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver7ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver7Status == "Pending Approval" || contract.Approver7Status == "Rejected" || contract.Approver7Status == null))
                                    {
                                        contract.Approver7ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 7 in Contract (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver8ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver8Status == "Pending Approval" || contract.Approver8Status == "Rejected" || contract.Approver8Status == null))
                                    {
                                        contract.Approver8ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 8 in Contract (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver9ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver9Status == "Pending Approval" || contract.Approver9Status == "Rejected" || contract.Approver9Status == null))
                                    {
                                        contract.Approver9ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 9 in Contract (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver10ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver10Status == "Pending Approval" || contract.Approver10Status == "Rejected" || contract.Approver10Status == null))
                                    {
                                        contract.Approver10ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 10 in Contract (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }

                                }
                                catch
                                { }
                            }

                        }


                    }



                    db.Entry(contract).State = EntityState.Modified;

                   
                }
                catch { }
                db.SaveChanges();
                Logger.Info("Accessed DB, Contract is Initiated");

                for (int i = 0; i < arrVariableNames.Length; i++)
                {
                    Logger.Info("Attempt Contract Variables");
                    try
                    {
                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                        Logger.Info("Accessing DB for Saving the Contract Variables");
                        tblVariableData newVariable = new tblVariableData
                        {
                            Type = "Contract",
                            TypeID = ID,
                            Variable = arrVariableNames[i],
                            Value = arrVariableValues[i],
                            Version = "Initiator",
                        };

                        db.tblVariableDatas.Add(newVariable);


                        Logger.Info("Accessed DB, Contract Variables Saved");
                    }

                    catch { }
                }

                Logger.Info("Accessing DB for Saving the Contract Log Details");
                tblContractLog log = new tblContractLog
                {
                    LogContractUID = contract.ContractID,
                    ModifiedBy = CurrentUser.ToString() + " - " + CurrentUserName,
                    LogActivity = "Initiated",
                    ChangedFrom = "-",
                    ChangedTo = "-",
                    DateandTime = DateTime.Now.ToString()
                };
                db.tblContractLogs.Add(log);
                db.SaveChanges();
                Logger.Info("Accessed DB, Contract Log Record Saved");

                string Initiator = "";
                Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                string Initiatoremail = "";
                Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                string[] Contract = new string[5];

                foreach (var r in TableVariable)
                {
                    Contract[0] = r.Variable;
                    Contract[1] = r.Value;
                    if (Contract[0] == "Vendor Name")
                    {
                        Contract[3] = "Vendor Name";
                        Contract[4] = Contract[1];
                    }

                }
                string employeename = Initiator;
                string VendorName = Contract[4];
                string[] TO = { Initiatoremail };
                string Subject = contract.ContractName + " is initiated ";
                string UrL = ApplicationLink + "/Contract/Details/" + ID;
                string Paragraph = "The contract details as mentioned below is initiated and requested for Approval.<br/>We will notify you once contract is approved and ready to sign.<br/><br/>";
                string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                SMTP.Send(TO, Subject, Body);

                string Approver1 = "";
                Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                string Approver1email = "";
                Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                var tableVariable01 = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                string[] contract01 = new string[5];

                foreach (var r in tableVariable01)
                {
                    contract01[0] = r.Variable;
                    contract01[1] = r.Value;
                    if (contract01[0] == "Vendor Name")
                    {
                        contract01[3] = "Vendor Name";
                        contract01[4] = contract01[1];
                    }

                }

                string vendorName01 = contract01[4];
                TO[0] = Approver1email;

                Subject = contract.ContractName + "  is pending for review ";
                string Url = ApplicationLink + "/Contract/Details/" + ID;
                Paragraph = "The contract details as mentioned below is initiated by " + Initiator + "  and requested for your review. <br/><br/>";
                Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + vendorName01 + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                SMTP.Send(TO, Subject, Body);
                return Json("success");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'InitiateContract' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult InitiateModifiedContract(string content, int ID, string[] arrVariableNames, string[] arrVariableValues, string Comments, int CurrentUserID = 0)
        {
            int CurrentUser = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Contract InitiateModifiedContract");
            try
            {
                Logger.Info("Accessing DB for Initiating the Contract");
                tblContractModification contract = db.tblContractModifications.Find(ID);


                contract.Initiator = CurrentUserID;
                contract.InitiatorComments = Comments;

                contract.ContractDraft = content;
                contract.InitiatorDraft = content;
                contract.Status = "Pending Approval";
                contract.InitiatorStatus = "Initiated";
                contract.DateofInitiated = DateTime.Now;

                Logger.Info("Accessed DB, Checking Contract Details: Checking Approvers");
                if (!string.IsNullOrWhiteSpace(contract.Approver1ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver1 Found");
                    contract.NextApprover = contract.Approver1ID.ToString();
                    contract.Approver1Status = "Pending Approval";
                    contract.Approver1ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver1 Status Updated");
                }

                else if (!string.IsNullOrWhiteSpace(contract.Approver2ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver2 Found");
                    contract.NextApprover = contract.Approver2ID.ToString();
                    contract.Approver2Status = "Pending Approval";
                    contract.Approver2ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver2 Status Updated");

                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver3ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver3 Found");
                    contract.NextApprover = contract.Approver3ID.ToString();
                    contract.Approver3Status = "Pending Approval";
                    contract.Approver3ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver3 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver4ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver4 Found");
                    contract.NextApprover = contract.Approver4ID.ToString();
                    contract.Approver4Status = "Pending Approval";
                    contract.Approver4ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver4 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver5ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver5 Found");
                    contract.NextApprover = contract.Approver5ID.ToString();
                    contract.Approver5Status = "Pending Approval";
                    contract.Approver5ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver5 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver6ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver6 Found");
                    contract.NextApprover = contract.Approver6ID.ToString();
                    contract.Approver6Status = "Pending Approval";
                    contract.Approver6ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver6 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver7ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                    contract.NextApprover = contract.Approver7ID.ToString();
                    contract.Approver7Status = "Pending Approval";
                    contract.Approver7ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver7 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver8ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                    contract.NextApprover = contract.Approver8ID.ToString();
                    contract.Approver8Status = "Pending Approval";
                    contract.Approver8ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver8 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver9ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                    contract.NextApprover = contract.Approver9ID.ToString();
                    contract.Approver9Status = "Pending Approval";
                    contract.Approver9ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver9 Status Updated");
                }
                else if (!string.IsNullOrWhiteSpace(contract.Approver10ID.ToString()))
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                    contract.NextApprover = contract.Approver10ID.ToString();
                    contract.Approver10Status = "Pending Approval";
                    contract.Approver10ReceivedOn = DateTime.Now;
                    Logger.Info("Accessed DB, Checking Contract Details: Approver10 Status Updated");
                }

                try
                {
                    string LogChangeFrom = "";
                    string LogChangeTo = "";
                    var Deligation = /*from tblDeligationMatrix in*/ db.tblDeligationMatrices.Select(x => new { x.DeligateFrom, x.DeligateTo, x.StartDate, x.EndDate, x.ID }); //select tblDeligationMatrix;
                    foreach (var r in Deligation)
                    {
                        int Found = 1;
                        DateTime startDate = DateTime.ParseExact(r.StartDate, "dd/MM/yyyy", null);
                        Found = DateTime.Compare(startDate, DateTime.Now);

                        if (Found <= 0)
                        {
                            Found = 1;
                            DateTime endDate = DateTime.ParseExact(r.EndDate, "dd/MM/yyyy", null);
                            Found = DateTime.Compare(endDate, DateTime.Now);
                            if (Found < 0)
                            {
                                var DeliagtionID = r.ID;

                                tblDeligationMatrix Deligate = db.tblDeligationMatrices.Find(DeliagtionID);
                                db.tblDeligationMatrices.Remove(Deligate);

                            }
                            else
                            {
                                try
                                {
                                    //DeligationMethod(Convert.ToInt32(eachItem.DeligateFrom), Convert.ToInt32(eachItem.DeligateTo));
                                    if ((r.DeligateFrom == contract.Initiator) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                    {
                                        contract.Initiator = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Initiator in Contract Modification (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom.ToString() == contract.NextApprover) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                    {
                                        contract.NextApprover = r.DeligateTo.ToString();
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating Next Approver in Contract Modification (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom.ToString() == contract.RejectedBy) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                    {
                                        contract.RejectedBy = r.DeligateTo.ToString();
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating Rejected By in Contract Modification (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver1ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver1Status == "Pending Approval" || contract.Approver1Status == "Rejected" || contract.Approver1Status == null))
                                    {
                                        contract.Approver1ID = (int)r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 1 in Contract Modification (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver2ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver2Status == "Pending Approval" || contract.Approver2Status == "Rejected" || contract.Approver2Status == null))
                                    {
                                        contract.Approver2ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 2 in Contract Modification (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver3ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver3Status == "Pending Approval" || contract.Approver3Status == "Rejected" || contract.Approver3Status == null))
                                    {
                                        contract.Approver3ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 3 in Contract Modification (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver4ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver4Status == "Pending Approval" || contract.Approver4Status == "Rejected" || contract.Approver4Status == null))
                                    {
                                        contract.Approver4ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 4 in Contract Modification (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver5ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver5Status == "Pending Approval" || contract.Approver5Status == "Rejected" || contract.Approver5Status == null))
                                    {
                                        contract.Approver5ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 5 in Contract Modification (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver6ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver6Status == "Pending Approval" || contract.Approver6Status == "Rejected" || contract.Approver6Status == null))
                                    {
                                        contract.Approver6ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 6 in Contract Modification (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver7ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver7Status == "Pending Approval" || contract.Approver7Status == "Rejected" || contract.Approver7Status == null))
                                    {
                                        contract.Approver7ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 7 in Contract Modification (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver8ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver8Status == "Pending Approval" || contract.Approver8Status == "Rejected" || contract.Approver8Status == null))
                                    {
                                        contract.Approver8ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 8 in Contract Modification (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver9ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver9Status == "Pending Approval" || contract.Approver9Status == "Rejected" || contract.Approver9Status == null))
                                    {
                                        contract.Approver9ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 9 in Contract Modification (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }
                                    if ((r.DeligateFrom == contract.Approver10ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver10Status == "Pending Approval" || contract.Approver10Status == "Rejected" || contract.Approver10Status == null))
                                    {
                                        contract.Approver10ID = r.DeligateTo;
                                        tblDeligationLog logs = new tblDeligationLog();
                                        logs.LogDeligationUID = contract.ContractID;
                                        logs.ModifiedBy = "SYSTEM";
                                        logs.LogActivity = "Deligating  Approver 10 in Contract Modification (" + contract.ContractID + ")";
                                        logs.ChangedFrom = r.DeligateFrom.ToString();
                                        logs.ChangedTo = r.DeligateTo.ToString();
                                        logs.DateandTime = DateTime.Now.ToString();
                                        db.tblDeligationLogs.Add(logs);
                                    }

                                }
                                catch
                                { }
                            }

                        }

                    }



                    db.Entry(contract).State = EntityState.Modified;
                }
                catch { }
                db.SaveChanges();
                Logger.Info("Accessed DB, Contract is Initiated");

                for (int i = 0; i < arrVariableNames.Length; i++)
                {
                    Logger.Info("Attempt Contract Variables");
                    try
                    {
                        Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                        Logger.Info("Accessing DB for Saving the Contract Variables");
                        tblVariableData newVariable = new tblVariableData
                        {
                            Type = "Contract",
                            TypeID = ID,
                            Variable = arrVariableNames[i],
                            Value = arrVariableValues[i],
                            Version = "Initiator",
                        };

                        db.tblVariableDatas.Add(newVariable);

                        Logger.Info("Accessed DB, Contract Variables Saved");
                    }

                    catch { }
                }


                Logger.Info("Accessing DB for Saving the Contract Log Details");
                tblContractLog log = new tblContractLog
                {
                    LogContractUID = contract.ContractID,
                    ModifiedBy = CurrentUser.ToString() + " - " + CurrentUserName,
                    LogActivity = "Initiated",
                    ChangedFrom = "-",
                    ChangedTo = "-",
                    DateandTime = DateTime.Now.ToString()
                };
                db.tblContractLogs.Add(log);
                db.SaveChanges();
                Logger.Info("Accessed DB, Contract Log Record Saved");

                string Initiator = "";
                Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                string Initiatoremail = "";
                Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                string[] Contract = new string[5];

                foreach (var r in TableVariable)
                {
                    Contract[0] = r.Variable;
                    Contract[1] = r.Value;
                    if (Contract[0] == "Vendor Name")
                    {
                        Contract[3] = "Vendor Name";
                        Contract[4] = Contract[1];
                    }

                }
                string employeename = Initiator;
                string VendorName = Contract[4];
                string[] TO = { Initiatoremail };
                string Subject = contract.ContractName + " is initiated ";
                string UrL = ApplicationLink + "/Contract/Details/" + ID;
                string Paragraph = "The contract details as mentioned below is initiated and requested for Approval.<br/>We will notify you once contract is approved and ready to sign.<br/><br/>";
                string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                SMTP.Send(TO, Subject, Body);

                string Approver1 = "";
                Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                string Approver1email = "";
                Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                var tableVariable01 = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                string[] contract01 = new string[5];

                foreach (var r in tableVariable01)
                {
                    contract01[0] = r.Variable;
                    contract01[1] = r.Value;
                    if (contract01[0] == "Vendor Name")
                    {
                        contract01[3] = "Vendor Name";
                        contract01[4] = contract01[1];
                    }

                }

                string vendorName01 = contract01[4];
                TO[0] = Approver1email;

                Subject = contract.ContractName + "  is pending for review ";
                string Url = ApplicationLink + "/Contract/Details/" + ID;
                Paragraph = "The contract details as mentioned below is initiated by " + Initiator + "  and requested for your review. <br/><br/>";
                Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + vendorName01 + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                SMTP.Send(TO, Subject, Body);
                return Json("success");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'InitiateContract' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ApproveContract(string content, int ID, string[] arrVariableNames, string[] arrVariableValues, string Comments)
        {
            int CurrentUserID = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUserID = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Contract ApproveContract");
            try
            {
                string CurrentUser = User.Identity.Name.Split('|')[1];
                Logger.Info("Accessing DB for Approving the Contract");
                tblContractMaster contract = db.tblContractMasters.Find(ID);

                Logger.Info("Accessed DB, Checking Contract Details: Checking Approver");
                if (contract.NextApprover.ToString() == CurrentUser)
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver Found");

                    
                    if (contract.Approver1ID.ToString() == CurrentUser && contract.Approver1Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver1 Found");
                        contract.Approver1ApprovedOn = DateTime.Now;

                        contract.Approver1Comments = Comments;

                        contract.Approver1Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver1Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 1",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");
                        if (contract.Approver2ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver2 Found");
                            contract.NextApprover = contract.Approver2ID.ToString();
                            contract.Approver2Status = "Pending Approval";
                            contract.Approver2ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver2 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            //string employeename = Approver2;
                            string VendorName = Contract[4];
                            string[] TO = { Approver2email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver3ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver3 Found");
                            contract.NextApprover = contract.Approver3ID.ToString();
                            contract.Approver3Status = "Pending Approval";
                            contract.Approver3ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver3 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver3;
                            string VendorName = Contract[4];
                            string[] TO = { Approver3email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver4ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver4 Found");
                            contract.NextApprover = contract.Approver4ID.ToString();
                            contract.Approver4Status = "Pending Approval";
                            contract.Approver4ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver4 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver4;
                            string VendorName = Contract[4];
                            string[] TO = { Approver4email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver5ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver5 Found");
                            contract.NextApprover = contract.Approver5ID.ToString();
                            contract.Approver5Status = "Pending Approval";
                            contract.Approver5ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver5 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver5;
                            string VendorName = Contract[4];
                            string[] TO = { Approver5email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver6ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver6 Found");
                            contract.NextApprover = contract.Approver6ID.ToString();
                            contract.Approver6Status = "Pending Approval";
                            contract.Approver6ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver6 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver6;
                            string VendorName = Contract[4];
                            string[] TO = { Approver6email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver7ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                            contract.NextApprover = contract.Approver7ID.ToString();
                            contract.Approver7Status = "Pending Approval";
                            contract.Approver7ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver7 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver7;
                            string VendorName = Contract[4];
                            string[] TO = { Approver7email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }
                    else if (contract.Approver2ID.ToString() == CurrentUser && contract.Approver2Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver2 Found");
                        contract.Approver2ApprovedOn = DateTime.Now;
                        contract.Approver2Comments = Comments;
                        contract.Approver2Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver2Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 2",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                       
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver3ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver3 Found");
                            contract.NextApprover = contract.Approver3ID.ToString();
                            contract.Approver3Status = "Pending Approval";
                            contract.Approver3ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver3 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver3;
                            string VendorName = Contract[4];
                            string[] TO = { Approver3email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver4ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver4 Found");
                            contract.NextApprover = contract.Approver4ID.ToString();
                            contract.Approver4Status = "Pending Approval";
                            contract.Approver4ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver4 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver4;
                            string VendorName = Contract[4];
                            string[] TO = { Approver4email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver5ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver5 Found");
                            contract.NextApprover = contract.Approver5ID.ToString();
                            contract.Approver5Status = "Pending Approval";
                            contract.Approver5ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver5 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver5;
                            string VendorName = Contract[4];
                            string[] TO = { Approver5email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver6ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver6 Found");
                            contract.NextApprover = contract.Approver6ID.ToString();
                            contract.Approver6Status = "Pending Approval";
                            contract.Approver6ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver6 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver6;
                            string VendorName = Contract[4];
                            string[] TO = { Approver6email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver7ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                            contract.NextApprover = contract.Approver7ID.ToString();
                            contract.Approver7Status = "Pending Approval";
                            contract.Approver7ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver7 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver7;
                            string VendorName = Contract[4];
                            string[] TO = { Approver7email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }
                    else if (contract.Approver3ID.ToString() == CurrentUser && contract.Approver3Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver3 Found");
                        contract.Approver3ApprovedOn = DateTime.Now;
                        contract.Approver3Comments = Comments;
                        contract.Approver3Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver3Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 3",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver4ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver4 Found");
                            contract.NextApprover = contract.Approver4ID.ToString();
                            contract.Approver4Status = "Pending Approval";
                            contract.Approver4ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver4 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver4;
                            string VendorName = Contract[4];
                            string[] TO = { Approver4email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver5ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver5 Found");
                            contract.NextApprover = contract.Approver5ID.ToString();
                            contract.Approver5Status = "Pending Approval";
                            contract.Approver5ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver5 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver5;
                            string VendorName = Contract[4];
                            string[] TO = { Approver5email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver6ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver6 Found");
                            contract.NextApprover = contract.Approver6ID.ToString();
                            contract.Approver6Status = "Pending Approval";
                            contract.Approver6ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver6 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver6;
                            string VendorName = Contract[4];
                            string[] TO = { Approver6email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver7ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                            contract.NextApprover = contract.Approver7ID.ToString();
                            contract.Approver7Status = "Pending Approval";
                            contract.Approver7ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver7 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver7;
                            string VendorName = Contract[4];
                            string[] TO = { Approver7email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }


                    }
                    else if (contract.Approver4ID.ToString() == CurrentUser && contract.Approver4Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver4 Found");
                        contract.Approver4ApprovedOn = DateTime.Now;
                        contract.Approver4Comments = Comments;
                        contract.Approver4Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver4Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 4",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver5ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver5 Found");
                            contract.NextApprover = contract.Approver5ID.ToString();
                            contract.Approver5Status = "Pending Approval";
                            contract.Approver5ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver5 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver5;
                            string VendorName = Contract[4];
                            string[] TO = { Approver5email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver6ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver6 Found");
                            contract.NextApprover = contract.Approver6ID.ToString();
                            contract.Approver6Status = "Pending Approval";
                            contract.Approver6ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver6 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver6;
                            string VendorName = Contract[4];
                            string[] TO = { Approver6email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver7ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                            contract.NextApprover = contract.Approver7ID.ToString();
                            contract.Approver7Status = "Pending Approval";
                            contract.Approver7ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver7 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver7;
                            string VendorName = Contract[4];
                            string[] TO = { Approver7email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }
                    else if (contract.Approver5ID.ToString() == CurrentUser && contract.Approver5Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver5 Found");
                        contract.Approver5ApprovedOn = DateTime.Now;
                        contract.Approver5Comments = Comments;
                        contract.Approver5Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver5Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 5",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");


                        if (contract.Approver6ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver6 Found");
                            contract.NextApprover = contract.Approver6ID.ToString();
                            contract.Approver6Status = "Pending Approval";
                            contract.Approver6ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver6 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver6;
                            string VendorName = Contract[4];
                            string[] TO = { Approver6email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver7ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                            contract.NextApprover = contract.Approver7ID.ToString();
                            contract.Approver7Status = "Pending Approval";
                            contract.Approver7ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver7 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver7;
                            string VendorName = Contract[4];
                            string[] TO = { Approver7email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }

                    else if (contract.Approver6ID.ToString() == CurrentUser && contract.Approver6Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver6 Found");
                        contract.Approver6ApprovedOn = DateTime.Now;
                        contract.Approver6Comments = Comments;
                        contract.Approver6Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver6Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 6",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver7ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                            contract.NextApprover = contract.Approver7ID.ToString();
                            contract.Approver7Status = "Pending Approval";
                            contract.Approver7ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver7 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver7;
                            string VendorName = Contract[4];
                            string[] TO = { Approver7email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }

                    else if (contract.Approver7ID.ToString() == CurrentUser && contract.Approver7Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver7 Found");
                        contract.Approver7ApprovedOn = DateTime.Now;
                        contract.Approver7Comments = Comments;
                        contract.Approver7Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver7Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 7",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }

                    else if (contract.Approver8ID.ToString() == CurrentUser && contract.Approver8Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver8 Found");
                        contract.Approver8ApprovedOn = DateTime.Now;
                        contract.Approver8Comments = Comments;
                        contract.Approver8Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver8Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 8",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }

                    else if (contract.Approver9ID.ToString() == CurrentUser && contract.Approver9Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver9 Found");
                        contract.Approver9ApprovedOn = DateTime.Now;
                        contract.Approver9Comments = Comments;
                        contract.Approver9Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver9Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 9",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }
                    }

                    else if (contract.Approver10ID.ToString() == CurrentUser && contract.Approver10Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver10 Found");
                        contract.Approver10ApprovedOn = DateTime.Now;
                        contract.Approver10Comments = Comments;
                        contract.Approver10Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver10Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 10",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details:Further Approvers Not Found");
                        contract.Status = "Approved";
                        contract.NextApprover = 0.ToString();
                        Logger.Info("Accessed DB, Contract Approved");
                        string Approver = "";
                        Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string Approveremail = "";
                        Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }

                        string VendorName = Contract[4];
                        string[] To = { Approveremail };


                        string Subject = contract.ContractName + " is Approved and ready to Sign ";
                        string UrL = ApplicationLink + "/Contract/Details/" + ID;
                        string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                        string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(To, Subject, Body);
                    }

                    try
                    {
                       // string LogChangeFrom = "";
                       // string LogChangeTo = "";
                        var Deligation = /*from tblDeligationMatrix in*/ db.tblDeligationMatrices.Select(x => new { x.DeligateFrom, x.DeligateTo, x.StartDate, x.EndDate, x.ID }); //select tblDeligationMatrix;
                        foreach (var r in Deligation)
                        {
                            int Found = 1;
                            DateTime startDate = DateTime.ParseExact(r.StartDate, "dd/MM/yyyy", null);
                            Found = DateTime.Compare(startDate, DateTime.Now);

                            if (Found <= 0)
                            {
                                Found = 1;
                                DateTime endDate = DateTime.ParseExact(r.EndDate, "dd/MM/yyyy", null);
                                Found = DateTime.Compare(endDate, DateTime.Now);
                                if (Found < 0)
                                {
                                    var DeligationID = r.ID;

                                    tblDeligationMatrix Deligate = db.tblDeligationMatrices.Find(DeligationID);
                                    db.tblDeligationMatrices.Remove(Deligate);

                                }
                                else
                                {
                                    try
                                    {
                                        //DeligationMethod(Convert.ToInt32(eachItem.DeligateFrom), Convert.ToInt32(eachItem.DeligateTo));
                                        if ((r.DeligateFrom == contract.Initiator) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                        {
                                            contract.Initiator = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Initiator in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom.ToString() == contract.NextApprover) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                        {
                                            contract.NextApprover = r.DeligateTo.ToString();
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Next Approver in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom.ToString() == contract.RejectedBy) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                        {
                                            contract.RejectedBy = r.DeligateTo.ToString();
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Rejected By in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver1ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver1Status == "Pending Approval" || contract.Approver1Status == "Rejected" || contract.Approver1Status == null))
                                        {
                                            contract.Approver1ID = (int)r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 1 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver2ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver2Status == "Pending Approval" || contract.Approver2Status == "Rejected" || contract.Approver2Status == null))
                                        {
                                            contract.Approver2ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 2 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver3ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver3Status == "Pending Approval" || contract.Approver3Status == "Rejected" || contract.Approver3Status == null))
                                        {
                                            contract.Approver3ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 3 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver4ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver4Status == "Pending Approval" || contract.Approver4Status == "Rejected" || contract.Approver4Status == null))
                                        {
                                            contract.Approver4ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 4 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver5ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver5Status == "Pending Approval" || contract.Approver5Status == "Rejected" || contract.Approver5Status == null))
                                        {
                                            contract.Approver5ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 5 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver6ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver6Status == "Pending Approval" || contract.Approver6Status == "Rejected" || contract.Approver6Status == null))
                                        {
                                            contract.Approver6ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 6 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver7ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver7Status == "Pending Approval" || contract.Approver7Status == "Rejected" || contract.Approver7Status == null))
                                        {
                                            contract.Approver7ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 7 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver8ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver8Status == "Pending Approval" || contract.Approver8Status == "Rejected" || contract.Approver8Status == null))
                                        {
                                            contract.Approver8ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 8 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver9ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver9Status == "Pending Approval" || contract.Approver9Status == "Rejected" || contract.Approver9Status == null))
                                        {
                                            contract.Approver9ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 9 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver10ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver10Status == "Pending Approval" || contract.Approver10Status == "Rejected" || contract.Approver10Status == null))
                                        {
                                            contract.Approver10ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 10 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }

                                    }
                                    catch
                                    { }
                                }

                            }

                        }



                        db.Entry(contract).State = EntityState.Modified;

                    }
                    catch { }

                    db.SaveChanges();

                    Logger.Info("Accessed DB, Contract Approved and Saved");
                    string[] Result = new string[2];
                    Result[0] = "success";
                    Result[1] = contract.Status;
                    return Json(Result);

                }
                return Json("failure");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'ApproveContract' Action HTTP POST Main exception");
                return Json("error");
            }

        }

        [HttpPost]
        [ValidateInput(false)]
        public JsonResult AcceptChangesLastAprrover(int ID,string finalcontent)
        {
            Logger.Info("Attempt Contract AcceptChangesLastAprrover");
            try
            {
                string CurrentUser = User.Identity.Name.Split('|')[1];
                Logger.Info("Accessing DB for Saving the Contract Details");
                tblContractMaster contract = db.tblContractMasters.Find(ID);

                contract.ContractDraft = finalcontent;
                //contract.InitiatorDraft = finalcontent;
                //if(contract.Approver1ID.ToString() == CurrentUser)
                //{
                //    contract.Approver1Draft = finalcontent;
                //}
                //else if (contract.Approver2ID.ToString() == CurrentUser)
                //{
                //    contract.Approver2Draft = finalcontent;
                //}
                //else if (contract.Approver3ID.ToString() == CurrentUser)
                //{
                //    contract.Approver3Draft = finalcontent;
                //}
                //else if (contract.Approver4ID.ToString() == CurrentUser)
                //{
                //    contract.Approver4Draft = finalcontent;
                //}
                //else if (contract.Approver5ID.ToString() == CurrentUser)
                //{
                //    contract.Approver5Draft = finalcontent;
                //}
                //else if (contract.Approver6ID.ToString() == CurrentUser)
                //{
                //    contract.Approver6Draft = finalcontent;
                //}
                //else if (contract.Approver7ID.ToString() == CurrentUser)
                //{
                //    contract.Approver7Draft = finalcontent;
                //}
                //else if (contract.Approver8ID.ToString() == CurrentUser)
                //{
                //    contract.Approver8Draft = finalcontent;
                //}
                //else if (contract.Approver9ID.ToString() == CurrentUser)
                //{
                //    contract.Approver9Draft = finalcontent;
                //}
                //else if (contract.Approver10ID.ToString() == CurrentUser)
                //{
                //    contract.Approver10Draft = finalcontent;
                //}
                db.Entry(contract).State = EntityState.Modified;
                db.SaveChanges();
                Logger.Info("Accessed DB, Details Saved to DB");
                return Json("success");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'AcceptChangesLastAprrover' Action HTTP POST Main exception");
                return Json("error");
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult ApproveModifiedContract(string content, int ID, string[] arrVariableNames, string[] arrVariableValues, string Comments)
        {
            Logger.Info("Attempt Modified Contract ApproveModifiedContract");
            try
            {
                int CurrentUserID = 0;
                string CurrentUserName = "";
                try
                {
                    CurrentUserID = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                    CurrentUserName = User.Identity.Name.Split('|')[0];
                }
                catch { }
                string CurrentUser = User.Identity.Name.Split('|')[1];
                Logger.Info("Accessing DB for Approving the Contract");
                tblContractModification contract = db.tblContractModifications.Find(ID);

                Logger.Info("Accessed DB, Checking Contract Details: Checking Approver");
                if (contract.NextApprover.ToString() == CurrentUser)
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver Found");


                    if (contract.Approver1ID.ToString() == CurrentUser && contract.Approver1Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver1 Found");
                        contract.Approver1ApprovedOn = DateTime.Now;

                        contract.Approver1Comments = Comments;

                        contract.Approver1Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver1Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 1",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");
                        if (contract.Approver2ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver2 Found");
                            contract.NextApprover = contract.Approver2ID.ToString();
                            contract.Approver2Status = "Pending Approval";
                            contract.Approver2ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver2 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            //string employeename = Approver2;
                            string VendorName = Contract[4];
                            string[] TO = { Approver2email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver3ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver3 Found");
                            contract.NextApprover = contract.Approver3ID.ToString();
                            contract.Approver3Status = "Pending Approval";
                            contract.Approver3ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver3 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver3;
                            string VendorName = Contract[4];
                            string[] TO = { Approver3email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver4ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver4 Found");
                            contract.NextApprover = contract.Approver4ID.ToString();
                            contract.Approver4Status = "Pending Approval";
                            contract.Approver4ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver4 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver4;
                            string VendorName = Contract[4];
                            string[] TO = { Approver4email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver5ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver5 Found");
                            contract.NextApprover = contract.Approver5ID.ToString();
                            contract.Approver5Status = "Pending Approval";
                            contract.Approver5ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver5 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver5;
                            string VendorName = Contract[4];
                            string[] TO = { Approver5email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver6ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver6 Found");
                            contract.NextApprover = contract.Approver6ID.ToString();
                            contract.Approver6Status = "Pending Approval";
                            contract.Approver6ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver6 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver6;
                            string VendorName = Contract[4];
                            string[] TO = { Approver6email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver7ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                            contract.NextApprover = contract.Approver7ID.ToString();
                            contract.Approver7Status = "Pending Approval";
                            contract.Approver7ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver7 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver7;
                            string VendorName = Contract[4];
                            string[] TO = { Approver7email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }
                    else if (contract.Approver2ID.ToString() == CurrentUser && contract.Approver2Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver2 Found");
                        contract.Approver2ApprovedOn = DateTime.Now;
                        contract.Approver2Comments = Comments;
                        contract.Approver2Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver2Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 2",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver3ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver3 Found");
                            contract.NextApprover = contract.Approver3ID.ToString();
                            contract.Approver3Status = "Pending Approval";
                            contract.Approver3ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver3 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver3;
                            string VendorName = Contract[4];
                            string[] TO = { Approver3email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver4ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver4 Found");
                            contract.NextApprover = contract.Approver4ID.ToString();
                            contract.Approver4Status = "Pending Approval";
                            contract.Approver4ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver4 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver4;
                            string VendorName = Contract[4];
                            string[] TO = { Approver4email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver5ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver5 Found");
                            contract.NextApprover = contract.Approver5ID.ToString();
                            contract.Approver5Status = "Pending Approval";
                            contract.Approver5ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver5 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver5;
                            string VendorName = Contract[4];
                            string[] TO = { Approver5email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver6ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver6 Found");
                            contract.NextApprover = contract.Approver6ID.ToString();
                            contract.Approver6Status = "Pending Approval";
                            contract.Approver6ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver6 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver6;
                            string VendorName = Contract[4];
                            string[] TO = { Approver6email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver7ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                            contract.NextApprover = contract.Approver7ID.ToString();
                            contract.Approver7Status = "Pending Approval";
                            contract.Approver7ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver7 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver7;
                            string VendorName = Contract[4];
                            string[] TO = { Approver7email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }
                    else if (contract.Approver3ID.ToString() == CurrentUser && contract.Approver3Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver3 Found");
                        contract.Approver3ApprovedOn = DateTime.Now;
                        contract.Approver3Comments = Comments;
                        contract.Approver3Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver3Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 3",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver4ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver4 Found");
                            contract.NextApprover = contract.Approver4ID.ToString();
                            contract.Approver4Status = "Pending Approval";
                            contract.Approver4ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver4 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver4;
                            string VendorName = Contract[4];
                            string[] TO = { Approver4email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver5ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver5 Found");
                            contract.NextApprover = contract.Approver5ID.ToString();
                            contract.Approver5Status = "Pending Approval";
                            contract.Approver5ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver5 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver5;
                            string VendorName = Contract[4];
                            string[] TO = { Approver5email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver6ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver6 Found");
                            contract.NextApprover = contract.Approver6ID.ToString();
                            contract.Approver6Status = "Pending Approval";
                            contract.Approver6ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver6 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver6;
                            string VendorName = Contract[4];
                            string[] TO = { Approver6email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver7ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                            contract.NextApprover = contract.Approver7ID.ToString();
                            contract.Approver7Status = "Pending Approval";
                            contract.Approver7ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver7 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver7;
                            string VendorName = Contract[4];
                            string[] TO = { Approver7email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }


                    }
                    else if (contract.Approver4ID.ToString() == CurrentUser && contract.Approver4Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver4 Found");
                        contract.Approver4ApprovedOn = DateTime.Now;
                        contract.Approver4Comments = Comments;
                        contract.Approver4Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver4Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 4",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver5ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver5 Found");
                            contract.NextApprover = contract.Approver5ID.ToString();
                            contract.Approver5Status = "Pending Approval";
                            contract.Approver5ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver5 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver5;
                            string VendorName = Contract[4];
                            string[] TO = { Approver5email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver6ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver6 Found");
                            contract.NextApprover = contract.Approver6ID.ToString();
                            contract.Approver6Status = "Pending Approval";
                            contract.Approver6ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver6 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver6;
                            string VendorName = Contract[4];
                            string[] TO = { Approver6email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver7ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                            contract.NextApprover = contract.Approver7ID.ToString();
                            contract.Approver7Status = "Pending Approval";
                            contract.Approver7ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver7 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver7;
                            string VendorName = Contract[4];
                            string[] TO = { Approver7email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }
                    else if (contract.Approver5ID.ToString() == CurrentUser && contract.Approver5Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver5 Found");
                        contract.Approver5ApprovedOn = DateTime.Now;
                        contract.Approver5Comments = Comments;
                        contract.Approver5Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver5Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 5",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");


                        if (contract.Approver6ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver6 Found");
                            contract.NextApprover = contract.Approver6ID.ToString();
                            contract.Approver6Status = "Pending Approval";
                            contract.Approver6ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver6 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver6;
                            string VendorName = Contract[4];
                            string[] TO = { Approver6email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver7ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                            contract.NextApprover = contract.Approver7ID.ToString();
                            contract.Approver7Status = "Pending Approval";
                            contract.Approver7ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver7 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver7;
                            string VendorName = Contract[4];
                            string[] TO = { Approver7email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }

                    else if (contract.Approver6ID.ToString() == CurrentUser && contract.Approver6Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver6 Found");
                        contract.Approver6ApprovedOn = DateTime.Now;
                        contract.Approver6Comments = Comments;
                        contract.Approver6Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver6Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 6",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver7ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver7 Found");
                            contract.NextApprover = contract.Approver7ID.ToString();
                            contract.Approver7Status = "Pending Approval";
                            contract.Approver7ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver7 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver7;
                            string VendorName = Contract[4];
                            string[] TO = { Approver7email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }

                    else if (contract.Approver7ID.ToString() == CurrentUser && contract.Approver7Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver7 Found");
                        contract.Approver7ApprovedOn = DateTime.Now;
                        contract.Approver7Comments = Comments;
                        contract.Approver7Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver7Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 7",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver8ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver8 Found");
                            contract.NextApprover = contract.Approver8ID.ToString();
                            contract.Approver8Status = "Pending Approval";
                            contract.Approver8ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver8 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver8;
                            string VendorName = Contract[4];
                            string[] TO = { Approver8email };

                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }

                    else if (contract.Approver8ID.ToString() == CurrentUser && contract.Approver8Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver8 Found");
                        contract.Approver8ApprovedOn = DateTime.Now;
                        contract.Approver8Comments = Comments;
                        contract.Approver8Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver8Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 8",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver9ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver9 Found");
                            contract.NextApprover = contract.Approver9ID.ToString();
                            contract.Approver9Status = "Pending Approval";
                            contract.Approver9ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver9 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver9;
                            string VendorName = Contract[4];
                            string[] TO = { Approver9email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }

                    }

                    else if (contract.Approver9ID.ToString() == CurrentUser && contract.Approver9Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver9 Found");
                        contract.Approver9ApprovedOn = DateTime.Now;
                        contract.Approver9Comments = Comments;
                        contract.Approver9Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver9Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 9",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details: Checking Next Approvers");

                        if (contract.Approver10ID > 0)
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Approver10 Found");
                            contract.NextApprover = contract.Approver10ID.ToString();
                            contract.Approver10Status = "Pending Approval";
                            contract.Approver10ReceivedOn = DateTime.Now;
                            Logger.Info("Accessed DB, Checking Contract Details: Update Approver10 Status");
                            string Initiate = "";
                            Initiate = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approver10 = "";
                            Approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver10email = "";
                            Approver10email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            string employeename = Approver10;
                            string VendorName = Contract[4];
                            string[] TO = { Approver10email };
                            string Subject = contract.ContractName + "  is pending for review ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is initiated by " + Initiate + " and requested for your review.<br/><br/>";
                            string Body = "Dear " + Approver10 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(TO, Subject, Body);
                        }
                        else
                        {
                            Logger.Info("Accessed DB, Checking Contract Details: Next Approver Not Found");
                            contract.Status = "Approved";
                            contract.NextApprover = 0.ToString();
                            Logger.Info("Accessed DB, Contract Approved");
                            string Approver = "";
                            Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                            string Approveremail = "";
                            Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                            var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                            string[] Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }

                            string VendorName = Contract[4];
                            string[] To = { Approveremail };
                            string Subject = contract.ContractName + " is Approved and ready to Sign ";
                            string UrL = ApplicationLink + "/Contract/Details/" + ID;
                            string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                            string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/>System Admin<br/> Contract Management System</body></html>";
                            SMTP.Send(To, Subject, Body);

                        }
                    }

                    else if (contract.Approver10ID.ToString() == CurrentUser && contract.Approver10Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver10 Found");
                        contract.Approver10ApprovedOn = DateTime.Now;
                        contract.Approver10Comments = Comments;
                        contract.Approver10Status = "Approved";
                        if (User.IsInRole("initiator") || User.IsInRole("legal"))
                        {
                            contract.Approver10Draft = content;
                            for (int i = 0; i < arrVariableNames.Length; i++)
                            {
                                Logger.Info("Attempt Contract Variables");
                                try
                                {
                                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Not Found");
                                    Logger.Info("Accessing DB for Saving the Contract Variables");
                                    tblVariableData newVariable = new tblVariableData
                                    {
                                        Type = "Contract",
                                        TypeID = ID,
                                        Variable = arrVariableNames[i],
                                        Value = arrVariableValues[i],
                                        Version = "Approver 10",
                                    };

                                    db.tblVariableDatas.Add(newVariable);


                                    Logger.Info("Accessed DB, Contract Variables Saved");
                                }

                                catch { }
                            }

                            contract.ContractDraft = content;
                        }
                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Approved",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        Logger.Info("Accessed DB, Checking Contract Details:Further Approvers Not Found");
                        contract.Status = "Approved";
                        contract.NextApprover = 0.ToString();
                        Logger.Info("Accessed DB, Contract Approved");
                        string Approver = "";
                        Approver = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string Approveremail = "";
                        Approveremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }

                        string VendorName = Contract[4];
                        string[] To = { Approveremail };


                        string Subject = contract.ContractName + " is Approved and ready to Sign ";
                        string UrL = ApplicationLink + "/Contract/Details/" + ID;
                        string Paragraph = "The contract details as mentioned below is approved and ready to sign.<br/>Please note: Contract will not be in effect until contract is signed and uploaded in system.<br/><br/>";
                        string Body = "Dear " + Approver + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(To, Subject, Body);
                    }

                    try
                    {
                        string LogChangeFrom = "";
                        string LogChangeTo = "";
                        var Deligation = /*from tblDeligationMatrix in*/ db.tblDeligationMatrices.Select(x => new { x.DeligateFrom, x.DeligateTo, x.StartDate, x.EndDate, x.ID }); //select tblDeligationMatrix;
                        foreach (var r in Deligation)
                        {
                            int Found = 1;
                            DateTime startDate = DateTime.ParseExact(r.StartDate, "dd/MM/yyyy", null);
                            Found = DateTime.Compare(startDate, DateTime.Now);

                            if (Found <= 0)
                            {
                                Found = 1;
                                DateTime endDate = DateTime.ParseExact(r.EndDate, "dd/MM/yyyy", null);
                                Found = DateTime.Compare(endDate, DateTime.Now);
                                if (Found < 0)
                                {
                                    var DeligationID = r.ID;

                                    tblDeligationMatrix Deligate = db.tblDeligationMatrices.Find(DeligationID);
                                    db.tblDeligationMatrices.Remove(Deligate);

                                }
                                else
                                {
                                    try
                                    {
                                        //DeligationMethod(Convert.ToInt32(eachItem.DeligateFrom), Convert.ToInt32(eachItem.DeligateTo));
                                        if ((r.DeligateFrom == contract.Initiator) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                        {
                                            contract.Initiator = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Initiator in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom.ToString() == contract.NextApprover) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                        {
                                            contract.NextApprover = r.DeligateTo.ToString();
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Next Approver in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom.ToString() == contract.RejectedBy) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                        {
                                            contract.RejectedBy = r.DeligateTo.ToString();
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Rejected By in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver1ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver1Status == "Pending Approval" || contract.Approver1Status == "Rejected" || contract.Approver1Status == null))
                                        {
                                            contract.Approver1ID = (int)r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 1 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver2ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver2Status == "Pending Approval" || contract.Approver2Status == "Rejected" || contract.Approver2Status == null))
                                        {
                                            contract.Approver2ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 2 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver3ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver3Status == "Pending Approval" || contract.Approver3Status == "Rejected" || contract.Approver3Status == null))
                                        {
                                            contract.Approver3ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 3 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver4ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver4Status == "Pending Approval" || contract.Approver4Status == "Rejected" || contract.Approver4Status == null))
                                        {
                                            contract.Approver4ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 4 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver5ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver5Status == "Pending Approval" || contract.Approver5Status == "Rejected" || contract.Approver5Status == null))
                                        {
                                            contract.Approver5ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 5 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver6ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver6Status == "Pending Approval" || contract.Approver6Status == "Rejected" || contract.Approver6Status == null))
                                        {
                                            contract.Approver6ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 6 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver7ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver7Status == "Pending Approval" || contract.Approver7Status == "Rejected" || contract.Approver7Status == null))
                                        {
                                            contract.Approver7ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 7 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver8ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver8Status == "Pending Approval" || contract.Approver8Status == "Rejected" || contract.Approver8Status == null))
                                        {
                                            contract.Approver8ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 8 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver9ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver9Status == "Pending Approval" || contract.Approver9Status == "Rejected" || contract.Approver9Status == null))
                                        {
                                            contract.Approver9ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 9 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver10ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver10Status == "Pending Approval" || contract.Approver10Status == "Rejected" || contract.Approver10Status == null))
                                        {
                                            contract.Approver10ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 10 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                    }
                                    catch
                                    { }
                                }

                            }


                        }

                    
                    db.Entry(contract).State = EntityState.Modified;

                    
                    }
                    catch { }


                    db.SaveChanges();

                    Logger.Info("Accessed DB, Contract Approved and Saved");
                    string[] Result = new string[2];
                    Result[0] = "success";
                    Result[1] = contract.Status;
                    return Json(Result);

                }
                return Json("failure");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'ApproveModifiedContract' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public JsonResult AcceptChangesModifiedLastAprrover(int ID, string finalcontent)
        {
            Logger.Info("Attempt Contract AcceptChangesModifiedLastAprrover");
            try
            {
                string CurrentUser = User.Identity.Name.Split('|')[1];
                Logger.Info("Accessing DB for Saving the Contract Details");
                tblContractModification contract = db.tblContractModifications.Find(ID);

                contract.ContractDraft = finalcontent;
                //contract.InitiatorDraft = finalcontent;
                //if (contract.Approver1ID.ToString() == CurrentUser)
                //{
                //    contract.Approver1Draft = finalcontent;
                //}
                //else if (contract.Approver2ID.ToString() == CurrentUser)
                //{
                //    contract.Approver2Draft = finalcontent;
                //}
                //else if (contract.Approver3ID.ToString() == CurrentUser)
                //{
                //    contract.Approver3Draft = finalcontent;
                //}
                //else if (contract.Approver4ID.ToString() == CurrentUser)
                //{
                //    contract.Approver4Draft = finalcontent;
                //}
                //else if (contract.Approver5ID.ToString() == CurrentUser)
                //{
                //    contract.Approver5Draft = finalcontent;
                //}
                //else if (contract.Approver6ID.ToString() == CurrentUser)
                //{
                //    contract.Approver6Draft = finalcontent;
                //}
                //else if (contract.Approver7ID.ToString() == CurrentUser)
                //{
                //    contract.Approver7Draft = finalcontent;
                //}
                //else if (contract.Approver8ID.ToString() == CurrentUser)
                //{
                //    contract.Approver8Draft = finalcontent;
                //}
                //else if (contract.Approver9ID.ToString() == CurrentUser)
                //{
                //    contract.Approver9Draft = finalcontent;
                //}
                //else if (contract.Approver10ID.ToString() == CurrentUser)
                //{
                //    contract.Approver10Draft = finalcontent;
                //}
                db.Entry(contract).State = EntityState.Modified;
                db.SaveChanges();
                Logger.Info("Accessed DB, Details Saved to DB");
                return Json("success");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'AcceptChangesModifiedLastAprrover' Action HTTP POST Main exception");
                return Json("error");
            }
        }


        [HttpPost]
        public ActionResult AssignToPreviousUser(int ContractID, string Comments)
        {
            int CurrentUserID = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUserID = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Contract AssignToPreviousUser");
            try
            {
                string CurrentUser = User.Identity.Name.Split('|')[1];
                Logger.Info("Accessing DB for Assigning to Previous Users in Contract");
                tblContractMaster contract = db.tblContractMasters.Find(ContractID);

                Logger.Info("Accessed DB, Checking Contract Details: Checking Approver");
                if (contract.NextApprover.ToString() == CurrentUser)
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver Found");
                    if (contract.Approver1ID.ToString() == CurrentUser && contract.Approver1Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver1 Found");
                        contract.Approver1Status = "Rejected";
                        contract.Approver1Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                            contract.InitiatorStatus = "Rework";
                            contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver1 = "";
                        approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver1 + " to "+ Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);
                        //string Approver1 = "";
                        //Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        //approver1 = "";
                        //approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                        //string Approver1email = "";
                        //Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        //var tableVariable01 = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        //string[] contract01 = new string[5];

                        //foreach (var r in tableVariable01)
                        //{
                        //    contract01[0] = r.Variable;
                        //    contract01[1] = r.Value;
                        //    if (contract01[0] == "Vendor Name")
                        //    {
                        //        contract01[3] = "Vendor Name";
                        //        contract01[4] = contract01[1];
                        //    }

                        //}

                        //string vendorName01 = contract01[4];
                        //TO[0] = Approver1email;

                        //Subject = contract.ContractName + "  is Rejected.";
                        //string Url = ApplicationLink + " /Contract/Details/" + ContractID;
                        //Paragraph = "The contract details as mentioned below is Rejected by " + approver1 + " and Requested for ur Rework. < br/><br/>";
                        //Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + vendorName01 + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        //SMTP.Send(TO, Subject, Body);
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");
                        
                    }
                    else if (contract.Approver2ID.ToString() == CurrentUser && contract.Approver2Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver2 Found");
                        contract.Approver2Status = "Rejected";
                        contract.Approver2Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");
                        

                            contract.InitiatorStatus = "Rework";
                            contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver2 = "";
                        approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver2 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {


                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver2 = "";
                            approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver2 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                            Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");
                        
                       
                    }

                    else if (contract.Approver3ID.ToString() == CurrentUser && contract.Approver3Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver3 Found");
                        contract.Approver3Status = "Rejected";
                        contract.Approver3Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");
                        
                        
                            contract.InitiatorStatus = "Rework";
                            contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver3 = "";
                        approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver3 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);


                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver3 = "";
                            approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver3 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver3 = "";
                            approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver3 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                            Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");
                        
                    }
                    else if (contract.Approver4ID.ToString() == CurrentUser && contract.Approver4Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver4 Found");
                        contract.Approver4Status = "Rejected";
                        contract.Approver4Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");
                        

                        
                            contract.InitiatorStatus = "Rework";
                            contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver4 = "";
                        approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver4 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver4 = "";
                            approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver4 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver4 = "";
                            approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver4 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver4 = "";
                            approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver4 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");
                        
                       
                    }
                    else if (contract.Approver5ID.ToString() == CurrentUser && contract.Approver5Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver5 Found");
                        contract.Approver5Status = "Rejected";
                        contract.Approver5Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");
                       
                        
                            contract.InitiatorStatus = "Rework";
                            contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver5 = "";
                        approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver5 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);


                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver5 = "";
                            approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver5 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver5 = "";
                            approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver5 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver5 = "";
                            approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver5 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver4Status == "Approved")
                        {
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            approver5 = "";
                            approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver4;
                            VendorName = Contract[4];
                            string[] To = { Approver4email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver5 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");
                        
                    }
                    else if (contract.Approver6ID.ToString() == CurrentUser && contract.Approver6Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver6 Found");
                        contract.Approver6Status = "Rejected";
                        contract.Approver6Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");
                       

                        
                            contract.InitiatorStatus = "Rework";
                            contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver6 = "";
                        approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver6 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver6 = "";
                            approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver6 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver6 = "";
                            approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver6 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver6 = "";
                            approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver6 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver4Status == "Approved")
                        {
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            approver6 = "";
                            approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver4;
                            VendorName = Contract[4];
                            string[] To = { Approver4email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver6 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver5Status == "Approved")
                        {
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            approver6 = "";
                            approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver5;
                            VendorName = Contract[4];
                            string[] To = { Approver5email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver6 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");
                       
                    }

                    else if (contract.Approver7ID.ToString() == CurrentUser && contract.Approver7Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver7 Found");
                        contract.Approver7Status = "Rejected";
                        contract.Approver7Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");
                       

                        
                            contract.InitiatorStatus = "Rework";
                            contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver7 = "";
                        approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver7 = "";
                            approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver7 = "";
                            approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver7 = "";
                            approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver4Status == "Approved")
                        {
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            approver7 = "";
                            approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver4;
                            VendorName = Contract[4];
                            string[] To = { Approver4email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver5Status == "Approved")
                        {
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            approver7 = "";
                            approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver5;
                            VendorName = Contract[4];
                            string[] To = { Approver5email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver6Status == "Approved")
                        {
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            approver7 = "";
                            approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver6;
                            VendorName = Contract[4];
                            string[] To = { Approver6email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");
                       
                    }

                    else if (contract.Approver8ID.ToString() == CurrentUser && contract.Approver8Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver8 Found");
                        contract.Approver8Status = "Rejected";
                        contract.Approver8Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");
                       

                        
                            contract.InitiatorStatus = "Rework";
                            contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver8 = "";
                        approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver4Status == "Approved")
                        {
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver4;
                            VendorName = Contract[4];
                            string[] To = { Approver4email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver5Status == "Approved")
                        {
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver5;
                            VendorName = Contract[4];
                            string[] To = { Approver5email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver6Status == "Approved")
                        {
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver6;
                            VendorName = Contract[4];
                            string[] To = { Approver6email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver7Status == "Approved")
                        {
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver7;
                            VendorName = Contract[4];
                            string[] To = { Approver7email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");
                       
                    }
                    else if (contract.Approver9ID.ToString() == CurrentUser && contract.Approver9Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver9 Found");
                        contract.Approver9Status = "Rejected";
                        contract.Approver9Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");
                       

                        
                            contract.InitiatorStatus = "Rework";
                            contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver9 = "";
                        approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver4Status == "Approved")
                        {
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver4;
                            VendorName = Contract[4];
                            string[] To = { Approver4email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver5Status == "Approved")
                        {
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver5;
                            VendorName = Contract[4];
                            string[] To = { Approver5email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver6Status == "Approved")
                        {
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver6;
                            VendorName = Contract[4];
                            string[] To = { Approver6email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver7Status == "Approved")
                        {
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver7;
                            VendorName = Contract[4];
                            string[] To = { Approver7email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver8Status == "Approved")
                        {
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver8;
                            VendorName = Contract[4];
                            string[] To = { Approver8email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");
                       
                    }
                    else if (contract.Approver10ID.ToString() == CurrentUser && contract.Approver10Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver10 Found");
                        contract.Approver10Status = "Rejected";
                        contract.Approver10Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");
                       

                        
                            contract.InitiatorStatus = "Rework";
                            contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver10 = "";
                        approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is Rejected by " + approver10 + " and Requested for Your Rework.<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver4Status == "Approved")
                        {
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver4;
                            VendorName = Contract[4];
                            string[] To = { Approver4email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver5Status == "Approved")
                        {
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver5;
                            VendorName = Contract[4];
                            string[] To = { Approver5email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver6Status == "Approved")
                        {
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver6;
                            VendorName = Contract[4];
                            string[] To = { Approver6email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver7Status == "Approved")
                        {
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver7;
                            VendorName = Contract[4];
                            string[] To = { Approver7email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver8Status == "Approved")
                        {
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver8;
                            VendorName = Contract[4];
                            string[] To = { Approver8email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver9Status == "Approved")
                        {
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver9;
                            VendorName = Contract[4];
                            string[] To = { Approver9email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");
                       
                    }
                    contract.Status = "Rejected";
                    contract.RejectedBy = CurrentUser;

                    try
                    {
                        string LogChangeFrom = "";
                        string LogChangeTo = "";
                        var Deligation = /*from tblDeligationMatrix in*/ db.tblDeligationMatrices.Select(x => new { x.DeligateFrom, x.DeligateTo, x.StartDate, x.EndDate, x.ID }); //select tblDeligationMatrix;
                        foreach (var r in Deligation)
                        {
                            int Found = 1;
                            DateTime startDate = DateTime.ParseExact(r.StartDate, "dd/MM/yyyy", null);
                            Found = DateTime.Compare(startDate, DateTime.Now);

                            if (Found <= 0)
                            {
                                Found = 1;
                                DateTime endDate = DateTime.ParseExact(r.EndDate, "dd/MM/yyyy", null);
                                Found = DateTime.Compare(endDate, DateTime.Now);
                                if (Found < 0)
                                {
                                    var DID = r.ID;

                                    tblDeligationMatrix Deligate = db.tblDeligationMatrices.Find(DID);
                                    db.tblDeligationMatrices.Remove(Deligate);

                                }
                                else
                                {
                                    try
                                    {
                                        //DeligationMethod(Convert.ToInt32(eachItem.DeligateFrom), Convert.ToInt32(eachItem.DeligateTo));
                                        if ((r.DeligateFrom == contract.Initiator) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                        {
                                            contract.Initiator = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Initiator in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom.ToString() == contract.NextApprover) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                        {
                                            contract.NextApprover = r.DeligateTo.ToString();
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Next Approver in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom.ToString() == contract.RejectedBy) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                        {
                                            contract.RejectedBy = r.DeligateTo.ToString();
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Rejected By in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver1ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver1Status == "Pending Approval" || contract.Approver1Status == "Rejected" || contract.Approver1Status == null))
                                        {
                                            contract.Approver1ID = (int)r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 1 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver2ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver2Status == "Pending Approval" || contract.Approver2Status == "Rejected" || contract.Approver2Status == null))
                                        {
                                            contract.Approver2ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 2 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver3ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver3Status == "Pending Approval" || contract.Approver3Status == "Rejected" || contract.Approver3Status == null))
                                        {
                                            contract.Approver3ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 3 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver4ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver4Status == "Pending Approval" || contract.Approver4Status == "Rejected" || contract.Approver4Status == null))
                                        {
                                            contract.Approver4ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 4 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver5ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver5Status == "Pending Approval" || contract.Approver5Status == "Rejected" || contract.Approver5Status == null))
                                        {
                                            contract.Approver5ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 5 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver6ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver6Status == "Pending Approval" || contract.Approver6Status == "Rejected" || contract.Approver6Status == null))
                                        {
                                            contract.Approver6ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 6 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver7ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver7Status == "Pending Approval" || contract.Approver7Status == "Rejected" || contract.Approver7Status == null))
                                        {
                                            contract.Approver7ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 7 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver8ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver8Status == "Pending Approval" || contract.Approver8Status == "Rejected" || contract.Approver8Status == null))
                                        {
                                            contract.Approver8ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 8 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver9ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver9Status == "Pending Approval" || contract.Approver9Status == "Rejected" || contract.Approver9Status == null))
                                        {
                                            contract.Approver9ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 9 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver10ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver10Status == "Pending Approval" || contract.Approver10Status == "Rejected" || contract.Approver10Status == null))
                                        {
                                            contract.Approver10ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 10 in Contract (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }

                                    }
                                    catch
                                    { }
                                  
                                }

                            }


                        }



                        db.Entry(contract).State = EntityState.Modified;

                    }
                    catch { }
                    db.SaveChanges();
                    Logger.Info("Accessed DB, Contract Rejected");

                    return Json("success");
                }

                return Json("failure");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'AssignToPreviousUser' Action HTTP POST Main exception");
                return Json("error");
            }
        }


        [HttpPost]
        public ActionResult ModifiedAssignToPreviousUser(int ContractID, string Comments)
        {
            int CurrentUserID = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUserID = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Modified Contract ModifiedAssignToPreviousUser");
            try
            {
                string CurrentUser = User.Identity.Name.Split('|')[1];
                Logger.Info("Accessing DB for Assigning to Previous Users in Modified Contract");
                tblContractModification contract = db.tblContractModifications.Find(ContractID);

                Logger.Info("Accessed DB, Checking Modified Contract Details: Checking Approver");
                if (contract.NextApprover.ToString() == CurrentUser)
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Approver Found");
                    if (contract.Approver1ID.ToString() == CurrentUser && contract.Approver1Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver1 Found");
                        contract.Approver1Status = "Rejected";
                        contract.Approver1Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");

                        contract.InitiatorStatus = "Rework";
                        contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver1 = "";
                        approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver1 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);
                        //string Approver1 = "";
                        //Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        //approver1 = "";
                        //approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                        //string Approver1email = "";
                        //Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        //var tableVariable01 = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        //string[] contract01 = new string[5];

                        //foreach (var r in tableVariable01)
                        //{
                        //    contract01[0] = r.Variable;
                        //    contract01[1] = r.Value;
                        //    if (contract01[0] == "Vendor Name")
                        //    {
                        //        contract01[3] = "Vendor Name";
                        //        contract01[4] = contract01[1];
                        //    }

                        //}

                        //string vendorName01 = contract01[4];
                        //TO[0] = Approver1email;

                        //Subject = contract.ContractName + "  is Rejected.";
                        //string Url = ApplicationLink + " /Contract/Details/" + ContractID;
                        //Paragraph = "The contract details as mentioned below is Rejected by " + approver1 + " and Requested for ur Rework. < br/><br/>";
                        //Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + vendorName01 + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        //SMTP.Send(TO, Subject, Body);
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");

                    }
                    else if (contract.Approver2ID.ToString() == CurrentUser && contract.Approver2Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver2 Found");
                        contract.Approver2Status = "Rejected";
                        contract.Approver2Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");


                        contract.InitiatorStatus = "Rework";
                        contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver2 = "";
                        approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver2 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {


                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver2 = "";
                            approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver2 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");


                    }
                    else if (contract.Approver3ID.ToString() == CurrentUser && contract.Approver3Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver3 Found");
                        contract.Approver3Status = "Rejected";
                        contract.Approver3Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");


                        contract.InitiatorStatus = "Rework";
                        contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver3 = "";
                        approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver3 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);


                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver3 = "";
                            approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver3 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver3 = "";
                            approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver3 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");

                    }
                    else if (contract.Approver4ID.ToString() == CurrentUser && contract.Approver4Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver4 Found");
                        contract.Approver4Status = "Rejected";
                        contract.Approver4Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");



                        contract.InitiatorStatus = "Rework";
                        contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver4 = "";
                        approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver4 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver4 = "";
                            approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver4 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver4 = "";
                            approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver4 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver4 = "";
                            approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver4 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");


                    }
                    else if (contract.Approver5ID.ToString() == CurrentUser && contract.Approver5Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver5 Found");
                        contract.Approver5Status = "Rejected";
                        contract.Approver5Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");


                        contract.InitiatorStatus = "Rework";
                        contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver5 = "";
                        approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver5 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);


                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver5 = "";
                            approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver5 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver5 = "";
                            approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver5 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver5 = "";
                            approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver5 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver4Status == "Approved")
                        {
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            approver5 = "";
                            approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver4;
                            VendorName = Contract[4];
                            string[] To = { Approver4email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver5 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");

                    }
                    else if (contract.Approver6ID.ToString() == CurrentUser && contract.Approver6Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver6 Found");
                        contract.Approver6Status = "Rejected";
                        contract.Approver6Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");



                        contract.InitiatorStatus = "Rework";
                        contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver6 = "";
                        approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver6 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver6 = "";
                            approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver6 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver6 = "";
                            approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver6 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver6 = "";
                            approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver6 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver4Status == "Approved")
                        {
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            approver6 = "";
                            approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver4;
                            VendorName = Contract[4];
                            string[] To = { Approver4email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver6 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver5Status == "Approved")
                        {
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            approver6 = "";
                            approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver5;
                            VendorName = Contract[4];
                            string[] To = { Approver5email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver6 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");

                    }

                    else if (contract.Approver7ID.ToString() == CurrentUser && contract.Approver7Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver7 Found");
                        contract.Approver7Status = "Rejected";
                        contract.Approver7Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");



                        contract.InitiatorStatus = "Rework";
                        contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver7 = "";
                        approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver7 = "";
                            approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver7 = "";
                            approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver7 = "";
                            approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver4Status == "Approved")
                        {
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            approver7 = "";
                            approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver4;
                            VendorName = Contract[4];
                            string[] To = { Approver4email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver5Status == "Approved")
                        {
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            approver7 = "";
                            approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver5;
                            VendorName = Contract[4];
                            string[] To = { Approver5email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver6Status == "Approved")
                        {
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            approver7 = "";
                            approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver6;
                            VendorName = Contract[4];
                            string[] To = { Approver6email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver7 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");

                    }

                    else if (contract.Approver8ID.ToString() == CurrentUser && contract.Approver8Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver8 Found");
                        contract.Approver8Status = "Rejected";
                        contract.Approver8Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");



                        contract.InitiatorStatus = "Rework";
                        contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver8 = "";
                        approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver4Status == "Approved")
                        {
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver4;
                            VendorName = Contract[4];
                            string[] To = { Approver4email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver5Status == "Approved")
                        {
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver5;
                            VendorName = Contract[4];
                            string[] To = { Approver5email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver6Status == "Approved")
                        {
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver6;
                            VendorName = Contract[4];
                            string[] To = { Approver6email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver7Status == "Approved")
                        {
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            approver8 = "";
                            approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver7;
                            VendorName = Contract[4];
                            string[] To = { Approver7email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver8 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");

                    }
                    else if (contract.Approver9ID.ToString() == CurrentUser && contract.Approver9Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver9 Found");
                        contract.Approver9Status = "Rejected";
                        contract.Approver9Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");



                        contract.InitiatorStatus = "Rework";
                        contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver9 = "";
                        approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver4Status == "Approved")
                        {
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver4;
                            VendorName = Contract[4];
                            string[] To = { Approver4email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver5Status == "Approved")
                        {
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver5;
                            VendorName = Contract[4];
                            string[] To = { Approver5email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver6Status == "Approved")
                        {
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver6;
                            VendorName = Contract[4];
                            string[] To = { Approver6email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver7Status == "Approved")
                        {
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver7;
                            VendorName = Contract[4];
                            string[] To = { Approver7email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver8Status == "Approved")
                        {
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            approver9 = "";
                            approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver8;
                            VendorName = Contract[4];
                            string[] To = { Approver8email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver9 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");

                    }
                    else if (contract.Approver10ID.ToString() == CurrentUser && contract.Approver10Status == "Pending Approval")
                    {
                        Logger.Info("Accessed DB, Checking Contract Details: Current User Approver10 Found");
                        contract.Approver10Status = "Rejected";
                        contract.Approver10Comments = Comments;

                        Logger.Info("Accessing DB for Saving the Contract Log Details");
                        tblContractLog log = new tblContractLog
                        {
                            LogContractUID = contract.ContractID,
                            ModifiedBy = CurrentUserID.ToString() + " - " + CurrentUserName,
                            LogActivity = "Rejected",
                            ChangedFrom = "-",
                            ChangedTo = "-",
                            DateandTime = DateTime.Now.ToString()
                        };
                        db.tblContractLogs.Add(log);
                        db.SaveChanges();
                        Logger.Info("Accessed DB, Contract Log Record Saved");



                        contract.InitiatorStatus = "Rework";
                        contract.NextApprover = contract.Initiator.ToString();

                        string Initiator = "";
                        Initiator = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeName).First();
                        string approver10 = "";
                        approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                        string Initiatoremail = "";
                        Initiatoremail = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Initiator) select tblUserMaster.UserEmployeeEmail).First();
                        var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                        string[] Contract = new string[5];

                        foreach (var r in TableVariable)
                        {
                            Contract[0] = r.Variable;
                            Contract[1] = r.Value;
                            if (Contract[0] == "Vendor Name")
                            {
                                Contract[3] = "Vendor Name";
                                Contract[4] = Contract[1];
                            }

                        }
                        string employeename = Initiator;
                        string VendorName = Contract[4];
                        string[] TO = { Initiatoremail };
                        string Subject = contract.ContractName + " is Rejected";
                        string UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                        string Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                        string Body = "Dear " + Initiator + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                        SMTP.Send(TO, Subject, Body);

                        if (contract.Approver1Status == "Approved")
                        {
                            string Approver1 = "";
                            Approver1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver1email = "";
                            Approver1email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver1ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver1;
                            VendorName = Contract[4];
                            string[] To = { Approver1email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is Rejected by " + approver10 + " and Requested for Your Rework.<br/><br/>";
                            Body = "Dear " + Approver1 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver2Status == "Approved")
                        {
                            string Approver2 = "";
                            Approver2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver2email = "";
                            Approver2email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver2ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver2;
                            VendorName = Contract[4];
                            string[] To = { Approver2email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver2 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver3Status == "Approved")
                        {
                            string Approver3 = "";
                            Approver3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver3email = "";
                            Approver3email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver3ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver3;
                            VendorName = Contract[4];
                            string[] To = { Approver3email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver3 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver4Status == "Approved")
                        {
                            string Approver4 = "";
                            Approver4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver4email = "";
                            Approver4email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver4ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver4;
                            VendorName = Contract[4];
                            string[] To = { Approver4email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver4 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver5Status == "Approved")
                        {
                            string Approver5 = "";
                            Approver5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver5email = "";
                            Approver5email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver5ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver5;
                            VendorName = Contract[4];
                            string[] To = { Approver5email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver5 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver6Status == "Approved")
                        {
                            string Approver6 = "";
                            Approver6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver6email = "";
                            Approver6email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver6ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver6;
                            VendorName = Contract[4];
                            string[] To = { Approver6email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver6 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver7Status == "Approved")
                        {
                            string Approver7 = "";
                            Approver7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver7email = "";
                            Approver7email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver7ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver7;
                            VendorName = Contract[4];
                            string[] To = { Approver7email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver7 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver8Status == "Approved")
                        {
                            string Approver8 = "";
                            Approver8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver8email = "";
                            Approver8email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver8ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver8;
                            VendorName = Contract[4];
                            string[] To = { Approver8email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver8 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        if (contract.Approver9Status == "Approved")
                        {
                            string Approver9 = "";
                            Approver9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                            approver10 = "";
                            approver10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                            string Approver9email = "";
                            Approver9email = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == contract.Approver9ID) select tblUserMaster.UserEmployeeEmail).First();
                            TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                            Contract = new string[5];

                            foreach (var r in TableVariable)
                            {
                                Contract[0] = r.Variable;
                                Contract[1] = r.Value;
                                if (Contract[0] == "Vendor Name")
                                {
                                    Contract[3] = "Vendor Name";
                                    Contract[4] = Contract[1];
                                }

                            }
                            employeename = Approver9;
                            VendorName = Contract[4];
                            string[] To = { Approver9email };
                            Subject = contract.ContractName + " is Rejected";
                            UrL = ApplicationLink + "/Contract/Details/" + ContractID;
                            Paragraph = "The contract details as mentioned below is sent for revision by " + approver10 + " to " + Initiator + " .<br/><br/>";
                            Body = "Dear " + Approver9 + ",<br/><br/>" + Paragraph + "<html><head><style>table,td{border:1px solid black;},table>td{width:70%;} table{border-collapse:collapse;}</style></head><body><table style='width:70%;' cellpadding='5'><tr><td><b> Contract Name </b></td><td>" + contract.ContractName + "</td></tr><tr><td><b> Contract Unique ID </b></td><td>" + contract.ContractID + "</td></tr><tr><td><b> Vendor</b></td><td>" + VendorName + "</td></tr><tr><td><b> Contract Link </b></td><td><a href=" + UrL + ">Review</a></td></tr></table><br/><br/>Regards,<br/><b>System Admin</b><br/><b> Contract Management System</b></body></html>";
                            SMTP.Send(To, Subject, Body);
                        }
                        Logger.Info("Accessed DB, Checking Contract Details: Initiator is Assigned");

                    }
                    contract.Status = "Rejected";
                    contract.RejectedBy = CurrentUser;

                    try
                    {
                        string LogChangeFrom = "";
                        string LogChangeTo = "";
                        var Deligation = /*from tblDeligationMatrix in*/ db.tblDeligationMatrices.Select(x => new { x.DeligateFrom, x.DeligateTo, x.StartDate, x.EndDate, x.ID }); //select tblDeligationMatrix;
                        foreach (var r in Deligation)
                        {
                            int Found = 1;
                            DateTime startDate = DateTime.ParseExact(r.StartDate, "dd/MM/yyyy", null);
                            Found = DateTime.Compare(startDate, DateTime.Now);

                            if (Found <= 0)
                            {
                                Found = 1;
                                DateTime endDate = DateTime.ParseExact(r.EndDate, "dd/MM/yyyy", null);
                                Found = DateTime.Compare(endDate, DateTime.Now);
                                if (Found < 0)
                                {
                                    var DID = r.ID;

                                    tblDeligationMatrix Deligate = db.tblDeligationMatrices.Find(DID);
                                    db.tblDeligationMatrices.Remove(Deligate);

                                }
                                else
                                {
                                    try
                                    {
                                        //DeligationMethod(Convert.ToInt32(eachItem.DeligateFrom), Convert.ToInt32(eachItem.DeligateTo));
                                        if ((r.DeligateFrom == contract.Initiator) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                        {
                                            contract.Initiator = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Initiator in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom.ToString() == contract.NextApprover) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                        {
                                            contract.NextApprover = r.DeligateTo.ToString();
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Next Approver in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom.ToString() == contract.RejectedBy) && (contract.Status == "Pending Approval" || contract.Status == "Rejected"))
                                        {
                                            contract.RejectedBy = r.DeligateTo.ToString();
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Rejected By in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver1ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver1Status == "Pending Approval" || contract.Approver1Status == "Rejected" || contract.Approver1Status == null))
                                        {
                                            contract.Approver1ID = (int)r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 1 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver2ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver2Status == "Pending Approval" || contract.Approver2Status == "Rejected" || contract.Approver2Status == null))
                                        {
                                            contract.Approver2ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 2 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver3ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver3Status == "Pending Approval" || contract.Approver3Status == "Rejected" || contract.Approver3Status == null))
                                        {
                                            contract.Approver3ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 3 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver4ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver4Status == "Pending Approval" || contract.Approver4Status == "Rejected" || contract.Approver4Status == null))
                                        {
                                            contract.Approver4ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 4 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver5ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver5Status == "Pending Approval" || contract.Approver5Status == "Rejected" || contract.Approver5Status == null))
                                        {
                                            contract.Approver5ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 5 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver6ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver6Status == "Pending Approval" || contract.Approver6Status == "Rejected" || contract.Approver6Status == null))
                                        {
                                            contract.Approver6ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 6 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver7ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver7Status == "Pending Approval" || contract.Approver7Status == "Rejected" || contract.Approver7Status == null))
                                        {
                                            contract.Approver7ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 7 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver8ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver8Status == "Pending Approval" || contract.Approver8Status == "Rejected" || contract.Approver8Status == null))
                                        {
                                            contract.Approver8ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 8 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver9ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver9Status == "Pending Approval" || contract.Approver9Status == "Rejected" || contract.Approver9Status == null))
                                        {
                                            contract.Approver9ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 9 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                        if ((r.DeligateFrom == contract.Approver10ID) && (contract.Status == "Pending Approval" || contract.Status == "Rejected") && (contract.Approver10Status == "Pending Approval" || contract.Approver10Status == "Rejected" || contract.Approver10Status == null))
                                        {
                                            contract.Approver10ID = r.DeligateTo;
                                            tblDeligationLog logs = new tblDeligationLog();
                                            logs.LogDeligationUID = contract.ContractID;
                                            logs.ModifiedBy = "SYSTEM";
                                            logs.LogActivity = "Deligating Approver 10 in Contract Modification (" + contract.ContractID + ")";
                                            logs.ChangedFrom = r.DeligateFrom.ToString();
                                            logs.ChangedTo = r.DeligateTo.ToString();
                                            logs.DateandTime = DateTime.Now.ToString();
                                            db.tblDeligationLogs.Add(logs);
                                        }
                                    }
                                    catch
                                    { }
                                }

                            }

                        }



                        db.Entry(contract).State = EntityState.Modified;

                    }
                    catch { }

                    db.SaveChanges();
                    Logger.Info("Accessed DB, Contract Rejected");

                    return Json("success");
                }

                return Json("failure");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'ModifiedAssignToPreviousUser' Action HTTP POST Main exception");
                return Json("error");
            }
        }




        [HttpPost]
        public ActionResult GetApproversBasedOnDeptAndSubDept(string ContractDept, string ContractSubDept, int LevelNumber, string Type, string Modified)
        {
            Logger.Info("Attempt Contract GetApproversBasedOnClusterAndFunction");
            try
            {
                int CurrentUser = 0;
                try
                {
                    CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                }
                catch { }

                var EmployeePlant = "";
                EmployeePlant = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == CurrentUser) select tblUserMaster.UserPlant).First();

                
                //if(Type == "From Template" || Type == "Upload Existing Contract")
                //{
                //    if (Modified == "ContractModified")
                //    {
                //        Logger.Info("Accessed DB, Checking ApprovalMaster Details: Department and SubDepartment match");
                //        var ApproverList = from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.Department == ContractDept).
                //                    Where(x => x.SubDepartment == ContractSubDept).Where(x => x.WorkflowType == "Contract - Modified").Where(x => x.ApprovalLevel == LevelNumber)
                //                           select tblApprovalMaster.EMPID;
                //        Logger.Info("Accessed DB, Checking UserMaster Details: Department and SubDepartment Found");
                //        return Json(ApproverList);
                //    }
                //    else
                //    {
                //        Logger.Info("Accessed DB, Checking ApprovalMaster Details: Department and SubDepartment match");
                //        var ApproverList = from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.Department == ContractDept).
                //                    Where(x => x.SubDepartment == ContractSubDept).Where(x => x.WorkflowType == "Contract").Where(x => x.ApprovalLevel == LevelNumber)
                //                           select tblApprovalMaster.EMPID;
                //        Logger.Info("Accessed DB, Checking UserMaster Details: Department and SubDepartment Found");
                //        return Json(ApproverList);
                //    }
                //}
                //else if (Type == "Fresh Contract")
                //{
                    Logger.Info("Accessed DB, Checking ApprovalMaster Details: Department and SubDepartment match");
                    var ApproverList = from tblApprovalMaster in db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.Department == ContractDept).
                                Where(x => x.SubDepartment == ContractSubDept).Where(x => x.WorkflowType == "Contract").Where(x => x.ApprovalLevel == LevelNumber)
                                       select tblApprovalMaster.EMPID;
                    Logger.Info("Accessed DB, Checking UserMaster Details: Department and SubDepartment Found");
                    return Json(ApproverList);
                //}

            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetApproversBasedOnDeptAndSubDept' Action HTTP POST Main exception");
                return Json("error");
            }
        }



        [HttpPost]
        public ActionResult GetPreviousUsers(int id)
        {
            Logger.Info("Attempt Contract GetPreviousUsers");
            try
            {
                Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                string[] Users = new string[0];
                var result = /*from tblContractMaster in*/ db.tblContractMasters.Where(x => x.ContractID == id).Select(x => new
                {
                    x.InitiatorStatus,
                    x.Approver9Status,
                    x.Approver8Status,
                    x.Approver7Status,
                    x.Approver6Status,
                    x.Approver5Status,
                    x.Approver4Status,
                    x.Approver3Status,
                    x.Approver2Status,
                    x.Approver1Status,
                    x.Approver10Status
                }); //select tblContractMaster;

                foreach (var item in result)
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Initiator Status");
                    if (item.InitiatorStatus == "Initiated")
                    {
                        Array.Resize(ref Users, Users.Length + 1);

                        Users[Users.Length - 1] = "Initiator";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Initiator Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver1 Status");
                    if (item.Approver1Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 1";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver1 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver2 Status");
                    if (item.Approver2Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 2";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver2 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver3 Status");
                    if (item.Approver3Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 3";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver3 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver4 Status");
                    if (item.Approver4Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 4";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver4 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver5 Status");
                    if (item.Approver5Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 5";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver5 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver6 Status");
                    if (item.Approver6Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 6";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver6 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver7 Status");
                    if (item.Approver7Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 7";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver7 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver8 Status");
                    if (item.Approver8Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 8";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver8 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver9 Status");
                    if (item.Approver9Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 9";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver9 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver10 Status");
                    if (item.Approver10Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 10";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver10 Found");
                    }

                }

                return Json(Users);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetPreviousUsers' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public ActionResult GetModifiedPreviousUsers(int id)
        {
            Logger.Info("Attempt Modified Contract GetModifiedPreviousUsers");
            try
            {
                Logger.Info("Accessed DB, Checking Modified Contract Details: ContractID match");
                string[] Users = new string[0];
                var result = /*from tblContractModification in*/ db.tblContractModifications.Where(x => x.ContractID == id).Select(x => new
                {
                    x.InitiatorStatus,
                    x.Approver9Status,
                    x.Approver8Status,
                    x.Approver7Status,
                    x.Approver6Status,
                    x.Approver5Status,
                    x.Approver4Status,
                    x.Approver3Status,
                    x.Approver2Status,
                    x.Approver1Status,
                    x.Approver10Status
                }); //select tblContractMaster;
                foreach (var item in result)
                {
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Initiator Status");
                    if (item.InitiatorStatus == "Initiated")
                    {
                        Array.Resize(ref Users, Users.Length + 1);

                        Users[Users.Length - 1] = "Initiator";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Initiator Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver1 Status");
                    if (item.Approver1Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 1";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver1 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver2 Status");
                    if (item.Approver2Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 2";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver2 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver3 Status");
                    if (item.Approver3Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 3";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver3 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver4 Status");
                    if (item.Approver4Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 4";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver4 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver5 Status");
                    if (item.Approver5Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 5";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver5 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver6 Status");
                    if (item.Approver6Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 6";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver6 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver7 Status");
                    if (item.Approver7Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 7";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver7 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver8 Status");
                    if (item.Approver8Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 8";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver8 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver9 Status");
                    if (item.Approver9Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 9";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver9 Found");
                    }
                    Logger.Info("Accessed DB, Checking Contract Details: Checking Contract Approver10 Status");
                    if (item.Approver10Status == "Approved")
                    {
                        Array.Resize(ref Users, Users.Length + 1);
                        Users[Users.Length - 1] = "Approver 10";
                        Logger.Info("Accessed DB, Checking Contract Details: Contract Approver10 Found");
                    }

                }

                return Json(Users);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetModifiedPreviousUsers' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public ActionResult GetVendorName()
        {
            Logger.Info("Attempt Contract GetVendorName");
            try
            {
                Logger.Info("Accessing DB for Vendor Details");
                var VendorName = from tblVendorMaster in db.tblVendorMasters select tblVendorMaster.VendorVendorName;
                Logger.Info("Accessing DB, Checking for Vendor Details: Vendor Name List Found");
                return Json(VendorName);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetVendorName' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public ActionResult GetVendorCIN()
        {
            Logger.Info("Attempt Contract GetVendorCIN");
            try
            {
                Logger.Info("Accessing DB for Vendor Details");
                var VendorCIN = from tblVendorMaster in db.tblVendorMasters select tblVendorMaster.VendorCorporateIdentificationNumber;
                Logger.Info("Accessing DB, Checking for Vendor Details: Vendor CIN List Found");
                return Json(VendorCIN);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetVendorCIN' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]

        public ActionResult GetVendorDetails(string VendorName)
        {
            Logger.Info("Attempt Contract GetVendorDetails");
            try
            {

                Logger.Info("Accessing DB for Vendor Details : Vendor Name match");
                string[] Vendor = new string[10];
                var VendorDetails = from tblVendorMaster in db.tblVendorMasters.Where(x => x.VendorVendorName == VendorName) select tblVendorMaster;
                foreach (var item in VendorDetails)
                {
                    Vendor[0] = "success";
                    Vendor[1] = item.VendorVendorName;
                    Vendor[2] = item.VendorCorporateIdentificationNumber;
                    Vendor[3] = item.VendorAuthorisedSignatory;
                    Vendor[4] = item.VendorRegisteredAddress;
                    Vendor[5] = item.VendorBranchOffice1;
                    Vendor[6] = item.VendorBranchOffice2;
                    Vendor[7] = item.VendorBranchOffice3;
                    Vendor[8] = item.VendorBranchOffice4;
                    Vendor[9] = item.VendorBranchOffice5;
                }
                Logger.Info("Accessing DB for Vendor Details : Vendor Details Found");
                return Json(Vendor);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetVendorDetails' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]

        public ActionResult GetVendorDetailsOnCIN(string VendorCIN)
        {
            Logger.Info("Attempt Contract GetVendorDetailsOnCIN");
            try
            {
                string[] Vendor = new string[10];
                Logger.Info("Accessing DB for Vendor Details : Vendor CIN match");
                var VendorDetails = from tblVendorMaster in db.tblVendorMasters.Where(x => x.VendorCorporateIdentificationNumber == VendorCIN) select tblVendorMaster;
                foreach (var item in VendorDetails)
                {
                    Vendor[0] = "success";
                    Vendor[1] = item.VendorVendorName;
                    Vendor[2] = item.VendorCorporateIdentificationNumber;
                    Vendor[3] = item.VendorAuthorisedSignatory;
                    Vendor[4] = item.VendorRegisteredAddress;
                    Vendor[5] = item.VendorBranchOffice1;
                    Vendor[6] = item.VendorBranchOffice2;
                    Vendor[7] = item.VendorBranchOffice3;
                    Vendor[8] = item.VendorBranchOffice4;
                    Vendor[9] = item.VendorBranchOffice5;
                }
                Logger.Info("Accessing DB for Vendor Details : Vendor Details Found");
                return Json(Vendor);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetVendorDetailsOnCIN' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        //[HttpPost]
        //public ActionResult UploadForSignOff(int ContractID)
        //{
        //    Logger.Info("Attempt Contract UploadForSignOff");
        //    try
        //    {
        //        Logger.Info("Accessing DB for Signing Off Contract");
        //        tblContractMaster contract = db.tblContractMasters.Find(ContractID);
        //        contract.Status = "In Effect";

        //        db.Entry(contract).State = EntityState.Modified;
        //        db.SaveChanges();
        //        Logger.Info("Accessed DB, Contract is Signed Off and is in InEffect");
        //        return Json("success");
        //    }
        //    catch (Exception Ex)
        //    {
        //        Logger.Error(Ex, "'Contract' Controller , 'UploadForSignOff' Action HTTP POST Main exception");
        //        return Json("error");
        //    }
        //}

        [HttpPost]
        public JsonResult UploadForSignOff(HttpPostedFileBase UploadSignOffContractFile, int ID)
        {
            int CurrentUser = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Contract UploadForSignOff");
            try
            {
                string FileExtens = Path.GetExtension(UploadSignOffContractFile.FileName);
                if (FileExtens.Contains("pdf") || FileExtens.Contains("doc") || FileExtens.Contains("docx") || FileExtens.Contains("txt") || FileExtens.Contains("xlx") || FileExtens.Contains("xlsx") || FileExtens.Contains("zip"))
                {
                    Logger.Info("Accessing DB for Uploading the Contract files");
                    tblContractMaster contract = db.tblContractMasters.Find(ID);

                    Logger.Info("Attempt Saving the Contract Files");
                    try
                    {

                        using (BinaryReader br = new BinaryReader(UploadSignOffContractFile.InputStream))
                        {
                            contract.UploadSignOffContractFile = br.ReadBytes(UploadSignOffContractFile.ContentLength);
                        }
                        contract.UploadSignOffContractFileName = Path.GetFileName(UploadSignOffContractFile.FileName);
                        contract.UploadSignOffContractFileType = UploadSignOffContractFile.ContentType;
                        contract.Status = "In Effect";
                        var tableVariableData = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                        string[] Duration = new string[4];

                        foreach (var r in tableVariableData)
                        {
                            Duration[0] = r.Variable;
                            Duration[1] = r.Value;
                            if (Duration[0] == "Duration from")
                            {
                                Duration[2] = Duration[1];
                            }
                            if (Duration[0] == "Duration to")
                            {
                                Duration[3] = Duration[1];
                            }
                        }

                        contract.InEffectFrom = Duration[2];
                        contract.InEffectTo = Duration[3];

                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'UploadForSignOff' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();
                    Logger.Info("Accessed DB, Contract Files Uploaded to DB for SignOff");

                    Logger.Info("Accessing DB for Saving the Contract Log Details");
                    tblContractLog log = new tblContractLog
                    {
                        LogContractUID = contract.ContractID,
                        ModifiedBy = CurrentUser.ToString() + " - " + CurrentUserName,
                        LogActivity = "Signed Contract",
                        ChangedFrom = "-",
                        ChangedTo = "-",
                        DateandTime = DateTime.Now.ToString()
                    };
                    db.tblContractLogs.Add(log);
                    db.SaveChanges();
                    Logger.Info("Accessed DB, Contract Log Record Saved");
                    return Json("success");
                }

                else
                {
                    return Json("error");
                }
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'UploadForSignOff' Action HTTP POST Main exception");
                return Json("error");
            }

        }

        [HttpPost]
        public JsonResult UploadModifiedForSignOff(HttpPostedFileBase UploadSignOffContractFile, int ID)
        {
            int CurrentUser = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Contract UploadModifiedForSignOff");
            try
            {
                string FileExtens = Path.GetExtension(UploadSignOffContractFile.FileName);
                if (FileExtens.Contains("pdf"))
                {
                    Logger.Info("Accessing DB for Uploading the Contract files");
                    tblContractModification contract = db.tblContractModifications.Find(ID);

                    Logger.Info("Attempt Saving the Contract Files");
                    try
                    {

                        using (BinaryReader br = new BinaryReader(UploadSignOffContractFile.InputStream))
                        {
                            contract.UploadSignOffContractFile = br.ReadBytes(UploadSignOffContractFile.ContentLength);
                        }
                        contract.UploadSignOffContractFileName = Path.GetFileName(UploadSignOffContractFile.FileName);
                        contract.UploadSignOffContractFileType = UploadSignOffContractFile.ContentType;
                        contract.Status = "In Effect";
                        var tableVariableData = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ID).Select(x => new { x.Value, x.Variable });
                        string[] Duration = new string[4];

                        foreach (var r in tableVariableData)
                        {
                            Duration[0] = r.Variable;
                            Duration[1] = r.Value;
                            if (Duration[0] == "Duration from")
                            {
                                Duration[2] = Duration[1];
                            }
                            if (Duration[0] == "Duration to")
                            {
                                Duration[3] = Duration[1];
                            }
                        }

                        contract.InEffectFrom = Duration[2];
                        contract.InEffectTo = Duration[3];

                    }
                    catch (Exception Ex)
                    {
                        Logger.Error(Ex, "'Contract' Controller , 'UploadModifiedForSignOff' Action HTTP POST Main exception");
                        return Json("error");
                    }

                    db.Entry(contract).State = EntityState.Modified;
                    db.SaveChanges();
                    Logger.Info("Accessed DB, Contract Files Uploaded to DB for SignOff");

                    Logger.Info("Accessing DB for Saving the Contract Log Details");
                    tblContractLog log = new tblContractLog
                    {
                        LogContractUID = contract.ContractID,
                        ModifiedBy = CurrentUser.ToString() + " - " + CurrentUserName,
                        LogActivity = "Signed Contract",
                        ChangedFrom = "-",
                        ChangedTo = "-",
                        DateandTime = DateTime.Now.ToString()
                    };
                    db.tblContractLogs.Add(log);
                    db.SaveChanges();
                    Logger.Info("Accessed DB, Contract Log Record Saved");
                    return Json("success");
                }

                else
                {
                    return Json("error");
                }
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'UploadModifiedForSignOff' Action HTTP POST Main exception");
                return Json("error");
            }

        }

        //--------------------------Integrated------------------------//
        [HttpPost]
        public ActionResult Contracttabledetails(int contractID)
        {
            Logger.Info("Attempt Contract Contracttabledetails");
            try
            {
                Logger.Info("Accessing DB for Contract Details : ContractID match");
                var TableContract = /*from tblContractMaster in*/ db.tblContractMasters.Where(x => x.ContractID == contractID).Select(x => new
                {
                    x.ContractName,
                    x.Approver10ID,
                    x.Approver1ID,
                    x.Approver2ID,
                    x.Approver3ID,
                    x.Approver4ID,
                    x.Approver5ID,
                    x.Approver6ID,
                    x.Approver7ID,
                    x.Approver8ID,
                    x.Approver9ID,
                    x.DateofInitiated,
                    x.Initiator,
                    x.Approver10ApprovedOn,
                    x.Approver1ApprovedOn,
                    x.Approver2ApprovedOn,
                    x.Approver3ApprovedOn,
                    x.Approver4ApprovedOn,
                    x.Approver5ApprovedOn,
                    x.Approver6ApprovedOn,
                    x.Approver7ApprovedOn,
                    x.Approver8ApprovedOn,
                    x.Approver9ApprovedOn
                }); //select tblContractMaster;

                string[] contract = new string[24];
                foreach (var r in TableContract)
                {
                    contract[0] = "success";
                    contract[1] = r.ContractName;
                    var App1 = "";
                    try
                    {
                        App1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    var App2 = "";

                    try
                    {
                        App2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                        var App3 = "";
                    try
                    {
                        App3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver3ID) select tblUserMaster.UserEmployeeName).First();

                    }
                    catch { }
                    var App4 = "";
                    try
                    {
                        App4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }

                    var App5 = "";
                    try
                    {
                        App5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }

                    var App6 = "";
                    try
                    {
                        App6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    var App7 = "";
                    try
                    {
                        App7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    var App8 = "";
                    try
                    {
                        App8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    var App9 = "";
                    try
                    {
                        App9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    var App10 = "";
                    try
                    {
                        App10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    var Ini = "";
                    try
                    {
                        Ini = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Initiator) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    contract[2] = r.Approver1ID.ToString() + " - " + App1;

                    contract[3] = r.Approver2ID.ToString() + " - " + App2;
                    contract[4] = r.Approver3ID.ToString() + " - " + App3;
                    contract[5] = r.Approver4ID.ToString() + " - " + App4;
                    contract[6] = r.Approver5ID.ToString() + " - " + App5;
                    contract[7] = r.Approver6ID.ToString() + " - " + App6;
                    contract[8] = r.Approver7ID.ToString() + " - " + App7;
                    contract[9] = r.Approver8ID.ToString() + " - " + App8;
                    contract[10] = r.Approver9ID.ToString() + " - " + App9;
                    contract[11] = r.Approver10ID.ToString() + " - " + App10;
                    contract[12] = r.Initiator.ToString() + " - " + Ini;
                    contract[13] = r.DateofInitiated.ToString();
                    contract[14] = r.Approver1ApprovedOn.ToString();
                    contract[15] = r.Approver2ApprovedOn.ToString();
                    contract[16] = r.Approver3ApprovedOn.ToString();
                    contract[17] = r.Approver4ApprovedOn.ToString();
                    contract[18] = r.Approver5ApprovedOn.ToString();
                    contract[19] = r.Approver6ApprovedOn.ToString();
                    contract[20] = r.Approver7ApprovedOn.ToString();
                    contract[21] = r.Approver8ApprovedOn.ToString();
                    contract[22] = r.Approver9ApprovedOn.ToString();
                    contract[23] = r.Approver10ApprovedOn.ToString();
                }



                Logger.Info("Accessed DB, Checking Contract Details : Details Found");
                return Json(contract);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'Contracttabledetails' Action HTTP POST Main exception");
                return Json("error");
            }
        }
        [HttpPost]
        public ActionResult ModifiedContracttabledetails(int contractID)
        {
            Logger.Info("Attempt Modified Contract ModifiedContracttabledetails");
            try
            {
                Logger.Info("Accessing DB for Modified Contract Details : ContractID match");
                var TableContract = /*from tblContractModification in*/ db.tblContractModifications.Where(x => x.ContractID == contractID).Select(x => new
                {
                    x.ContractName,
                    x.Approver10ID,
                    x.Approver1ID,
                    x.Approver2ID,
                    x.Approver3ID,
                    x.Approver4ID,
                    x.Approver5ID,
                    x.Approver6ID,
                    x.Approver7ID,
                    x.Approver8ID,
                    x.Approver9ID,
                    x.DateofInitiated,
                    x.Initiator,
                    x.Approver10ApprovedOn,
                    x.Approver1ApprovedOn,
                    x.Approver2ApprovedOn,
                    x.Approver3ApprovedOn,
                    x.Approver4ApprovedOn,
                    x.Approver5ApprovedOn,
                    x.Approver6ApprovedOn,
                    x.Approver7ApprovedOn,
                    x.Approver8ApprovedOn,
                    x.Approver9ApprovedOn
                });
                string[] contract = new string[24];
                foreach (var r in TableContract)
                {
                    contract[0] = "success";
                    contract[1] = r.ContractName;
                    var App1 = "";
                    try
                    {
                        App1 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver1ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    var App2 = "";

                    try
                    {
                        App2 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver2ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    var App3 = "";
                    try
                    {
                        App3 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver3ID) select tblUserMaster.UserEmployeeName).First();

                    }
                    catch { }
                    var App4 = "";
                    try
                    {
                        App4 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver4ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }

                    var App5 = "";
                    try
                    {
                        App5 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver5ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }

                    var App6 = "";
                    try
                    {
                        App6 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver6ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    var App7 = "";
                    try
                    {
                        App7 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver7ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    var App8 = "";
                    try
                    {
                        App8 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver8ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    var App9 = "";
                    try
                    {
                        App9 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver9ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    var App10 = "";
                    try
                    {
                        App10 = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Approver10ID) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    var Ini = "";
                    try
                    {
                        Ini = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == r.Initiator) select tblUserMaster.UserEmployeeName).First();
                    }
                    catch { }
                    contract[2] = r.Approver1ID.ToString() + " - " + App1;
                    
                    contract[3] = r.Approver2ID.ToString() + " - " + App2;
                    contract[4] = r.Approver3ID.ToString() + " - " + App3;
                    contract[5] = r.Approver4ID.ToString() + " - " + App4;
                    contract[6] = r.Approver5ID.ToString() + " - " + App5;
                    contract[7] = r.Approver6ID.ToString() + " - " + App6;
                    contract[8] = r.Approver7ID.ToString() + " - " + App7;
                    contract[9] = r.Approver8ID.ToString() + " - " + App8;
                    contract[10] = r.Approver9ID.ToString() + " - " + App9;
                    contract[11] = r.Approver10ID.ToString() + " - " + App10;
                    contract[12] = r.Initiator.ToString() + " - " + Ini;
                    contract[13] = r.DateofInitiated.ToString();
                    contract[14] = r.Approver1ApprovedOn.ToString();
                    contract[15] = r.Approver2ApprovedOn.ToString();
                    contract[16] = r.Approver3ApprovedOn.ToString();
                    contract[17] = r.Approver4ApprovedOn.ToString();
                    contract[18] = r.Approver5ApprovedOn.ToString();
                    contract[19] = r.Approver6ApprovedOn.ToString();
                    contract[20] = r.Approver7ApprovedOn.ToString();
                    contract[21] = r.Approver8ApprovedOn.ToString();
                    contract[22] = r.Approver9ApprovedOn.ToString();
                    contract[23] = r.Approver10ApprovedOn.ToString();
                }
                Logger.Info("Accessed DB, Checking Modified Contract Details : Details Found");
                return Json(contract);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'ModifiedContracttabledetails' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        public ActionResult Contractvariabletable(int ContractID)
        {
            Logger.Info("Attempt Contract Contractvariabletable");
            try
            {
                Logger.Info("Accessing DB for Contract Details : ContractID match");
                var TableVariable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Select(x => new { x.Value, x.Variable });
                string[] contract = new string[9];
                foreach (var r in TableVariable)
                {
                    contract[0] = r.Variable;
                    contract[1] = r.Value;
                    if (contract[0] == "Vendor Name")
                    {
                        contract[3] = "Vendor Name";
                        contract[4] = contract[1];
                    }
                    if (contract[0] == "Duration from")
                    {
                        contract[5] = "Duration from";
                        contract[6] = contract[1];
                    }
                    if (contract[0] == "Duration to")
                    {
                        contract[7] = "Duration to";
                        contract[8] = contract[1];
                    }
                }
                Logger.Info("Accessed DB, Checking Contract Details : Details Found");
                return Json(contract);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'Contractvariabletable' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public ActionResult GetTemplateTableForPreview()
        {
            Logger.Info("Attempt Template GetTemplateTableForPreview");
            try
            {
                Logger.Info("Accessed DB, Checking Template Details: ID match");
                var Template = from tblTemplateMaster in db.tblTemplateMasters.Where(x => x.Status == "In Effect") select tblTemplateMaster;
                Logger.Info("Accessed DB, Checking Template Details: Details Found");
                return Json(Template);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetTemplateTableForPreview' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public ActionResult GetUploadedFileToDownload(int ID)
        {
            var Datas = db.tblContractMasters.Where(x => x.ContractID == ID).Select(x => new { x.SupportingDoc1FileName, x.SupportingDoc2FileName, x.SupportingDoc3FileName, x.SupportingDoc4FileName, x.SupportingDoc5FileName });

            var r = Datas.SingleOrDefault();
            // select tblContractMaster;
            string[] FileName = new string[5];
            //foreach(var r in filename)
            //{
            FileName[0] = r.SupportingDoc1FileName;
            FileName[1] = r.SupportingDoc2FileName;
            FileName[2] = r.SupportingDoc3FileName;
            FileName[3] = r.SupportingDoc4FileName;
            FileName[4] = r.SupportingDoc5FileName;
            //}
            return Json(FileName);
        }
        [HttpPost]
        public ActionResult GetUploadedExistingFileToDownload(int ID)
        {
            var filename = from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == ID) select tblContractMaster.UploadExistingContractFileName;
            return Json(filename);
        }
        [HttpPost]
        public ActionResult GetUploadedModificationFileToDownload(int ID)
        {
            var Datas = db.tblContractModifications.Where(x => x.ContractID == ID).Select(x => new { x.SupportingDoc1FileName, x.SupportingDoc2FileName, x.SupportingDoc3FileName, x.SupportingDoc4FileName, x.SupportingDoc5FileName });

            var r = Datas.SingleOrDefault();
            // select tblContractMaster;
            string[] FileName = new string[5];
            //foreach(var r in filename)
            //{
            FileName[0] = r.SupportingDoc1FileName;
            FileName[1] = r.SupportingDoc2FileName;
            FileName[2] = r.SupportingDoc3FileName;
            FileName[3] = r.SupportingDoc4FileName;
            FileName[4] = r.SupportingDoc5FileName;
            //}
            return Json(FileName);
        }

        [HttpPost]
        public FileResult DownloadSupportingFiles1(int ContractId)
        {
            var Contract = /*from tblContractMaster in */db.tblContractMasters.Where(x => x.ContractID == ContractId).Select(x => new
            {
                x.SupportingDoc1,
                x.SupportingDoc1FileName,
                x.SupportingDoc1FileType
            }); //select tblContractMaster;

            foreach (var eachContract in Contract)
            {
                return File(eachContract.SupportingDoc1, eachContract.SupportingDoc1FileType, eachContract.SupportingDoc1FileName);
            }

            return null;
        }

        [HttpPost]
        public FileResult DownloadSupportingFiles2(int ContractId)
        {
            var Contract = /*from tblContractMaster in*/ db.tblContractMasters.Where(x => x.ContractID == ContractId).Select(x => new
            {
                x.SupportingDoc2,
                x.SupportingDoc2FileName,
                x.SupportingDoc2FileType
            }); //select tblContractMaster;


            foreach (var eachContract in Contract)
            {
                return File(eachContract.SupportingDoc2, eachContract.SupportingDoc2FileType, eachContract.SupportingDoc2FileName);
            }

            return null;
        }
        [HttpPost]
        public FileResult DownloadSupportingFiles3(int ContractId)
        {
            var Contract = /*from tblContractMaster in*/ db.tblContractMasters.Where(x => x.ContractID == ContractId).Select(x => new
            {
                x.SupportingDoc3,
                x.SupportingDoc3FileName,
                x.SupportingDoc3FileType
            }); //select tblContractMaster;


            foreach (var eachContract in Contract)
            {
                return File(eachContract.SupportingDoc3, eachContract.SupportingDoc3FileType, eachContract.SupportingDoc3FileName);
            }

            return null;
        }
        [HttpPost]
        public FileResult DownloadSupportingFiles4(int ContractId)
        {
            var Contract = /*from tblContractMaster in*/ db.tblContractMasters.Where(x => x.ContractID == ContractId).Select(x => new
            {
                x.SupportingDoc4,
                x.SupportingDoc4FileName,
                x.SupportingDoc4FileType
            }); //select tblContractMaster;


            foreach (var eachContract in Contract)
            {
                return File(eachContract.SupportingDoc4, eachContract.SupportingDoc4FileType, eachContract.SupportingDoc4FileName);
            }

            return null;
        }
        [HttpPost]
        public FileResult DownloadSupportingFiles5(int ContractId)
        {
            var Contract = /*from tblContractMaster in*/ db.tblContractMasters.Where(x => x.ContractID == ContractId)
                .Select(x => new
                {
                    x.SupportingDoc5,
                    x.SupportingDoc5FileName,
                    x.SupportingDoc5FileType
                }); //select tblContractMaster;//select tblContractMaster;


            foreach (var eachContract in Contract)
            {
                return File(eachContract.SupportingDoc5, eachContract.SupportingDoc5FileType, eachContract.SupportingDoc5FileName);
            }

            return null;
        }
        [HttpPost]
        public FileResult DownloadFinalContract(int ContractID)
        {
            var Contract = db.tblContractMasters.Where(x => x.ContractID == ContractID).Select(x => new
            {
                x.UploadSignOffContractFile,
                x.UploadSignOffContractFileType,
                x.UploadSignOffContractFileName
            }); //select tblContractMaster;

            foreach (var eachContract in Contract)
            {
                return File(eachContract.UploadSignOffContractFile, eachContract.UploadSignOffContractFileType, eachContract.UploadSignOffContractFileName);
            }
            return null;
        }
        [HttpPost]
        public FileResult DownloadModifiedFinalContract(int ContractID)
        {
            var Contract = db.tblContractModifications.Where(x => x.ContractID == ContractID).Select(x => new
            {
                x.UploadSignOffContractFile,
                x.UploadSignOffContractFileType,
                x.UploadSignOffContractFileName
            }); //select tblContractMaster;

            foreach (var eachContract in Contract)
            {
                return File(eachContract.UploadSignOffContractFile, eachContract.UploadSignOffContractFileType, eachContract.UploadSignOffContractFileName);
            }
            return null;
        }

        //[HttpPost]
        //public ActionResult DownloadModifiedFinalContract(int Id)
        //{
        //    var Contract = /*from tblContractModification in*/ db.tblContractModifications.Where(x => x.ContractID == Id).Select(x => new
        //    {
        //        x.UploadSignOffContractFile,
        //        x.UploadSignOffContractFileName,
        //        x.UploadSignOffContractFileType
        //    }); //select tblContractModification;

        //    foreach (var eachContract in Contract)
        //    {
        //        return File(eachContract.UploadSignOffContractFile, eachContract.UploadSignOffContractFileType, eachContract.UploadSignOffContractFileName);
        //    }
        //    return null;
        //}

        [HttpPost]
        public FileResult DownloadExistingFiles(int ContractId)
        {
            var Contract = /*from tblContractMaster in*/ db.tblContractMasters.Where(x => x.ContractID == ContractId).Select(x => new
            {
                x.UploadExistingFile,
                x.UploadExistingContractFileName,
                x.UploadExistingContractFileType
            }); //select tblContractMaster;

            foreach (var eachContract in Contract)
            {
                return File(eachContract.UploadExistingFile, eachContract.UploadExistingContractFileType, eachContract.UploadExistingContractFileName);
            }
            return null;
        }

        [HttpPost]
        public FileResult DownloadModifiedSupportingFiles1(int ContractId)
        {
            var Contract = /*from tblContractModification in*/ db.tblContractModifications.Where(x => x.ContractID == ContractId).Select(x => new { x.SupportingDoc1, x.SupportingDoc1FileName, x.SupportingDoc1FileType }); //select tblContractModification;

            foreach (var eachContract in Contract)
            {
                return File(eachContract.SupportingDoc1, eachContract.SupportingDoc1FileType, eachContract.SupportingDoc1FileName);
            }
            return null;
        }
        [HttpPost]
        public FileResult DownloadModifiedSupportingFiles2(int ContractId)
        {
            var Contract = /*from tblContractModification in*/ db.tblContractModifications.Where(x => x.ContractID == ContractId).Select(x => new
            {
                x.SupportingDoc2,
                x.SupportingDoc2FileName,
                x.SupportingDoc2FileType
            }); //select tblContractModification;


            foreach (var eachContract in Contract)
            {
                return File(eachContract.SupportingDoc2, eachContract.SupportingDoc2FileType, eachContract.SupportingDoc2FileName);
            }
            return null;
        }
        [HttpPost]
        public FileResult DownloadModifiedSupportingFiles3(int ContractId)
        {
            var Contract = /*from tblContractModification in*/ db.tblContractModifications.Where(x => x.ContractID == ContractId).Select(x => new
            {
                x.SupportingDoc3,
                x.SupportingDoc3FileName,
                x.SupportingDoc3FileType
            }); //select tblContractModification;

            foreach (var eachContract in Contract)
            {
                return File(eachContract.SupportingDoc3, eachContract.SupportingDoc3FileType, eachContract.SupportingDoc3FileName);
            }
            return null;
        }
        [HttpPost]
        public FileResult DownloadModifiedSupportingFiles4(int ContractId)
        {
            var Contract = /*from tblContractModification in*/ db.tblContractModifications.Where(x => x.ContractID == ContractId).Select(x => new
            {
                x.SupportingDoc4,
                x.SupportingDoc4FileName,
                x.SupportingDoc4FileType
            }); //select tblContractModification;

            foreach (var eachContract in Contract)
            {
                return File(eachContract.SupportingDoc4, eachContract.SupportingDoc4FileType, eachContract.SupportingDoc4FileName);
            }
            return null;
        }
        [HttpPost]
        public FileResult DownloadModifiedSupportingFiles5(int ContractId)
        {
            var Contract = /*from tblContractModification in*/ db.tblContractModifications.Where(x => x.ContractID == ContractId).Select(x => new
            {
                x.SupportingDoc5,
                x.SupportingDoc5FileName,
                x.SupportingDoc5FileType
            }); //select tblContractModification;

            foreach (var eachContract in Contract)
            {
                return File(eachContract.SupportingDoc5, eachContract.SupportingDoc5FileType, eachContract.SupportingDoc5FileName);
            }
            return null;
        }

        [HttpPost]
        [ValidateInput(false)] 
        public ActionResult DownloadPDF(string editor4, int ID, string FileName, string Pagesize, float Margintop = 1, float Marginleft = 1, float Marginbottom = 1, float Marginright = 1)
        {
            try
            {
                Marginleft = Marginleft * 30;
                Marginright = Marginright * 30;
                Margintop = Margintop * 30;
                Marginbottom = Marginbottom * 30;
                var result = /*from tblContractMaster in*/ db.tblContractMasters.Where(x => x.ContractID == ID).Select(x => new {
                    x.ContractSubCategory,
                    x.InEffectFrom,
                    x.Status
                }); //select tblContractMaster;

                string[] record = new string[3];
                foreach (var eachRecord in result)
                {
                    record[0] = eachRecord.ContractSubCategory;
                    record[1] = eachRecord.InEffectFrom;
                    record[2] = eachRecord.Status;
                }

                string SubCategory = record[0].ToUpper();
                string InEffectFrom = record[1];
                string ContractStatus = record[2];

                var doc = new Document();
                byte[] pdf; // result will be here
                using (var memoryStream = new MemoryStream())
                {
                    //var document = new Document(PageSize.A4, 50, 50, 60, 60);
                    var document = new Document();

                    document.SetMargins(Marginleft, Marginright, Margintop, Marginbottom + 50);

                    if (Pagesize == "A4")
                    {
                        document.SetPageSize(PageSize.A4);
                         }
                    if (Pagesize == "Legal")
                    {
                        document.SetPageSize(PageSize.LEGAL);
                         }
                    if (Pagesize == "Executive")
                    {
                        document.SetPageSize(PageSize.EXECUTIVE);
                         }
                    var writer = PdfWriter.GetInstance(document, memoryStream);
                    document.Open();
                    using (var htmlMemoryStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(editor4)))
                    {
                        TextReader tr = new StreamReader(htmlMemoryStream);
                        XMLWorkerHelper.GetInstance().ParseXHtml(writer, document, tr);
                    }
                    document.Close();
                    doc = document;

                    pdf = memoryStream.ToArray();

                }

                DateTime moment = DateTime.Now;
                if (!string.IsNullOrWhiteSpace(InEffectFrom))
                {
                    moment = Convert.ToDateTime(moment);
                }
                //string InitaitedDate = DateTime.Now.ToString("yyyy/MM/dd").Replace("-", "");
                //int contractID = 123456789;
                string WaterMark = "";
                if (ContractStatus == "Expired" || ContractStatus == "In Effect" || ContractStatus == "Approved")
                {
                    WaterMark = WaterMark + "";
                }
                else
                {
                    WaterMark = WaterMark + "Draft";
                }   
                string ContractID = $"{""}{SubCategory.Replace(" ", "")}{"_"}{moment.Year}{moment.Month}{"_"}{ID}";
                //if (radio == "Draft")
                //{
                //    WaterMark = "Draft";
                //}
               
                //if (radio == "Custom")
                //{
                //    WaterMark = watermark;
                //}
                //if (radio == "No Watermark")
                //{
                //    WaterMark = "";
                //}

                // string WaterMark = "1234567890123450";


                byte[] bytes = pdf;
                Font blackFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
                Font GreyFont;
                if (WaterMark.Length > 10)
                {
                    GreyFont = FontFactory.GetFont("Arial", 40, Font.NORMAL, BaseColor.LIGHT_GRAY);
                }
                else
                {
                    GreyFont = FontFactory.GetFont("Arial", 100, Font.NORMAL, BaseColor.LIGHT_GRAY);
                }

                using (MemoryStream stream = new MemoryStream())
                {
                    Image image;
                    image = Image.GetInstance(Server.MapPath("~/Content/.png"));
                    image.SetAbsolutePosition(doc.Right - 70, Marginbottom);
                    image.ScaleAbsolute(60f, 60f);

                    PdfReader reader = new PdfReader(bytes);
                    using (PdfStamper stamper = new PdfStamper(reader, stream))
                    {
                        int pages = reader.NumberOfPages;
                        for (int i = 1; i <= pages; i++)
                        {
                            if (ContractStatus == "Approved" || ContractStatus == "Expired" || ContractStatus == "In Effect")
                            {
                                stamper.GetUnderContent(i).AddImage(image);
                            }
                            if (WaterMark.Length > 0)
                            {

                                //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT, new Phrase($"{"Page "}{i.ToString()}{" of "}{pages.ToString()}", blackFont), 568f, 15f, 0);
                                ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_CENTER, new Phrase($"{WaterMark}", GreyFont), doc.Right / 2, doc.Top / 2, 30);
                            }

                            ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase($"{"Page "}{i.ToString()}{" of "}{pages.ToString()}", blackFont), doc.Right / 2, doc.Left / 2, 0);
                            ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase($"{ContractID}", blackFont), Marginleft, Marginbottom + 10, 0);
                        }
                    }
                    bytes = stream.ToArray();
                }

                // return File(bytes, "application/pdf", "sampel.pdf");


                return File(bytes, "application/pdf", FileName + ".pdf");
            }
            catch
            {
                return RedirectToAction("DraftView", new { id = ID });
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult DownloadModifiedPDF(string editor4, int ID, string FileName, string Pagesize, float Margintop = 1, float Marginleft = 1, float Marginbottom = 1, float Marginright = 1)
        {
            try
            {
                Marginleft = Marginleft * 30;
                Marginright = Marginright * 30;
                Margintop = Margintop * 30;
                Marginbottom = Marginbottom * 30;
                var result = /*from tblContractModification in*/ db.tblContractModifications.Where(x => x.ContractID == ID).Select(x => new {
                    x.ContractSubCategory,
                    x.InEffectFrom,
                    x.Status
                }); //select tblContractMaster;

                string[] record = new string[3];
                foreach (var eachRecord in result)
                {
                    record[0] = eachRecord.ContractSubCategory;
                    record[1] = eachRecord.InEffectFrom;
                    record[2] = eachRecord.Status;
                }

                string SubCategory = record[0].ToUpper();
                string InEffectFrom = record[1];
                string ContractStatus = record[2];

                var doc = new Document();
                byte[] pdf; // result will be here
                using (var memoryStream = new MemoryStream())
                {
                    //var document = new Document(PageSize.A4, 50, 50, 60, 60);
                    var document = new Document();

                    document.SetMargins(Marginleft, Marginright, Margintop, Marginbottom + 50);

                    if (Pagesize == "A4")
                    {
                        document.SetPageSize(PageSize.A4);
                    }
                    if (Pagesize == "Legal")
                    {
                        document.SetPageSize(PageSize.LEGAL);
                    }
                    if (Pagesize == "Executive")
                    {
                        document.SetPageSize(PageSize.EXECUTIVE);
                    }
                    var writer = PdfWriter.GetInstance(document, memoryStream);
                    document.Open();
                    using (var htmlMemoryStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(editor4)))
                    {
                        TextReader tr = new StreamReader(htmlMemoryStream);
                        XMLWorkerHelper.GetInstance().ParseXHtml(writer, document, tr);
                    }
                    document.Close();
                    doc = document;

                    pdf = memoryStream.ToArray();

                }

                DateTime moment = DateTime.Now;
                if (!string.IsNullOrWhiteSpace(InEffectFrom))
                {
                    moment = Convert.ToDateTime(moment);
                }
                //string InitaitedDate = DateTime.Now.ToString("yyyy/MM/dd").Replace("-", "");
                //int contractID = 123456789;
                string WaterMark = "";
                if (ContractStatus == "Expired" || ContractStatus == "In Effect" || ContractStatus == "Approved")
                {
                    WaterMark = WaterMark + "";
                }
                else
                {
                    WaterMark = WaterMark + "Draft";
                }
                string ContractID = $"{""}{SubCategory.Replace(" ", "")}{"_"}{moment.Year}{moment.Month}{"_"}{ID}";
                //if (radio == "Draft")
                //{
                //    WaterMark = "Draft";
                //}
               
                //if (radio == "Custom")
                //{
                //    WaterMark = watermark;
                //}
                //if (radio == "No Watermark")
                //{
                //    WaterMark = "";
                //}

                // string WaterMark = "1234567890123450";


                byte[] bytes = pdf;
                Font blackFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
                Font GreyFont;
                if (WaterMark.Length > 10)
                {
                    GreyFont = FontFactory.GetFont("Arial", 40, Font.NORMAL, BaseColor.LIGHT_GRAY);
                }
                else
                {
                    GreyFont = FontFactory.GetFont("Arial", 100, Font.NORMAL, BaseColor.LIGHT_GRAY);
                }

                using (MemoryStream stream = new MemoryStream())
                {
                    Image image;
                    image = Image.GetInstance(Server.MapPath("~/Content/.png"));
                    image.SetAbsolutePosition(doc.Right - 70, Marginbottom);
                    image.ScaleAbsolute(60f, 60f);

                    PdfReader reader = new PdfReader(bytes);
                    using (PdfStamper stamper = new PdfStamper(reader, stream))
                    {
                        int pages = reader.NumberOfPages;
                        for (int i = 1; i <= pages; i++)
                        {
                            if (ContractStatus == "Approved" || ContractStatus == "Expired" || ContractStatus == "In Effect")
                            {
                                stamper.GetUnderContent(i).AddImage(image);
                            }
                            if (WaterMark.Length > 0)
                            {

                                //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT, new Phrase($"{"Page "}{i.ToString()}{" of "}{pages.ToString()}", blackFont), 568f, 15f, 0);
                                ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_CENTER, new Phrase($"{WaterMark}", GreyFont), doc.Right / 2, doc.Top / 2, 30);
                            }

                            ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase($"{"Page "}{i.ToString()}{" of "}{pages.ToString()}", blackFont), doc.Right / 2, doc.Left / 2, 0);
                            ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase($"{ContractID}", blackFont), Marginleft, Marginbottom + 10, 0);
                        }
                    }
                    bytes = stream.ToArray();
                }

                // return File(bytes, "application/pdf", "sampel.pdf");


                return File(bytes, "application/pdf", FileName + ".pdf");
            }
            catch
            {
                return RedirectToAction("ContractDraftExtension", new { id = ID });
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult DownloadPDF2(string editor5, int ID, string FileName, string Pagesize, float Margintop, float Marginleft, float Marginbottom, float Marginright)
        {
            try
            {
                Marginleft = Marginleft * 96;
                Marginright = Marginright * 96;
                Margintop = Margintop * 96;
                Marginbottom = Marginbottom * 96;
                var result = /*from tblContractMaster in*/ db.tblContractMasters.Where(x => x.ContractID == ID).Select(x => new {
                    x.ContractSubCategory,
                    x.InEffectFrom,
                    x.Status
                }); //select tblContractMaster;

                string[] record = new string[3];
                foreach (var eachRecord in result)
                {
                    record[0] = eachRecord.ContractSubCategory;
                    record[1] = eachRecord.InEffectFrom;
                    record[2] = eachRecord.Status;
                }

                string SubCategory = record[0].ToUpper();
                string InEffectFrom = record[1];
                string ContractStatus = record[2];

                var doc = new Document();
                byte[] pdf; // result will be here
                using (var memoryStream = new MemoryStream())
                {
                    //var document = new Document(PageSize.A4, 50, 50, 60, 60);
                    var document = new Document();

                    document.SetMargins(Marginleft, Marginright, Margintop, Marginbottom + 50);

                    if (Pagesize == "A4")
                    {
                        document.SetPageSize(PageSize.A4);
                    }
                    if (Pagesize == "Legal")
                    {
                        document.SetPageSize(PageSize.LEGAL);
                    }
                    if (Pagesize == "Executive")
                    {
                        document.SetPageSize(PageSize.EXECUTIVE);
                    }
                    var writer = PdfWriter.GetInstance(document, memoryStream);
                    document.Open();
                    using (var htmlMemoryStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(editor5)))
                    {
                        TextReader tr = new StreamReader(htmlMemoryStream);
                        XMLWorkerHelper.GetInstance().ParseXHtml(writer, document, tr);
                    }
                    document.Close();
                    doc = document;

                    pdf = memoryStream.ToArray();

                }

                DateTime moment = DateTime.Now;
                if (!string.IsNullOrWhiteSpace(InEffectFrom))
                {
                    moment = Convert.ToDateTime(moment);
                }
                //string InitaitedDate = DateTime.Now.ToString("yyyy/MM/dd").Replace("-", "");
                //int contractID = 123456789;
                string WaterMark = "Draft";
                string ContractID = $"{""}{SubCategory.Replace(" ", "")}{"_"}{moment.Year}{moment.Month}{"_"}{ID}";
                //if (radio1 == "Draft")
                //{
                //    WaterMark = "Draft";
                //}
               
                //if (radio1 == "Custom")
                //{
                //    WaterMark = watermark;
                //}
                //if (radio1 == "No Watermark")
                //{
                //    WaterMark = "";
                //}

                // string WaterMark = "1234567890123450";


                byte[] bytes = pdf;
                Font blackFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
                Font GreyFont;
                if (WaterMark.Length > 10)
                {
                    GreyFont = FontFactory.GetFont("Arial", 40, Font.NORMAL, BaseColor.LIGHT_GRAY);
                }
                else
                {
                    GreyFont = FontFactory.GetFont("Arial", 100, Font.NORMAL, BaseColor.LIGHT_GRAY);
                }

                using (MemoryStream stream = new MemoryStream())
                {
                    Image image;
                    image = Image.GetInstance(Server.MapPath("~/Content/.png"));
                    image.SetAbsolutePosition(doc.Right - 70, Marginbottom);
                    image.ScaleAbsolute(60f, 60f);

                    PdfReader reader = new PdfReader(bytes);
                    using (PdfStamper stamper = new PdfStamper(reader, stream))
                    {
                        int pages = reader.NumberOfPages;
                        for (int i = 1; i <= pages; i++)
                        {
                            if (ContractStatus == "Approved" || ContractStatus == "Expired" || ContractStatus == "In Effect")
                            {
                                stamper.GetUnderContent(i).AddImage(image);
                            }
                            if (WaterMark.Length > 0)
                            {

                                //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT, new Phrase($"{"Page "}{i.ToString()}{" of "}{pages.ToString()}", blackFont), 568f, 15f, 0);
                                ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_CENTER, new Phrase($"{WaterMark}", GreyFont), doc.Right / 2, doc.Top / 2, 30);
                            }

                            ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase($"{"Page "}{i.ToString()}{" of "}{pages.ToString()}", blackFont), doc.Right / 2, doc.Left / 2, 0);
                            ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase($"{ContractID}", blackFont), Marginleft, Marginbottom + 10, 0);
                        }
                    }
                    bytes = stream.ToArray();
                }

                // return File(bytes, "application/pdf", "sampel.pdf");


                return File(bytes, "application/pdf", FileName + ".pdf");
            }
            catch
            {
                return RedirectToAction("DraftView", new { id = ID });
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult DownloadModifiedPDF2(string editor5, int ID, string FileName, string Pagesize, float Margintop, float Marginleft, float Marginbottom, float Marginright)
        {
            try
            {
                Marginleft = Marginleft * 96;
                Marginright = Marginright * 96;
                Margintop = Margintop * 96;
                Marginbottom = Marginbottom * 96;
                var result = /*from tblContractModification in*/ db.tblContractModifications.Where(x => x.ContractID == ID).Select(x => new {
                    x.ContractSubCategory,
                    x.InEffectFrom,
                    x.Status
                }); //select tblContractMaster;

                string[] record = new string[3];
                foreach (var eachRecord in result)
                {
                    record[0] = eachRecord.ContractSubCategory;
                    record[1] = eachRecord.InEffectFrom;
                    record[2] = eachRecord.Status;
                }

                string SubCategory = record[0].ToUpper();
                string InEffectFrom = record[1];
                string ContractStatus = record[2];

                var doc = new Document();
                byte[] pdf; // result will be here
                using (var memoryStream = new MemoryStream())
                {
                    //var document = new Document(PageSize.A4, 50, 50, 60, 60);
                    var document = new Document();

                    document.SetMargins(Marginleft, Marginright, Margintop, Marginbottom + 50);

                    if (Pagesize == "A4")
                    {
                        document.SetPageSize(PageSize.A4);
                    }
                    if (Pagesize == "Legal")
                    {
                        document.SetPageSize(PageSize.LEGAL);
                    }
                    if (Pagesize == "Executive")
                    {
                        document.SetPageSize(PageSize.EXECUTIVE);
                    }
                    var writer = PdfWriter.GetInstance(document, memoryStream);
                    document.Open();
                    using (var htmlMemoryStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(editor5)))
                    {
                        TextReader tr = new StreamReader(htmlMemoryStream);
                        XMLWorkerHelper.GetInstance().ParseXHtml(writer, document, tr);
                    }
                    document.Close();
                    doc = document;

                    pdf = memoryStream.ToArray();

                }

                DateTime moment = DateTime.Now;
                if (!string.IsNullOrWhiteSpace(InEffectFrom))
                {
                    moment = Convert.ToDateTime(moment);
                }
                //string InitaitedDate = DateTime.Now.ToString("yyyy/MM/dd").Replace("-", "");
                //int contractID = 123456789;
                string WaterMark = "Draft";
                string ContractID = $"{""}{SubCategory.Replace(" ", "")}{"_"}{moment.Year}{moment.Month}{"_"}{ID}";
                //if (radio1 == "Draft")
                //{
                //    WaterMark = "Draft";
                //}
               
                //if (radio1 == "Custom")
                //{
                //    WaterMark = watermark;
                //}
                //if (radio1 == "No Watermark")
                //{
                //    WaterMark = "";
                //}

                // string WaterMark = "1234567890123450";


                byte[] bytes = pdf;
                Font blackFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
                Font GreyFont;
                if (WaterMark.Length > 10)
                {
                    GreyFont = FontFactory.GetFont("Arial", 40, Font.NORMAL, BaseColor.LIGHT_GRAY);
                }
                else
                {
                    GreyFont = FontFactory.GetFont("Arial", 100, Font.NORMAL, BaseColor.LIGHT_GRAY);
                }

                using (MemoryStream stream = new MemoryStream())
                {
                    Image image;
                    image = Image.GetInstance(Server.MapPath("~/Content/.png"));
                    image.SetAbsolutePosition(doc.Right - 70, Marginbottom);
                    image.ScaleAbsolute(60f, 60f);

                    PdfReader reader = new PdfReader(bytes);
                    using (PdfStamper stamper = new PdfStamper(reader, stream))
                    {
                        int pages = reader.NumberOfPages;
                        for (int i = 1; i <= pages; i++)
                        {
                            if (ContractStatus == "Approved" || ContractStatus == "Expired" || ContractStatus == "In Effect")
                            {
                                stamper.GetUnderContent(i).AddImage(image);
                            }
                            if (WaterMark.Length > 0)
                            {

                                //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT, new Phrase($"{"Page "}{i.ToString()}{" of "}{pages.ToString()}", blackFont), 568f, 15f, 0);
                                ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_CENTER, new Phrase($"{WaterMark}", GreyFont), doc.Right / 2, doc.Top / 2, 30);
                            }

                            ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase($"{"Page "}{i.ToString()}{" of "}{pages.ToString()}", blackFont), doc.Right / 2, doc.Left / 2, 0);
                            ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase($"{ContractID}", blackFont), Marginleft, Marginbottom + 10, 0);
                        }
                    }
                    bytes = stream.ToArray();
                }

                // return File(bytes, "application/pdf", "sampel.pdf");


                return File(bytes, "application/pdf", FileName + ".pdf");
            }
            catch
            {
                return RedirectToAction("ContractDraftExtension", new { id = ID });
            }
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult DownloadPDF3(string editor6, int ID, string FileName, string Pagesize, float Margintop, float Marginleft, float Marginbottom, float Marginright)
        {
            try
            {
                Marginleft = Marginleft * 96;
                Marginright = Marginright * 96;
                Margintop = Margintop * 96;
                Marginbottom = Marginbottom * 96;
                var result = /*from tblContractMaster in*/ db.tblContractMasters.Where(x => x.ContractID == ID).Select(x => new {
                    x.ContractSubCategory,
                    x.InEffectFrom,
                    x.Status
                }); //select tblContractMaster;

                string[] record = new string[3];
                foreach (var eachRecord in result)
                {
                    record[0] = eachRecord.ContractSubCategory;
                    record[1] = eachRecord.InEffectFrom;
                    record[2] = eachRecord.Status;
                }

                string SubCategory = record[0].ToUpper();
                string InEffectFrom = record[1];
                string ContractStatus = record[2];

                var doc = new Document();
                byte[] pdf; // result will be here
                using (var memoryStream = new MemoryStream())
                {
                    //var document = new Document(PageSize.A4, 50, 50, 60, 60);
                    var document = new Document();

                    document.SetMargins(Marginleft, Marginright, Margintop, Marginbottom + 50);

                    if (Pagesize == "A4")
                    {
                        document.SetPageSize(PageSize.A4);
                    }
                    if (Pagesize == "Legal")
                    {
                        document.SetPageSize(PageSize.LEGAL);
                    }
                    if (Pagesize == "Executive")
                    {
                        document.SetPageSize(PageSize.EXECUTIVE);
                    }
                    var writer = PdfWriter.GetInstance(document, memoryStream);
                    document.Open();
                    using (var htmlMemoryStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(editor6)))
                    {
                        TextReader tr = new StreamReader(htmlMemoryStream);
                        XMLWorkerHelper.GetInstance().ParseXHtml(writer, document, tr);
                    }
                    document.Close();
                    doc = document;

                    pdf = memoryStream.ToArray();

                }

                DateTime moment = DateTime.Now;
                if (!string.IsNullOrWhiteSpace(InEffectFrom))
                {
                    moment = Convert.ToDateTime(moment);
                }
                //string InitaitedDate = DateTime.Now.ToString("yyyy/MM/dd").Replace("-", "");
                //int contractID = 123456789;
                string WaterMark = "Draft";
                string ContractID = $"{""}{SubCategory.Replace(" ", "")}{"_"}{moment.Year}{moment.Month}{"_"}{ID}";
                //if (radio2 == "Draft")
                //{
                //    WaterMark = "Draft";
                //}
               
                //if (radio2 == "Custom")
                //{
                //    WaterMark = watermark;
                //}
                //if (radio2 == "No Watermark")
                //{
                //    WaterMark = "";
                //}

                // string WaterMark = "1234567890123450";


                byte[] bytes = pdf;
                Font blackFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
                Font GreyFont;
                if (WaterMark.Length > 10)
                {
                    GreyFont = FontFactory.GetFont("Arial", 40, Font.NORMAL, BaseColor.LIGHT_GRAY);
                }
                else
                {
                    GreyFont = FontFactory.GetFont("Arial", 100, Font.NORMAL, BaseColor.LIGHT_GRAY);
                }

                using (MemoryStream stream = new MemoryStream())
                {
                    Image image;
                    image = Image.GetInstance(Server.MapPath("~/Content/.png"));
                    image.SetAbsolutePosition(doc.Right - 70, Marginbottom);
                    image.ScaleAbsolute(60f, 60f);

                    PdfReader reader = new PdfReader(bytes);
                    using (PdfStamper stamper = new PdfStamper(reader, stream))
                    {
                        int pages = reader.NumberOfPages;
                        for (int i = 1; i <= pages; i++)
                        {
                            if (ContractStatus == "Approved" || ContractStatus == "Expired" || ContractStatus == "In Effect")
                            {
                                stamper.GetUnderContent(i).AddImage(image);
                            }
                            if (WaterMark.Length > 0)
                            {

                                //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT, new Phrase($"{"Page "}{i.ToString()}{" of "}{pages.ToString()}", blackFont), 568f, 15f, 0);
                                ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_CENTER, new Phrase($"{WaterMark}", GreyFont), doc.Right / 2, doc.Top / 2, 30);
                            }

                            ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase($"{"Page "}{i.ToString()}{" of "}{pages.ToString()}", blackFont), doc.Right / 2, doc.Left / 2, 0);
                            ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase($"{ContractID}", blackFont), Marginleft, Marginbottom + 10, 0);
                        }
                    }
                    bytes = stream.ToArray();
                }

                // return File(bytes, "application/pdf", "sampel.pdf");


                return File(bytes, "application/pdf", FileName + ".pdf");
            }
            catch
            {
                return RedirectToAction("DraftView", new { id = ID });
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult DownloadModifiedPDF3(string editor6, int ID, string FileName, string Pagesize, float Margintop, float Marginleft, float Marginbottom, float Marginright)
        {
            try
            {
                Marginleft = Marginleft * 96;
                Marginright = Marginright * 96;
                Margintop = Margintop * 96;
                Marginbottom = Marginbottom * 96;
                var result = /*from tblContractModification in*/ db.tblContractModifications.Where(x => x.ContractID == ID).Select(x => new {
                    x.ContractSubCategory,
                    x.InEffectFrom,
                    x.Status
                }); //select tblContractMaster;

                string[] record = new string[3];
                foreach (var eachRecord in result)
                {
                    record[0] = eachRecord.ContractSubCategory;
                    record[1] = eachRecord.InEffectFrom;
                    record[2] = eachRecord.Status;
                }

                string SubCategory = record[0].ToUpper();
                string InEffectFrom = record[1];
                string ContractStatus = record[2];

                var doc = new Document();
                byte[] pdf; // result will be here
                using (var memoryStream = new MemoryStream())
                {
                    //var document = new Document(PageSize.A4, 50, 50, 60, 60);
                    var document = new Document();

                    document.SetMargins(Marginleft, Marginright, Margintop, Marginbottom + 50);

                    if (Pagesize == "A4")
                    {
                        document.SetPageSize(PageSize.A4);
                    }
                    if (Pagesize == "Legal")
                    {
                        document.SetPageSize(PageSize.LEGAL);
                    }
                    if (Pagesize == "Executive")
                    {
                        document.SetPageSize(PageSize.EXECUTIVE);
                    }
                    var writer = PdfWriter.GetInstance(document, memoryStream);
                    document.Open();
                    using (var htmlMemoryStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(editor6)))
                    {
                        TextReader tr = new StreamReader(htmlMemoryStream);
                        XMLWorkerHelper.GetInstance().ParseXHtml(writer, document, tr);
                    }
                    document.Close();
                    doc = document;

                    pdf = memoryStream.ToArray();

                }

                DateTime moment = DateTime.Now;
                if (!string.IsNullOrWhiteSpace(InEffectFrom))
                {
                    moment = Convert.ToDateTime(moment);
                }
                //string InitaitedDate = DateTime.Now.ToString("yyyy/MM/dd").Replace("-", "");
                //int contractID = 123456789;
                string WaterMark = "Draft";
                string ContractID = $"{""}{SubCategory.Replace(" ", "")}{"_"}{moment.Year}{moment.Month}{"_"}{ID}";
                //if (radio2 == "Draft")
                //{
                //    WaterMark = "Draft";
                //}
               
                //if (radio2 == "Custom")
                //{
                //    WaterMark = watermark;
                //}
                //if (radio2 == "No Watermark")
                //{
                //    WaterMark = "";
                //}

                // string WaterMark = "1234567890123450";


                byte[] bytes = pdf;
                Font blackFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
                Font GreyFont;
                if (WaterMark.Length > 10)
                {
                    GreyFont = FontFactory.GetFont("Arial", 40, Font.NORMAL, BaseColor.LIGHT_GRAY);
                }
                else
                {
                    GreyFont = FontFactory.GetFont("Arial", 100, Font.NORMAL, BaseColor.LIGHT_GRAY);
                }

                using (MemoryStream stream = new MemoryStream())
                {
                    Image image;
                    image = Image.GetInstance(Server.MapPath("~/Content/.png"));
                    image.SetAbsolutePosition(doc.Right - 70, Marginbottom);
                    image.ScaleAbsolute(60f, 60f);

                    PdfReader reader = new PdfReader(bytes);
                    using (PdfStamper stamper = new PdfStamper(reader, stream))
                    {
                        int pages = reader.NumberOfPages;
                        for (int i = 1; i <= pages; i++)
                        {
                            if (ContractStatus == "Approved" || ContractStatus == "Expired" || ContractStatus == "In Effect")
                            {
                                stamper.GetUnderContent(i).AddImage(image);
                            }
                            if (WaterMark.Length > 0)
                            {

                                //ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT, new Phrase($"{"Page "}{i.ToString()}{" of "}{pages.ToString()}", blackFont), 568f, 15f, 0);
                                ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_CENTER, new Phrase($"{WaterMark}", GreyFont), doc.Right / 2, doc.Top / 2, 30);
                            }

                            ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase($"{"Page "}{i.ToString()}{" of "}{pages.ToString()}", blackFont), doc.Right / 2, doc.Left / 2, 0);
                            ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_LEFT, new Phrase($"{ContractID}", blackFont), Marginleft, Marginbottom + 10, 0);
                        }
                    }
                    bytes = stream.ToArray();
                }

                // return File(bytes, "application/pdf", "sampel.pdf");


                return File(bytes, "application/pdf", FileName + ".pdf");
            }
            catch
            {
                return RedirectToAction("ContractDraftExtension", new { id = ID });
            }
        }

        [HttpPost]
        public JsonResult getclusterandfunction(int currentuserid)
        {
            Logger.Info("Attempt Contract getclusterandfunction");
            try
            {
                if (!string.IsNullOrWhiteSpace(currentuserid.ToString()))
                {
                    Logger.Info("Accessing DB for Contract Details : ID match");
                    var result = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeID.ToString() == currentuserid.ToString()).Select(x => new {
                        x.UserCategory,
                        x.UserSubCategory
                    }); //select tblUserMaster; 
                    string[] UserInfo = new string[3];
                    foreach (var r in result)
                    {

                        UserInfo[0] = "success";
                        UserInfo[1] = r.UserSubCategory;
                        UserInfo[2] = r.UserCategory;
                        Logger.Info("Accessed DB, Checking ContractMaster Details: Contract Details Found");
                        return Json(UserInfo);
                    }
                }
            }

            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'getclusterandfunction' Action HTTP POST Main exception");
                return Json("error");
            }
            Logger.Info("Accessed DB, Checking Contract Details: Contract Details Not Found");
            string[] failures = { "failure" };
            return Json(failures);
        }

        [HttpPost]
        public JsonResult getHodDetails(string EmployeeDetails, string OptionToSearch)
        {
            OptionToSearch = OptionToSearch.Trim();
            if (OptionToSearch == "Employee ID")
            {
                var result = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeID.ToString().Contains(EmployeeDetails)).Select(x => new {
                    x.UserEmployeeID,
                    x.UserEmployeeName,
                    x.UserEmployeeDesignation,
                    x.UserCategory,
                    x.UserSubCategory,
                    x.UserRoleAdmin,
                    x.UserRoleApprover,
                    x.UserRoleFinance,
                    x.UserRoleInitiator,
                    x.UserRoleLegal,
                    x.UserRoleReviewer,
                    x.UserEmployeeEmail
                }); //select tblUserMaster;
                return Json(result);
            }
            else if (OptionToSearch == "Employee Name")
            {
                var result = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeName.Contains(EmployeeDetails)).Select(x => new {
                    x.UserEmployeeID,
                    x.UserEmployeeName,
                    x.UserEmployeeDesignation,
                    x.UserCategory,
                    x.UserSubCategory,
                    x.UserRoleAdmin,
                    x.UserRoleApprover,
                    x.UserRoleFinance,
                    x.UserRoleInitiator,
                    x.UserRoleLegal,
                    x.UserRoleReviewer,
                    x.UserEmployeeEmail
                }); //select tblUserMaster;
                return Json(result);
            }
            else if (OptionToSearch == "Employee Email Address")
            {
                var result = /*from tblUserMaster in*/ db.tblUserMasters.Where(x => x.UserEmployeeEmail.Contains(EmployeeDetails)).Select(x => new {
                    x.UserEmployeeID,
                    x.UserEmployeeName,
                    x.UserEmployeeDesignation,
                    x.UserCategory,
                    x.UserSubCategory,
                    x.UserRoleAdmin,
                    x.UserRoleApprover,
                    x.UserRoleFinance,
                    x.UserRoleInitiator,
                    x.UserRoleLegal,
                    x.UserRoleReviewer,
                    x.UserEmployeeEmail
                }); //select tblUserMaster;
                return Json(result);
            }
            else
            {
                return Json("");
            }
        }

        [HttpPost]

        public ActionResult GetClauseForPreview(int ID)
        {
            Logger.Info("Attempt Contract GetClauseForPreview");
            try
            {

                Logger.Info("Accessed DB, Checking Clause Details: ClauseID match");
                var result = from tblClauseMaster in db.tblClauseMasters.Where(x => x.ClauseClauseID == ID) select tblClauseMaster;
                string[] Template = new string[3];

                foreach (var r in result)
                {

                    Template[0] = r.ClauseClauseID.ToString();
                    Template[1] = r.ClauseClauseText;
                    Template[2] = r.ClauseClauseTitle;

                    Logger.Info("Accessed DB, Checking Clause Details: Clause Details Found");
                    return Json(Template);
                }
                Logger.Info("Accessed DB, Checking Clause Details: Clause Found");
                return Json(result);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetClauseForPreview' Action HTTP POST Main exception");
                return Json("error");
            }
        }
        [HttpPost]

        public ActionResult GetClauseText(int id)
        {
            Logger.Info("Attempt Contract GetClauseText");
            try
            {

                Logger.Info("Accessed DB, Checking Clause Details: ClauseID match");
                var result = from tblClauseMaster in db.tblClauseMasters.Where(x => x.ClauseClauseID == id) select tblClauseMaster.ClauseClauseText;

                Logger.Info("Accessed DB, Checking Clause Details: Clause Found");
                return Json(result);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetClauseText' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public ActionResult SaveReviewforDB(int id, int currentid, string physicalcopylocation, string Physicalcopycomments)
        {
            int CurrentUser = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Contract SaveReviewforDB");
            try
            {

                Logger.Info("Accessing DB for Saving the Contract Records");
                tblContractMaster eachContract = db.tblContractMasters.Find(id);

                string OldValues = "";
                string NewValues = "";
                if (eachContract.ReviewerID != currentid)
                {
                    OldValues = OldValues + "Reviewer ID : " + eachContract.ReviewerID + " , ";
                    NewValues = NewValues + "Reviewer ID : " + currentid + " , ";
                }
                if (eachContract.ReviewedOn != DateTime.Now)
                {
                    OldValues = OldValues + "Reviewed On : " + eachContract.ReviewedOn + " , ";
                    NewValues = NewValues + "Reviewed On : " + DateTime.Now + " , ";
                }
                if (eachContract.PhysicalCopyLocation != physicalcopylocation)
                {
                    OldValues = OldValues + "Physical Copy Location : " + eachContract.PhysicalCopyLocation + " , ";
                    NewValues = NewValues + "Physical Copy Location : " + eachContract.PhysicalCopyLocation + physicalcopylocation + " , ";
                }
                if (eachContract.ReviewedComments != Physicalcopycomments)
                {
                    OldValues = OldValues + "Reviewed Comments : " + eachContract.ReviewedComments + " , ";
                    NewValues = NewValues + "Reviewed Comments : " + eachContract.ReviewedComments + Physicalcopycomments + " , ";
                }

                eachContract.PhysicalCopyLocation = eachContract.PhysicalCopyLocation + "<br />" + physicalcopylocation;
                eachContract.ReviewedComments = eachContract.ReviewedComments + "<br />" + Physicalcopycomments;
                eachContract.ReviewerID = currentid;
                eachContract.ReviewedOn = DateTime.Now;
                db.Entry(eachContract).State = EntityState.Modified;

                tblContractLog log = new tblContractLog();
                log.LogContractUID = eachContract.ContractID;
                log.ModifiedBy = CurrentUser.ToString() + " - " + CurrentUserName;
                log.LogActivity = "Review Modification";
                log.ChangedFrom = OldValues;
                log.ChangedTo = NewValues;
                log.DateandTime = DateTime.Now.ToString();

                db.tblContractLogs.Add(log);

                db.SaveChanges();
                Logger.Info("Accessed DB, Contract Record Updated");
                return Json("success");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'SaveReviewforDB' Action HTTP POST Main exception");
                return Json("error");
            }
        }


        [HttpPost]

        public ActionResult GetReviewerNameOnID(int ID)
        {

            Logger.Info("Attempt Contract GetReviewerNameOnID");
            try
            {
                string ReviewerID = "";
                Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                ReviewerID = (from tblContractMaster in db.tblContractMasters.Where(x => x.ContractID == ID) select tblContractMaster.ReviewerID.ToString()).First();

                string ReviewerName = "";
                ReviewerName = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID.ToString() == ReviewerID) select tblUserMaster.UserEmployeeName).First();

                Logger.Info("Accessed DB, Checking Clause Details: Clause Found");
                return Json(ReviewerName);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetModifiedReviewerNameOnID' Action HTTP POST Main exception");
                return Json("error");
            }
        }


        [HttpPost]
        public ActionResult SaveModifiedReviewforDB(int id, int currentid, string physicalcopylocation, string Physicalcopycomments)
        {
            int CurrentUser = 0;
            string CurrentUserName = "";
            try
            {
                CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                CurrentUserName = User.Identity.Name.Split('|')[0];
            }
            catch { }
            Logger.Info("Attempt Contract SaveModifiedReviewforDB");
            try
            {
                Logger.Info("Accessing DB for Saving the Contract Records");
                tblContractModification eachContract = db.tblContractModifications.Find(id);

                string OldValues = "";
                string NewValues = "";
                if (eachContract.ReviewerID != currentid)
                {
                    OldValues = OldValues + "Reviewer ID : " + eachContract.ReviewerID + " , ";
                    NewValues = NewValues + "Reviewer ID : " + currentid + " , ";
                }
                if (eachContract.ReviewedOn != DateTime.Now)
                {
                    OldValues = OldValues + "Reviewed On : " + eachContract.ReviewedOn + " , ";
                    NewValues = NewValues + "Reviewed On : " + DateTime.Now + " , ";
                }
                if (eachContract.PhysicalCopyLocation != physicalcopylocation)
                {
                    OldValues = OldValues + "Physical Copy Location : " + eachContract.PhysicalCopyLocation + " , ";
                    NewValues = NewValues + "Physical Copy Location : " + eachContract.PhysicalCopyLocation + physicalcopylocation + " , ";
                }
                if (eachContract.ReviewedComments != Physicalcopycomments)
                {
                    OldValues = OldValues + "Reviewed Comments : " + eachContract.ReviewedComments + " , ";
                    NewValues = NewValues + "Reviewed Comments : " + eachContract.ReviewedComments + Physicalcopycomments + " , ";
                }

                eachContract.PhysicalCopyLocation = eachContract.PhysicalCopyLocation + "<br />" + physicalcopylocation;
                eachContract.ReviewedComments = eachContract.ReviewedComments + "<br />" + Physicalcopycomments;
                eachContract.ReviewerID = currentid;
                eachContract.ReviewedOn = DateTime.Now;
                db.Entry(eachContract).State = EntityState.Modified;

                tblContractLog log = new tblContractLog();
                log.LogContractUID = eachContract.ContractID;
                log.ModifiedBy = CurrentUser.ToString() + " - " + CurrentUserName;
                log.LogActivity = "Review Modification";
                log.ChangedFrom = OldValues;
                log.ChangedTo = NewValues;
                log.DateandTime = DateTime.Now.ToString();

                db.SaveChanges();
                Logger.Info("Accessed DB, Contract Record Updated");
                return Json("success");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'SaveModifiedReviewforDB' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]

        public ActionResult GetModifiedReviewerNameOnID(int ID)
        {

            Logger.Info("Attempt Contract GetModifiedReviewerNameOnID");
            try
            {
                string ReviewerID = "";
                Logger.Info("Accessed DB, Checking Contract Details: ContractID match");
                ReviewerID = (from tblContractModification in db.tblContractModifications.Where(x => x.ContractID == ID) select tblContractModification.ReviewerID.ToString()).First();

                string ReviewerName = "";
                ReviewerName = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID.ToString() == ReviewerID) select tblUserMaster.UserEmployeeName).First();

                Logger.Info("Accessed DB, Checking Clause Details: Clause Found");
                return Json(ReviewerName);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetModifiedReviewerNameOnID' Action HTTP POST Main exception");
                return Json("error");
            }
        }


        [HttpPost]
        public ActionResult DeleteModifiedContract(int ContractID)
        {
            Logger.Info("Attempt Contract DeleteModifiedContract");
            try
            {
                Logger.Info("Accessing DB for Deleting the Contract Records");
                tblContractModification contract = db.tblContractModifications.Find(ContractID);

                db.tblContractModifications.Remove(contract);
                //db.SaveChanges();

                try
                {
                    tblContractMaster eachcontract = db.tblContractMasters.Find(contract.OriginalContractID);

                    eachcontract.ContractModificationType = "";
                    db.Entry(eachcontract).State = EntityState.Modified;
                }
                catch { }

                try
                {
                    Logger.Info("Accessing DB for Contract Variable Details");
                    var Variable = /*from tblVariableData in*/ db.tblVariableDatas.Where(x => x.TypeID == ContractID).Where(x => x.Type == "Contract").Where(x => x.Version == "Contract").Select(x => new { x.ID }); //select tblVariableData;


                    Logger.Info("Accessed DB, Checking Contract Variable Details: Details Found");
                    if (Variable.ToList().Count > 0)
                    {

                        foreach (var item in Variable)
                        {
                            var Id = item.ID;

                            tblVariableData eachvariable = db.tblVariableDatas.Find(Id);
                            db.tblVariableDatas.Remove(eachvariable);
                            //db.SaveChanges();


                        }
                        db.SaveChanges();
                    }
                }
                catch (Exception Ex)
                {
                    Logger.Error(Ex, "'Contract' Controller , 'DeleteModifiedContract' Action HTTP POST Main exception");
                    return Json("error");
                }

                db.SaveChanges();

                Logger.Info("Accessed DB, Contract Record Deleted");
                return Json("success");
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'DeleteModifiedContract' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public JsonResult GetNextApproverName(int NextApproverID)
        {
            Logger.Info("Attempt Contract GetNextApproverName");
            try
            {
                Logger.Info("Accessing DB for UserMaster Details: ID match");
                var Datas = db.tblUserMasters.Where(x => x.UserEmployeeID == NextApproverID).Select(x => new { x.UserEmployeeName });
                //result.se.LastOrDefault();
                var result = Datas.SingleOrDefault();
                Logger.Info("Accessed DB, Checking UserMaster Details : Status Found");
                return Json(result.UserEmployeeName);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetNextApproverName' Action HTTP POST Main exception");
                //MessageBox.Show(ex.ToString());
                return Json("error");
            }
        }

        [HttpPost]
        public JsonResult GetApprovalLevel(string ContractDept, string ContractSubDept, string Type)
        {
            Logger.Info("Attempt Contract GetApprovalLevel");
            try
            {

                int CurrentUser = 0;
                try
                {
                    CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                }
                catch { }

                var EmployeePlant = "";
                EmployeePlant = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == CurrentUser) select tblUserMaster.UserPlant).First();


                //if(Type == "From Template" || Type == "Upload Existing Contract")
                //{
                    Logger.Info("Accessing DB for ApprovalMaster Details : Department and SubDepartment match");
                    var result = /*from tblApprovalMaster in*/ db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.Department == ContractDept)
                                 .Where(x => x.SubDepartment == ContractSubDept).Where(x => x.WorkflowType == "Contract").Select(x => new { x.ApprovalLevel });
                    //select tblApprovalMaster;
                    string[] UserInfo = new string[12];
                    foreach (var r in result)
                    {
                        UserInfo[0] = r.ApprovalLevel.ToString();

                        if (UserInfo[0] == "1")
                        {
                            UserInfo[1] = "Level1";

                        }
                        else if (UserInfo[0] == "2")
                        {
                            UserInfo[2] = "Level2";

                        }
                        else if (UserInfo[0] == "3")
                        {
                            UserInfo[3] = "Level3";

                        }
                        else if (UserInfo[0] == "4")
                        {
                            UserInfo[4] = "Level4";

                        }
                        else if (UserInfo[0] == "5")
                        {
                            UserInfo[5] = "Level5";
                            UserInfo[11] = "success";
                        }
                        else if (UserInfo[0] == "6")
                        {
                            UserInfo[6] = "Level6";
                            UserInfo[11] = "success";
                        }
                        else if (UserInfo[0] == "7")
                        {
                            UserInfo[7] = "Level7";
                            UserInfo[11] = "success";
                        }
                        else if (UserInfo[0] == "8")
                        {
                            UserInfo[8] = "Level8";
                            UserInfo[11] = "success";
                        }
                        else if (UserInfo[0] == "9")
                        {
                            UserInfo[9] = "Level9";
                            UserInfo[11] = "success";
                        }
                        else if (UserInfo[0] == "10")
                        {
                            UserInfo[10] = "Level10";
                            UserInfo[11] = "success";
                        }

                    }
                    Logger.Info("Accessed DB, Checking ApprovalMaster Details: ApprovalMaster Details Found");
                    return Json(UserInfo);
                //}
                //else if (Type == "Fresh Contract")
                //{
                //    Logger.Info("Accessing DB for ApprovalMaster Details : Department and SubDepartment match");
                //    var result = /*from tblApprovalMaster in*/ db.tblApprovalMasters.Where(x => x.Plant == EmployeePlant).Where(x => x.Department == ContractDept)
                //                 .Where(x => x.SubDepartment == ContractSubDept).Where(x => x.WorkflowType == "Contract - Modified").Select(x => new { x.ApprovalLevel });
                //    //select tblApprovalMaster;
                //    string[] UserInfo = new string[12];
                //    foreach (var r in result)
                //    {
                //        UserInfo[0] = r.ApprovalLevel.ToString();

                //        if (UserInfo[0] == "1")
                //        {
                //            UserInfo[1] = "Level1";

                //        }
                //        else if (UserInfo[0] == "2")
                //        {
                //            UserInfo[2] = "Level2";

                //        }
                //        else if (UserInfo[0] == "3")
                //        {
                //            UserInfo[3] = "Level3";

                //        }
                //        else if (UserInfo[0] == "4")
                //        {
                //            UserInfo[4] = "Level4";

                //        }
                //        else if (UserInfo[0] == "5")
                //        {
                //            UserInfo[5] = "Level5";
                //            UserInfo[11] = "success";
                //        }
                //        else if (UserInfo[0] == "6")
                //        {
                //            UserInfo[6] = "Level6";
                //            UserInfo[11] = "success";
                //        }
                //        else if (UserInfo[0] == "7")
                //        {
                //            UserInfo[7] = "Level7";
                //            UserInfo[11] = "success";
                //        }
                //        else if (UserInfo[0] == "8")
                //        {
                //            UserInfo[8] = "Level8";
                //            UserInfo[11] = "success";
                //        }
                //        else if (UserInfo[0] == "9")
                //        {
                //            UserInfo[9] = "Level9";
                //            UserInfo[11] = "success";
                //        }
                //        else if (UserInfo[0] == "10")
                //        {
                //            UserInfo[10] = "Level10";
                //            UserInfo[11] = "success";
                //        }

                //    }
                //    Logger.Info("Accessed DB, Checking ApprovalMaster Details: ApprovalMaster Details Found");
                //    return Json(UserInfo);
                //}
            }

            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetApprovalLevel' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public JsonResult GetPaperTypeDetails(string PaperType, string PaperSize)
        {
            Logger.Info("Attempt Contract GetPaperTypeDetails");
            try
            {

                Logger.Info("Accessing DB for Configuration Details : Paper TYpe match");
                var TableConfig = db.tblConfigurations.Where(x => x.PaperType == PaperType).Where(x => x.PaperSize == PaperSize).Select(x => new { x.PaperType, x.PaperSize, x.MarginTop, x.MarginRight, x.MarginLeft, x.MarginBottom });

                string[] PaperInfo = new string[12];
                foreach (var r in TableConfig)
                {
                    PaperInfo[0] = r.PaperType;
                    PaperInfo[1] = r.PaperSize;
                    PaperInfo[2] = r.MarginTop.ToString();
                    PaperInfo[3] = r.MarginLeft.ToString();
                    PaperInfo[4] = r.MarginBottom.ToString();
                    PaperInfo[5] = r.MarginRight.ToString();
                    PaperInfo[6] = "success";
                }
                Logger.Info("Accessed DB, Checking Configuration Details : Details Found");
                return Json(PaperInfo);
            }

            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'GetPaperTypeDetails' Action HTTP POST Main exception");
                return Json("error");
            }
        }

        [HttpPost]
        public JsonResult getDepartment()
        {
            Logger.Info("Attempt Contract getDepartment");
            try
            {
                int CurrentUser = 0;
                try
                {
                    CurrentUser = Convert.ToInt32(User.Identity.Name.Split('|')[1]);
                }
                catch { }

                var EmployeePlant = "";
                EmployeePlant = (from tblUserMaster in db.tblUserMasters.Where(x => x.UserEmployeeID == CurrentUser) select tblUserMaster.UserPlant).First();


                Logger.Info("Accessing DB for Department List");
                var result = from tblDepartment in db.tblDepartments.Where(x => x.PlantName == EmployeePlant) select tblDepartment.DepartmentName;
                Logger.Info("Accessed DB, Checking Department List: Department Found");
                return Json(result);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'getDepartment' Action HTTP POST Main exception");
                return Json("error");
            }
        }


        [HttpPost]
        public JsonResult getSubDepartment(string user_category_id)
        {
            Logger.Info("Attempt Contract getSubDepartment");
            try
            {
                Logger.Info("Accessing DB for SubDepartment List");

                var result = from tblSubDepartment in db.tblSubDepartments.Where(x => x.DepartmentName == user_category_id) select tblSubDepartment.SubDepartmentName;
                Logger.Info("Accessed DB, Checking SubDepartment List: SubDepartment Found");
                return Json(result);
            }
            catch (Exception Ex)
            {
                Logger.Error(Ex, "'Contract' Controller , 'getSubDepartment' Action HTTP POST Main exception");
                return Json("error");
            }
        }

    }
}
